
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001540  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080016cc  080016cc  000026cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016ec  080016ec  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080016ec  080016ec  000026ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016f4  080016f4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016f4  080016f4  000026f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080016f8  080016f8  000026f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080016fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          000001b0  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000020c  2000020c  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ff4  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ee  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00005870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000185  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001eb3  00000000  00000000  00005c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000b70  00000000  00000000  00007ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00008638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e04  00000000  00000000  0000867c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00009480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080016b4 	.word	0x080016b4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	080016b4 	.word	0x080016b4

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <USART_PeriClockControl>:
#include"STM32Lxx_USARTx_header.h"


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d136      	bne.n	800025c <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a38      	ldr	r2, [pc, #224]	@ (80002d4 <USART_PeriClockControl+0xf8>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d106      	bne.n	8000204 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80001f6:	4b38      	ldr	r3, [pc, #224]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80001f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80001fa:	4a37      	ldr	r2, [pc, #220]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80001fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000200:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000202:	e061      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a35      	ldr	r2, [pc, #212]	@ (80002dc <USART_PeriClockControl+0x100>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800020c:	4b32      	ldr	r3, [pc, #200]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800020e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000210:	4a31      	ldr	r2, [pc, #196]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000216:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000218:	e056      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a30      	ldr	r2, [pc, #192]	@ (80002e0 <USART_PeriClockControl+0x104>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000222:	4b2d      	ldr	r3, [pc, #180]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000226:	4a2c      	ldr	r2, [pc, #176]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800022c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800022e:	e04b      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a2c      	ldr	r2, [pc, #176]	@ (80002e4 <USART_PeriClockControl+0x108>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000238:	4b27      	ldr	r3, [pc, #156]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800023a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800023c:	4a26      	ldr	r2, [pc, #152]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800023e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000242:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000244:	e040      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a27      	ldr	r2, [pc, #156]	@ (80002e8 <USART_PeriClockControl+0x10c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d13c      	bne.n	80002c8 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 800024e:	4b22      	ldr	r3, [pc, #136]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000252:	4a21      	ldr	r2, [pc, #132]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800025a:	e035      	b.n	80002c8 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <USART_PeriClockControl+0xf8>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000264:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000268:	4a1b      	ldr	r2, [pc, #108]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800026a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800026e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000270:	e02a      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <USART_PeriClockControl+0x100>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 800027a:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800027c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800027e:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000280:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000284:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000286:	e01f      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <USART_PeriClockControl+0x104>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d106      	bne.n	800029e <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800029a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800029c:	e014      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <USART_PeriClockControl+0x108>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002aa:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002ac:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002b0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002b2:	e009      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <USART_PeriClockControl+0x10c>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d105      	bne.n	80002c8 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80002c6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40013800 	.word	0x40013800
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40004400 	.word	0x40004400
 80002e0:	40004800 	.word	0x40004800
 80002e4:	40004c00 	.word	0x40004c00
 80002e8:	40005000 	.word	0x40005000

080002ec <USART_Init>:
}

*/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]

		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff6c 	bl	80001dc <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d104      	bne.n	8000316 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e010      	b.n	8000338 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d104      	bne.n	8000328 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e007      	b.n	8000338 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	791b      	ldrb	r3, [r3, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d103      	bne.n	8000338 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 030c 	orr.w	r3, r3, #12
 8000336:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7b5b      	ldrb	r3, [r3, #13]
 800033c:	031b      	lsls	r3, r3, #12
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b9b      	ldrb	r3, [r3, #14]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d104      	bne.n	8000356 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00b      	b.n	800036e <USART_Init+0x82>

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	7b9b      	ldrb	r3, [r3, #14]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d107      	bne.n	800036e <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000364:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800036c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7b1b      	ldrb	r3, [r3, #12]
 800037e:	031b      	lsls	r3, r3, #12
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	4313      	orrs	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	605a      	str	r2, [r3, #4]

		tempreg=0;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	7bdb      	ldrb	r3, [r3, #15]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d104      	bne.n	80003a4 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e014      	b.n	80003ce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7bdb      	ldrb	r3, [r3, #15]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d104      	bne.n	80003b6 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00b      	b.n	80003ce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	7bdb      	ldrb	r3, [r3, #15]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d107      	bne.n	80003ce <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003c4:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003cc:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2223      	movs	r2, #35	@ 0x23
 80003dc:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e031      	b.n	800045c <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80003f8:	bf00      	nop
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2180      	movs	r1, #128	@ 0x80
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f85a 	bl	80004ba <USART_GetFlagStatus>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f6      	beq.n	80003fa <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	7b5b      	ldrb	r3, [r3, #13]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d118      	bne.n	8000446 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	7b9b      	ldrb	r3, [r3, #14]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d106      	bne.n	800043e <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	3301      	adds	r3, #1
 8000434:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	e00b      	b.n	8000456 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3301      	adds	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	e007      	b.n	8000456 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3301      	adds	r3, #1
 8000454:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	d3c9      	bcc.n	80003f8 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000464:	bf00      	nop
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2140      	movs	r1, #64	@ 0x40
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f824 	bl	80004ba <USART_GetFlagStatus>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f6      	beq.n	8000466 <USART_SendData+0x80>
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <USART_PeripheralControl>:
}



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	460b      	mov	r3, r1
 800048c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800048e:	78fb      	ldrb	r3, [r7, #3]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d106      	bne.n	80004a2 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f043 0201 	orr.w	r2, r3, #1
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 80004a0:	e005      	b.n	80004ae <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f023 0201 	bic.w	r2, r3, #1
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	69da      	ldr	r2, [r3, #28]
 80004ca:	78fb      	ldrb	r3, [r7, #3]
 80004cc:	4013      	ands	r3, r2
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 80004d2:	2301      	movs	r3, #1
 80004d4:	e000      	b.n	80004d8 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d157      	bne.n	80005a6 <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 80004fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a59      	ldr	r2, [pc, #356]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 800050a:	e0a6      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a57      	ldr	r2, [pc, #348]	@ (800066c <GPIO_PeriClockControl+0x188>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 8000514:	4b54      	ldr	r3, [pc, #336]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000518:	4a53      	ldr	r2, [pc, #332]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000520:	e09b      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a52      	ldr	r2, [pc, #328]	@ (8000670 <GPIO_PeriClockControl+0x18c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 800052a:	4b4f      	ldr	r3, [pc, #316]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	4a4e      	ldr	r2, [pc, #312]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000536:	e090      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a4e      	ldr	r2, [pc, #312]	@ (8000674 <GPIO_PeriClockControl+0x190>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 8000540:	4b49      	ldr	r3, [pc, #292]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000544:	4a48      	ldr	r2, [pc, #288]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800054c:	e085      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a49      	ldr	r2, [pc, #292]	@ (8000678 <GPIO_PeriClockControl+0x194>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 8000556:	4b44      	ldr	r3, [pc, #272]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a43      	ldr	r2, [pc, #268]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800055c:	f043 0310 	orr.w	r3, r3, #16
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000562:	e07a      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a45      	ldr	r2, [pc, #276]	@ (800067c <GPIO_PeriClockControl+0x198>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000570:	4a3d      	ldr	r2, [pc, #244]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000572:	f043 0320 	orr.w	r3, r3, #32
 8000576:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000578:	e06f      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a40      	ldr	r2, [pc, #256]	@ (8000680 <GPIO_PeriClockControl+0x19c>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 8000582:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a38      	ldr	r2, [pc, #224]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800058e:	e064      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a3c      	ldr	r2, [pc, #240]	@ (8000684 <GPIO_PeriClockControl+0x1a0>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d160      	bne.n	800065a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 8000598:	4b33      	ldr	r3, [pc, #204]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800059a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059c:	4a32      	ldr	r2, [pc, #200]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800059e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005a4:	e059      	b.n	800065a <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 80005a6:	78fb      	ldrb	r3, [r7, #3]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d156      	bne.n	800065a <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005ba:	f023 0301 	bic.w	r3, r3, #1
 80005be:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005c0:	e04b      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a29      	ldr	r2, [pc, #164]	@ (800066c <GPIO_PeriClockControl+0x188>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a26      	ldr	r2, [pc, #152]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005d0:	f023 0302 	bic.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005d6:	e040      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <GPIO_PeriClockControl+0x18c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 80005e0:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e4:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005e6:	f023 0304 	bic.w	r3, r3, #4
 80005ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005ec:	e035      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <GPIO_PeriClockControl+0x190>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 80005fc:	f023 0308 	bic.w	r3, r3, #8
 8000600:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000602:	e02a      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <GPIO_PeriClockControl+0x194>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 800060c:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800060e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000610:	4a15      	ldr	r2, [pc, #84]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000612:	f023 0310 	bic.w	r3, r3, #16
 8000616:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000618:	e01f      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a17      	ldr	r2, [pc, #92]	@ (800067c <GPIO_PeriClockControl+0x198>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d106      	bne.n	8000630 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000626:	4a10      	ldr	r2, [pc, #64]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000628:	f023 0320 	bic.w	r3, r3, #32
 800062c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800062e:	e014      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <GPIO_PeriClockControl+0x19c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d106      	bne.n	8000646 <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800063a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063c:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 800063e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000642:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000644:	e009      	b.n	800065a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <GPIO_PeriClockControl+0x1a0>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d105      	bne.n	800065a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <GPIO_PeriClockControl+0x184>)
 8000654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	48000400 	.word	0x48000400
 8000670:	48000800 	.word	0x48000800
 8000674:	48000c00 	.word	0x48000c00
 8000678:	48001000 	.word	0x48001000
 800067c:	48001400 	.word	0x48001400
 8000680:	48001800 	.word	0x48001800
 8000684:	48001c00 	.word	0x48001c00

08000688 <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff22 	bl	80004e4 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	795b      	ldrb	r3, [r3, #5]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d822      	bhi.n	80006ee <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	795b      	ldrb	r3, [r3, #5]
 80006ac:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006b8:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	2103      	movs	r1, #3
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	400a      	ands	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6819      	ldr	r1, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	430a      	orrs	r2, r1
 80006e6:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	e0e1      	b.n	80008b2 <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	795b      	ldrb	r3, [r3, #5]
 80006f2:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006fe:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2103      	movs	r1, #3
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	400a      	ands	r2, r1
 800071c:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6819      	ldr	r1, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	697a      	ldr	r2, [r7, #20]
 800072a:	430a      	orrs	r2, r1
 800072c:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	795b      	ldrb	r3, [r3, #5]
 8000736:	2b04      	cmp	r3, #4
 8000738:	d117      	bne.n	800076a <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800073a:	4b47      	ldr	r3, [pc, #284]	@ (8000858 <GPIO_Init+0x1d0>)
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	7912      	ldrb	r2, [r2, #4]
 8000742:	4611      	mov	r1, r2
 8000744:	2201      	movs	r2, #1
 8000746:	408a      	lsls	r2, r1
 8000748:	4611      	mov	r1, r2
 800074a:	4a43      	ldr	r2, [pc, #268]	@ (8000858 <GPIO_Init+0x1d0>)
 800074c:	430b      	orrs	r3, r1
 800074e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000750:	4b41      	ldr	r3, [pc, #260]	@ (8000858 <GPIO_Init+0x1d0>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	7912      	ldrb	r2, [r2, #4]
 8000758:	4611      	mov	r1, r2
 800075a:	2201      	movs	r2, #1
 800075c:	408a      	lsls	r2, r1
 800075e:	43d2      	mvns	r2, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a3d      	ldr	r2, [pc, #244]	@ (8000858 <GPIO_Init+0x1d0>)
 8000764:	400b      	ands	r3, r1
 8000766:	6093      	str	r3, [r2, #8]
 8000768:	e035      	b.n	80007d6 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	795b      	ldrb	r3, [r3, #5]
 800076e:	2b05      	cmp	r3, #5
 8000770:	d117      	bne.n	80007a2 <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000772:	4b39      	ldr	r3, [pc, #228]	@ (8000858 <GPIO_Init+0x1d0>)
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	7912      	ldrb	r2, [r2, #4]
 800077a:	4611      	mov	r1, r2
 800077c:	2201      	movs	r2, #1
 800077e:	408a      	lsls	r2, r1
 8000780:	4611      	mov	r1, r2
 8000782:	4a35      	ldr	r2, [pc, #212]	@ (8000858 <GPIO_Init+0x1d0>)
 8000784:	430b      	orrs	r3, r1
 8000786:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000788:	4b33      	ldr	r3, [pc, #204]	@ (8000858 <GPIO_Init+0x1d0>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	7912      	ldrb	r2, [r2, #4]
 8000790:	4611      	mov	r1, r2
 8000792:	2201      	movs	r2, #1
 8000794:	408a      	lsls	r2, r1
 8000796:	43d2      	mvns	r2, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a2f      	ldr	r2, [pc, #188]	@ (8000858 <GPIO_Init+0x1d0>)
 800079c:	400b      	ands	r3, r1
 800079e:	60d3      	str	r3, [r2, #12]
 80007a0:	e019      	b.n	80007d6 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	2b06      	cmp	r3, #6
 80007a8:	d115      	bne.n	80007d6 <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <GPIO_Init+0x1d0>)
 80007ac:	68db      	ldr	r3, [r3, #12]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	7912      	ldrb	r2, [r2, #4]
 80007b2:	4611      	mov	r1, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	408a      	lsls	r2, r1
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a27      	ldr	r2, [pc, #156]	@ (8000858 <GPIO_Init+0x1d0>)
 80007bc:	430b      	orrs	r3, r1
 80007be:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007c0:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <GPIO_Init+0x1d0>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	7912      	ldrb	r2, [r2, #4]
 80007c8:	4611      	mov	r1, r2
 80007ca:	2201      	movs	r2, #1
 80007cc:	408a      	lsls	r2, r1
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a21      	ldr	r2, [pc, #132]	@ (8000858 <GPIO_Init+0x1d0>)
 80007d2:	430b      	orrs	r3, r1
 80007d4:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	f003 0303 	and.w	r3, r3, #3
 80007e6:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007f0:	d042      	beq.n	8000878 <GPIO_Init+0x1f0>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a19      	ldr	r2, [pc, #100]	@ (800085c <GPIO_Init+0x1d4>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d02b      	beq.n	8000854 <GPIO_Init+0x1cc>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a17      	ldr	r2, [pc, #92]	@ (8000860 <GPIO_Init+0x1d8>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d024      	beq.n	8000850 <GPIO_Init+0x1c8>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a16      	ldr	r2, [pc, #88]	@ (8000864 <GPIO_Init+0x1dc>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d01d      	beq.n	800084c <GPIO_Init+0x1c4>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <GPIO_Init+0x1e0>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d016      	beq.n	8000848 <GPIO_Init+0x1c0>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <GPIO_Init+0x1e4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d00f      	beq.n	8000844 <GPIO_Init+0x1bc>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <GPIO_Init+0x1e8>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d008      	beq.n	8000840 <GPIO_Init+0x1b8>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <GPIO_Init+0x1ec>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d101      	bne.n	800083c <GPIO_Init+0x1b4>
 8000838:	2307      	movs	r3, #7
 800083a:	e01e      	b.n	800087a <GPIO_Init+0x1f2>
 800083c:	2300      	movs	r3, #0
 800083e:	e01c      	b.n	800087a <GPIO_Init+0x1f2>
 8000840:	2306      	movs	r3, #6
 8000842:	e01a      	b.n	800087a <GPIO_Init+0x1f2>
 8000844:	2305      	movs	r3, #5
 8000846:	e018      	b.n	800087a <GPIO_Init+0x1f2>
 8000848:	2304      	movs	r3, #4
 800084a:	e016      	b.n	800087a <GPIO_Init+0x1f2>
 800084c:	2303      	movs	r3, #3
 800084e:	e014      	b.n	800087a <GPIO_Init+0x1f2>
 8000850:	2302      	movs	r3, #2
 8000852:	e012      	b.n	800087a <GPIO_Init+0x1f2>
 8000854:	2301      	movs	r3, #1
 8000856:	e010      	b.n	800087a <GPIO_Init+0x1f2>
 8000858:	40010400 	.word	0x40010400
 800085c:	48000400 	.word	0x48000400
 8000860:	48000800 	.word	0x48000800
 8000864:	48000c00 	.word	0x48000c00
 8000868:	48001000 	.word	0x48001000
 800086c:	48001400 	.word	0x48001400
 8000870:	48001800 	.word	0x48001800
 8000874:	48001c00 	.word	0x48001c00
 8000878:	2300      	movs	r3, #0
 800087a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800087c:	4b5d      	ldr	r3, [pc, #372]	@ (80009f4 <GPIO_Init+0x36c>)
 800087e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000880:	4a5c      	ldr	r2, [pc, #368]	@ (80009f4 <GPIO_Init+0x36c>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000888:	7c7a      	ldrb	r2, [r7, #17]
 800088a:	7cbb      	ldrb	r3, [r7, #18]
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	fa02 f103 	lsl.w	r1, r2, r3
 8000892:	4a59      	ldr	r2, [pc, #356]	@ (80009f8 <GPIO_Init+0x370>)
 8000894:	7cfb      	ldrb	r3, [r7, #19]
 8000896:	3302      	adds	r3, #2
 8000898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800089c:	4b57      	ldr	r3, [pc, #348]	@ (80009fc <GPIO_Init+0x374>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	7912      	ldrb	r2, [r2, #4]
 80008a4:	4611      	mov	r1, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	408a      	lsls	r2, r1
 80008aa:	4611      	mov	r1, r2
 80008ac:	4a53      	ldr	r2, [pc, #332]	@ (80009fc <GPIO_Init+0x374>)
 80008ae:	430b      	orrs	r3, r1
 80008b0:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	799b      	ldrb	r3, [r3, #6]
 80008ba:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	791b      	ldrb	r3, [r3, #4]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80008c6:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	400a      	ands	r2, r1
 80008e4:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6899      	ldr	r1, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	79db      	ldrb	r3, [r3, #7]
 80008fe:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800090a:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	791b      	ldrb	r3, [r3, #4]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	2103      	movs	r1, #3
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43db      	mvns	r3, r3
 8000920:	4619      	mov	r1, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	400a      	ands	r2, r1
 8000928:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68d9      	ldr	r1, [r3, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	430a      	orrs	r2, r1
 8000938:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7a1b      	ldrb	r3, [r3, #8]
 8000942:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800094c:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	4619      	mov	r1, r3
 800095a:	2301      	movs	r3, #1
 800095c:	408b      	lsls	r3, r1
 800095e:	43db      	mvns	r3, r3
 8000960:	4619      	mov	r1, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	400a      	ands	r2, r1
 8000968:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	6859      	ldr	r1, [r3, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	430a      	orrs	r2, r1
 8000978:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	795b      	ldrb	r3, [r3, #5]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d132      	bne.n	80009ec <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	b2db      	uxtb	r3, r3
 800098e:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	3208      	adds	r2, #8
 80009a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	210f      	movs	r1, #15
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4011      	ands	r1, r2
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	3208      	adds	r2, #8
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	3208      	adds	r2, #8
 80009ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7a5b      	ldrb	r3, [r3, #9]
 80009d2:	4619      	mov	r1, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	fa01 f303 	lsl.w	r3, r1, r3
 80009dc:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4311      	orrs	r1, r2
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	3208      	adds	r2, #8
 80009e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010000 	.word	0x40010000
 80009fc:	40010400 	.word	0x40010400

08000a00 <USART2_Init>:
uint8_t txBuf[TXBUFFSIZE];
USART_Handle_t usart2_handle;


void USART2_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <USART2_Init+0x3c>)
 8000a06:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <USART2_Init+0x40>)
 8000a08:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a3c <USART2_Init+0x3c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a10:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <USART2_Init+0x3c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <USART2_Init+0x3c>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <USART2_Init+0x3c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000a24:	4b05      	ldr	r3, [pc, #20]	@ (8000a3c <USART2_Init+0x3c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <USART2_Init+0x3c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 8000a30:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <USART2_Init+0x3c>)
 8000a32:	f7ff fc5b 	bl	80002ec <USART_Init>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000098 	.word	0x20000098
 8000a40:	40004400 	.word	0x40004400

08000a44 <USART2_GPIOInit>:


void USART2_GPIOInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fc29 	bl	80012a8 <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000a56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a5a:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a60:	2300      	movs	r3, #0
 8000a62:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000a64:	2301      	movs	r3, #1
 8000a66:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	737b      	strb	r3, [r7, #13]

    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN();
 8000a74:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <USART2_GPIOInit+0x58>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <USART2_GPIOInit+0x58>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe00 	bl	8000688 <GPIO_Init>
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fdfa 	bl	8000688 <GPIO_Init>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <__io_putchar>:
    for(uint32_t i=0; i<500000; i++);
}


int __io_putchar(int ch)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    USART_SendData(&usart2_handle, (uint8_t*)&ch, 1);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <__io_putchar+0x20>)
 8000ab0:	f7ff fc99 	bl	80003e6 <USART_SendData>
    return ch;
 8000ab4:	687b      	ldr	r3, [r7, #4]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000098 	.word	0x20000098

08000ac4 <USART_DMATxInit>:
void USART_DMATxInit(void)
{
 8000ac4:	b598      	push	{r3, r4, r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<0);
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <USART_DMATxInit+0x70>)
 8000aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000acc:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <USART_DMATxInit+0x70>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6493      	str	r3, [r2, #72]	@ 0x48

	DMA1_CSELR->CSELR &= ~(0xF << (4*(7-1)));
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <USART_DMATxInit+0x74>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <USART_DMATxInit+0x74>)
 8000ada:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000ade:	6013      	str	r3, [r2, #0]
	DMA1_CSELR->CSELR |=  (0x02000000);
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <USART_DMATxInit+0x74>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <USART_DMATxInit+0x74>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	6013      	str	r3, [r2, #0]

	DMA1_Channel7->CCR &=~(1<<0);
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
	DMA1_Channel7->CPAR = (uint32_t)&USART2->TDR;
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000afa:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <USART_DMATxInit+0x7c>)
 8000afc:	609a      	str	r2, [r3, #8]
	DMA1_Channel7->CMAR = (uint32_t)txBuf;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000b00:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <USART_DMATxInit+0x80>)
 8000b02:	60da      	str	r2, [r3, #12]
	DMA1_Channel7 ->CNDTR = strlen((char*)txBuf);
 8000b04:	4c0d      	ldr	r4, [pc, #52]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000b06:	480f      	ldr	r0, [pc, #60]	@ (8000b44 <USART_DMATxInit+0x80>)
 8000b08:	f7ff fb60 	bl	80001cc <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	6063      	str	r3, [r4, #4]
	DMA1_Channel7 ->CCR =(1<<4)|(1<<7)|(1<<13);
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000b12:	f242 0290 	movw	r2, #8336	@ 0x2090
 8000b16:	601a      	str	r2, [r3, #0]

	USART2->CR3 |=(1<<7);
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <USART_DMATxInit+0x84>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <USART_DMATxInit+0x84>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b22:	6093      	str	r3, [r2, #8]
	DMA1_Channel7->CCR|=(1<<0);
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <USART_DMATxInit+0x78>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	bd98      	pop	{r3, r4, r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	400200a8 	.word	0x400200a8
 8000b3c:	40020080 	.word	0x40020080
 8000b40:	40004428 	.word	0x40004428
 8000b44:	20000078 	.word	0x20000078
 8000b48:	40004400 	.word	0x40004400

08000b4c <main>:

int main()
{
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	af00      	add	r7, sp, #0


    USART2_GPIOInit();
 8000b50:	f7ff ff78 	bl	8000a44 <USART2_GPIOInit>
    USART2_Init();
 8000b54:	f7ff ff54 	bl	8000a00 <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <main+0x60>)
 8000b5c:	f7ff fc91 	bl	8000482 <USART_PeripheralControl>
    printf("DMA Demo \r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	@ (8000bb0 <main+0x64>)
 8000b62:	f000 fac1 	bl	80010e8 <puts>
    USART_DMATxInit();
 8000b66:	f7ff ffad 	bl	8000ac4 <USART_DMATxInit>
    while(1)
    {
    	while((DMA1_Channel7->CNDTR)!=0);
 8000b6a:	bf00      	nop
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <main+0x68>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1fb      	bne.n	8000b6c <main+0x20>
    	DMA1_Channel7->CCR &=~(1<<0);
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <main+0x68>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <main+0x68>)
 8000b7a:	f023 0301 	bic.w	r3, r3, #1
 8000b7e:	6013      	str	r3, [r2, #0]
    	strcpy((char*)txBuf, "DMA Data Transmit\r\n");
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <main+0x6c>)
 8000b82:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <main+0x70>)
 8000b84:	4614      	mov	r4, r2
 8000b86:	461d      	mov	r5, r3
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	6023      	str	r3, [r4, #0]
    	DMA1_Channel7 ->CNDTR = strlen((char*)txBuf);
 8000b90:	4c08      	ldr	r4, [pc, #32]	@ (8000bb4 <main+0x68>)
 8000b92:	4809      	ldr	r0, [pc, #36]	@ (8000bb8 <main+0x6c>)
 8000b94:	f7ff fb1a 	bl	80001cc <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	6063      	str	r3, [r4, #4]
    	DMA1_Channel7 ->CCR |=(1<<0);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <main+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <main+0x68>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6013      	str	r3, [r2, #0]
    	while((DMA1_Channel7->CNDTR)!=0);
 8000ba8:	e7df      	b.n	8000b6a <main+0x1e>
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	080016cc 	.word	0x080016cc
 8000bb4:	40020080 	.word	0x40020080
 8000bb8:	20000078 	.word	0x20000078
 8000bbc:	080016d8 	.word	0x080016d8

08000bc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e00a      	b.n	8000be8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bd2:	f3af 8000 	nop.w
 8000bd6:	4601      	mov	r1, r0
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	b2ca      	uxtb	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf0      	blt.n	8000bd2 <_read+0x12>
  }

  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	60f8      	str	r0, [r7, #12]
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e009      	b.n	8000c20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff43 	bl	8000aa0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf1      	blt.n	8000c0c <_write+0x12>
  }
  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	@ (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f000 fb4a 	bl	8001364 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20018000 	.word	0x20018000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	200000bc 	.word	0x200000bc
 8000d04:	20000210 	.word	0x20000210

08000d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d08:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d36:	f000 fb1b 	bl	8001370 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000d3a:	f7ff ff07 	bl	8000b4c <main>

08000d3e <LoopForever>:

LoopForever:
  b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   r0, =_estack
 8000d40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d4c:	080016fc 	.word	0x080016fc
  ldr r2, =_sbss
 8000d50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d54:	2000020c 	.word	0x2000020c

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <sbrk_aligned>:
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8000d9c <sbrk_aligned+0x40>)
 8000d60:	460c      	mov	r4, r1
 8000d62:	6831      	ldr	r1, [r6, #0]
 8000d64:	4605      	mov	r5, r0
 8000d66:	b911      	cbnz	r1, 8000d6e <sbrk_aligned+0x12>
 8000d68:	f000 fada 	bl	8001320 <_sbrk_r>
 8000d6c:	6030      	str	r0, [r6, #0]
 8000d6e:	4621      	mov	r1, r4
 8000d70:	4628      	mov	r0, r5
 8000d72:	f000 fad5 	bl	8001320 <_sbrk_r>
 8000d76:	1c43      	adds	r3, r0, #1
 8000d78:	d103      	bne.n	8000d82 <sbrk_aligned+0x26>
 8000d7a:	f04f 34ff 	mov.w	r4, #4294967295
 8000d7e:	4620      	mov	r0, r4
 8000d80:	bd70      	pop	{r4, r5, r6, pc}
 8000d82:	1cc4      	adds	r4, r0, #3
 8000d84:	f024 0403 	bic.w	r4, r4, #3
 8000d88:	42a0      	cmp	r0, r4
 8000d8a:	d0f8      	beq.n	8000d7e <sbrk_aligned+0x22>
 8000d8c:	1a21      	subs	r1, r4, r0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f000 fac6 	bl	8001320 <_sbrk_r>
 8000d94:	3001      	adds	r0, #1
 8000d96:	d1f2      	bne.n	8000d7e <sbrk_aligned+0x22>
 8000d98:	e7ef      	b.n	8000d7a <sbrk_aligned+0x1e>
 8000d9a:	bf00      	nop
 8000d9c:	200000c0 	.word	0x200000c0

08000da0 <_malloc_r>:
 8000da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da4:	1ccd      	adds	r5, r1, #3
 8000da6:	f025 0503 	bic.w	r5, r5, #3
 8000daa:	3508      	adds	r5, #8
 8000dac:	2d0c      	cmp	r5, #12
 8000dae:	bf38      	it	cc
 8000db0:	250c      	movcc	r5, #12
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	4606      	mov	r6, r0
 8000db6:	db01      	blt.n	8000dbc <_malloc_r+0x1c>
 8000db8:	42a9      	cmp	r1, r5
 8000dba:	d904      	bls.n	8000dc6 <_malloc_r+0x26>
 8000dbc:	230c      	movs	r3, #12
 8000dbe:	6033      	str	r3, [r6, #0]
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e9c <_malloc_r+0xfc>
 8000dca:	f000 f869 	bl	8000ea0 <__malloc_lock>
 8000dce:	f8d8 3000 	ldr.w	r3, [r8]
 8000dd2:	461c      	mov	r4, r3
 8000dd4:	bb44      	cbnz	r4, 8000e28 <_malloc_r+0x88>
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	4630      	mov	r0, r6
 8000dda:	f7ff ffbf 	bl	8000d5c <sbrk_aligned>
 8000dde:	1c43      	adds	r3, r0, #1
 8000de0:	4604      	mov	r4, r0
 8000de2:	d158      	bne.n	8000e96 <_malloc_r+0xf6>
 8000de4:	f8d8 4000 	ldr.w	r4, [r8]
 8000de8:	4627      	mov	r7, r4
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d143      	bne.n	8000e76 <_malloc_r+0xd6>
 8000dee:	2c00      	cmp	r4, #0
 8000df0:	d04b      	beq.n	8000e8a <_malloc_r+0xea>
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	4639      	mov	r1, r7
 8000df6:	4630      	mov	r0, r6
 8000df8:	eb04 0903 	add.w	r9, r4, r3
 8000dfc:	f000 fa90 	bl	8001320 <_sbrk_r>
 8000e00:	4581      	cmp	r9, r0
 8000e02:	d142      	bne.n	8000e8a <_malloc_r+0xea>
 8000e04:	6821      	ldr	r1, [r4, #0]
 8000e06:	1a6d      	subs	r5, r5, r1
 8000e08:	4629      	mov	r1, r5
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	f7ff ffa6 	bl	8000d5c <sbrk_aligned>
 8000e10:	3001      	adds	r0, #1
 8000e12:	d03a      	beq.n	8000e8a <_malloc_r+0xea>
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	442b      	add	r3, r5
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	bb62      	cbnz	r2, 8000e7c <_malloc_r+0xdc>
 8000e22:	f8c8 7000 	str.w	r7, [r8]
 8000e26:	e00f      	b.n	8000e48 <_malloc_r+0xa8>
 8000e28:	6822      	ldr	r2, [r4, #0]
 8000e2a:	1b52      	subs	r2, r2, r5
 8000e2c:	d420      	bmi.n	8000e70 <_malloc_r+0xd0>
 8000e2e:	2a0b      	cmp	r2, #11
 8000e30:	d917      	bls.n	8000e62 <_malloc_r+0xc2>
 8000e32:	1961      	adds	r1, r4, r5
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	6025      	str	r5, [r4, #0]
 8000e38:	bf18      	it	ne
 8000e3a:	6059      	strne	r1, [r3, #4]
 8000e3c:	6863      	ldr	r3, [r4, #4]
 8000e3e:	bf08      	it	eq
 8000e40:	f8c8 1000 	streq.w	r1, [r8]
 8000e44:	5162      	str	r2, [r4, r5]
 8000e46:	604b      	str	r3, [r1, #4]
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f000 f82f 	bl	8000eac <__malloc_unlock>
 8000e4e:	f104 000b 	add.w	r0, r4, #11
 8000e52:	1d23      	adds	r3, r4, #4
 8000e54:	f020 0007 	bic.w	r0, r0, #7
 8000e58:	1ac2      	subs	r2, r0, r3
 8000e5a:	bf1c      	itt	ne
 8000e5c:	1a1b      	subne	r3, r3, r0
 8000e5e:	50a3      	strne	r3, [r4, r2]
 8000e60:	e7af      	b.n	8000dc2 <_malloc_r+0x22>
 8000e62:	6862      	ldr	r2, [r4, #4]
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	bf0c      	ite	eq
 8000e68:	f8c8 2000 	streq.w	r2, [r8]
 8000e6c:	605a      	strne	r2, [r3, #4]
 8000e6e:	e7eb      	b.n	8000e48 <_malloc_r+0xa8>
 8000e70:	4623      	mov	r3, r4
 8000e72:	6864      	ldr	r4, [r4, #4]
 8000e74:	e7ae      	b.n	8000dd4 <_malloc_r+0x34>
 8000e76:	463c      	mov	r4, r7
 8000e78:	687f      	ldr	r7, [r7, #4]
 8000e7a:	e7b6      	b.n	8000dea <_malloc_r+0x4a>
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	42a3      	cmp	r3, r4
 8000e82:	d1fb      	bne.n	8000e7c <_malloc_r+0xdc>
 8000e84:	2300      	movs	r3, #0
 8000e86:	6053      	str	r3, [r2, #4]
 8000e88:	e7de      	b.n	8000e48 <_malloc_r+0xa8>
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	6033      	str	r3, [r6, #0]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f000 f80c 	bl	8000eac <__malloc_unlock>
 8000e94:	e794      	b.n	8000dc0 <_malloc_r+0x20>
 8000e96:	6005      	str	r5, [r0, #0]
 8000e98:	e7d6      	b.n	8000e48 <_malloc_r+0xa8>
 8000e9a:	bf00      	nop
 8000e9c:	200000c4 	.word	0x200000c4

08000ea0 <__malloc_lock>:
 8000ea0:	4801      	ldr	r0, [pc, #4]	@ (8000ea8 <__malloc_lock+0x8>)
 8000ea2:	f000 ba8a 	b.w	80013ba <__retarget_lock_acquire_recursive>
 8000ea6:	bf00      	nop
 8000ea8:	20000208 	.word	0x20000208

08000eac <__malloc_unlock>:
 8000eac:	4801      	ldr	r0, [pc, #4]	@ (8000eb4 <__malloc_unlock+0x8>)
 8000eae:	f000 ba85 	b.w	80013bc <__retarget_lock_release_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	20000208 	.word	0x20000208

08000eb8 <std>:
 8000eb8:	2300      	movs	r3, #0
 8000eba:	b510      	push	{r4, lr}
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8000ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ec6:	6083      	str	r3, [r0, #8]
 8000ec8:	8181      	strh	r1, [r0, #12]
 8000eca:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ecc:	81c2      	strh	r2, [r0, #14]
 8000ece:	6183      	str	r3, [r0, #24]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	305c      	adds	r0, #92	@ 0x5c
 8000ed6:	f000 f9e7 	bl	80012a8 <memset>
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <std+0x58>)
 8000edc:	6263      	str	r3, [r4, #36]	@ 0x24
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <std+0x5c>)
 8000ee0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <std+0x60>)
 8000ee4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <std+0x64>)
 8000ee8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <std+0x68>)
 8000eec:	6224      	str	r4, [r4, #32]
 8000eee:	429c      	cmp	r4, r3
 8000ef0:	d006      	beq.n	8000f00 <std+0x48>
 8000ef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ef6:	4294      	cmp	r4, r2
 8000ef8:	d002      	beq.n	8000f00 <std+0x48>
 8000efa:	33d0      	adds	r3, #208	@ 0xd0
 8000efc:	429c      	cmp	r4, r3
 8000efe:	d105      	bne.n	8000f0c <std+0x54>
 8000f00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f08:	f000 ba56 	b.w	80013b8 <__retarget_lock_init_recursive>
 8000f0c:	bd10      	pop	{r4, pc}
 8000f0e:	bf00      	nop
 8000f10:	080010f9 	.word	0x080010f9
 8000f14:	0800111b 	.word	0x0800111b
 8000f18:	08001153 	.word	0x08001153
 8000f1c:	08001177 	.word	0x08001177
 8000f20:	200000c8 	.word	0x200000c8

08000f24 <stdio_exit_handler>:
 8000f24:	4a02      	ldr	r2, [pc, #8]	@ (8000f30 <stdio_exit_handler+0xc>)
 8000f26:	4903      	ldr	r1, [pc, #12]	@ (8000f34 <stdio_exit_handler+0x10>)
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <stdio_exit_handler+0x14>)
 8000f2a:	f000 b869 	b.w	8001000 <_fwalk_sglue>
 8000f2e:	bf00      	nop
 8000f30:	20000000 	.word	0x20000000
 8000f34:	0800155d 	.word	0x0800155d
 8000f38:	20000010 	.word	0x20000010

08000f3c <cleanup_stdio>:
 8000f3c:	6841      	ldr	r1, [r0, #4]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <cleanup_stdio+0x34>)
 8000f40:	4299      	cmp	r1, r3
 8000f42:	b510      	push	{r4, lr}
 8000f44:	4604      	mov	r4, r0
 8000f46:	d001      	beq.n	8000f4c <cleanup_stdio+0x10>
 8000f48:	f000 fb08 	bl	800155c <_fflush_r>
 8000f4c:	68a1      	ldr	r1, [r4, #8]
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <cleanup_stdio+0x38>)
 8000f50:	4299      	cmp	r1, r3
 8000f52:	d002      	beq.n	8000f5a <cleanup_stdio+0x1e>
 8000f54:	4620      	mov	r0, r4
 8000f56:	f000 fb01 	bl	800155c <_fflush_r>
 8000f5a:	68e1      	ldr	r1, [r4, #12]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <cleanup_stdio+0x3c>)
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d004      	beq.n	8000f6c <cleanup_stdio+0x30>
 8000f62:	4620      	mov	r0, r4
 8000f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f68:	f000 baf8 	b.w	800155c <_fflush_r>
 8000f6c:	bd10      	pop	{r4, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000c8 	.word	0x200000c8
 8000f74:	20000130 	.word	0x20000130
 8000f78:	20000198 	.word	0x20000198

08000f7c <global_stdio_init.part.0>:
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <global_stdio_init.part.0+0x30>)
 8000f80:	4c0b      	ldr	r4, [pc, #44]	@ (8000fb0 <global_stdio_init.part.0+0x34>)
 8000f82:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb4 <global_stdio_init.part.0+0x38>)
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	4620      	mov	r0, r4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	f7ff ff94 	bl	8000eb8 <std>
 8000f90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f94:	2201      	movs	r2, #1
 8000f96:	2109      	movs	r1, #9
 8000f98:	f7ff ff8e 	bl	8000eb8 <std>
 8000f9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa6:	2112      	movs	r1, #18
 8000fa8:	f7ff bf86 	b.w	8000eb8 <std>
 8000fac:	20000200 	.word	0x20000200
 8000fb0:	200000c8 	.word	0x200000c8
 8000fb4:	08000f25 	.word	0x08000f25

08000fb8 <__sfp_lock_acquire>:
 8000fb8:	4801      	ldr	r0, [pc, #4]	@ (8000fc0 <__sfp_lock_acquire+0x8>)
 8000fba:	f000 b9fe 	b.w	80013ba <__retarget_lock_acquire_recursive>
 8000fbe:	bf00      	nop
 8000fc0:	20000209 	.word	0x20000209

08000fc4 <__sfp_lock_release>:
 8000fc4:	4801      	ldr	r0, [pc, #4]	@ (8000fcc <__sfp_lock_release+0x8>)
 8000fc6:	f000 b9f9 	b.w	80013bc <__retarget_lock_release_recursive>
 8000fca:	bf00      	nop
 8000fcc:	20000209 	.word	0x20000209

08000fd0 <__sinit>:
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	f7ff fff0 	bl	8000fb8 <__sfp_lock_acquire>
 8000fd8:	6a23      	ldr	r3, [r4, #32]
 8000fda:	b11b      	cbz	r3, 8000fe4 <__sinit+0x14>
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe0:	f7ff bff0 	b.w	8000fc4 <__sfp_lock_release>
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__sinit+0x28>)
 8000fe6:	6223      	str	r3, [r4, #32]
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <__sinit+0x2c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f5      	bne.n	8000fdc <__sinit+0xc>
 8000ff0:	f7ff ffc4 	bl	8000f7c <global_stdio_init.part.0>
 8000ff4:	e7f2      	b.n	8000fdc <__sinit+0xc>
 8000ff6:	bf00      	nop
 8000ff8:	08000f3d 	.word	0x08000f3d
 8000ffc:	20000200 	.word	0x20000200

08001000 <_fwalk_sglue>:
 8001000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001004:	4607      	mov	r7, r0
 8001006:	4688      	mov	r8, r1
 8001008:	4614      	mov	r4, r2
 800100a:	2600      	movs	r6, #0
 800100c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001010:	f1b9 0901 	subs.w	r9, r9, #1
 8001014:	d505      	bpl.n	8001022 <_fwalk_sglue+0x22>
 8001016:	6824      	ldr	r4, [r4, #0]
 8001018:	2c00      	cmp	r4, #0
 800101a:	d1f7      	bne.n	800100c <_fwalk_sglue+0xc>
 800101c:	4630      	mov	r0, r6
 800101e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001022:	89ab      	ldrh	r3, [r5, #12]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d907      	bls.n	8001038 <_fwalk_sglue+0x38>
 8001028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800102c:	3301      	adds	r3, #1
 800102e:	d003      	beq.n	8001038 <_fwalk_sglue+0x38>
 8001030:	4629      	mov	r1, r5
 8001032:	4638      	mov	r0, r7
 8001034:	47c0      	blx	r8
 8001036:	4306      	orrs	r6, r0
 8001038:	3568      	adds	r5, #104	@ 0x68
 800103a:	e7e9      	b.n	8001010 <_fwalk_sglue+0x10>

0800103c <_puts_r>:
 800103c:	6a03      	ldr	r3, [r0, #32]
 800103e:	b570      	push	{r4, r5, r6, lr}
 8001040:	6884      	ldr	r4, [r0, #8]
 8001042:	4605      	mov	r5, r0
 8001044:	460e      	mov	r6, r1
 8001046:	b90b      	cbnz	r3, 800104c <_puts_r+0x10>
 8001048:	f7ff ffc2 	bl	8000fd0 <__sinit>
 800104c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800104e:	07db      	lsls	r3, r3, #31
 8001050:	d405      	bmi.n	800105e <_puts_r+0x22>
 8001052:	89a3      	ldrh	r3, [r4, #12]
 8001054:	0598      	lsls	r0, r3, #22
 8001056:	d402      	bmi.n	800105e <_puts_r+0x22>
 8001058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800105a:	f000 f9ae 	bl	80013ba <__retarget_lock_acquire_recursive>
 800105e:	89a3      	ldrh	r3, [r4, #12]
 8001060:	0719      	lsls	r1, r3, #28
 8001062:	d502      	bpl.n	800106a <_puts_r+0x2e>
 8001064:	6923      	ldr	r3, [r4, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d135      	bne.n	80010d6 <_puts_r+0x9a>
 800106a:	4621      	mov	r1, r4
 800106c:	4628      	mov	r0, r5
 800106e:	f000 f8c5 	bl	80011fc <__swsetup_r>
 8001072:	b380      	cbz	r0, 80010d6 <_puts_r+0x9a>
 8001074:	f04f 35ff 	mov.w	r5, #4294967295
 8001078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800107a:	07da      	lsls	r2, r3, #31
 800107c:	d405      	bmi.n	800108a <_puts_r+0x4e>
 800107e:	89a3      	ldrh	r3, [r4, #12]
 8001080:	059b      	lsls	r3, r3, #22
 8001082:	d402      	bmi.n	800108a <_puts_r+0x4e>
 8001084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001086:	f000 f999 	bl	80013bc <__retarget_lock_release_recursive>
 800108a:	4628      	mov	r0, r5
 800108c:	bd70      	pop	{r4, r5, r6, pc}
 800108e:	2b00      	cmp	r3, #0
 8001090:	da04      	bge.n	800109c <_puts_r+0x60>
 8001092:	69a2      	ldr	r2, [r4, #24]
 8001094:	429a      	cmp	r2, r3
 8001096:	dc17      	bgt.n	80010c8 <_puts_r+0x8c>
 8001098:	290a      	cmp	r1, #10
 800109a:	d015      	beq.n	80010c8 <_puts_r+0x8c>
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	6022      	str	r2, [r4, #0]
 80010a2:	7019      	strb	r1, [r3, #0]
 80010a4:	68a3      	ldr	r3, [r4, #8]
 80010a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010aa:	3b01      	subs	r3, #1
 80010ac:	60a3      	str	r3, [r4, #8]
 80010ae:	2900      	cmp	r1, #0
 80010b0:	d1ed      	bne.n	800108e <_puts_r+0x52>
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da11      	bge.n	80010da <_puts_r+0x9e>
 80010b6:	4622      	mov	r2, r4
 80010b8:	210a      	movs	r1, #10
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 f85f 	bl	800117e <__swbuf_r>
 80010c0:	3001      	adds	r0, #1
 80010c2:	d0d7      	beq.n	8001074 <_puts_r+0x38>
 80010c4:	250a      	movs	r5, #10
 80010c6:	e7d7      	b.n	8001078 <_puts_r+0x3c>
 80010c8:	4622      	mov	r2, r4
 80010ca:	4628      	mov	r0, r5
 80010cc:	f000 f857 	bl	800117e <__swbuf_r>
 80010d0:	3001      	adds	r0, #1
 80010d2:	d1e7      	bne.n	80010a4 <_puts_r+0x68>
 80010d4:	e7ce      	b.n	8001074 <_puts_r+0x38>
 80010d6:	3e01      	subs	r6, #1
 80010d8:	e7e4      	b.n	80010a4 <_puts_r+0x68>
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	6022      	str	r2, [r4, #0]
 80010e0:	220a      	movs	r2, #10
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e7ee      	b.n	80010c4 <_puts_r+0x88>
	...

080010e8 <puts>:
 80010e8:	4b02      	ldr	r3, [pc, #8]	@ (80010f4 <puts+0xc>)
 80010ea:	4601      	mov	r1, r0
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f7ff bfa5 	b.w	800103c <_puts_r>
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <__sread>:
 80010f8:	b510      	push	{r4, lr}
 80010fa:	460c      	mov	r4, r1
 80010fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001100:	f000 f8fc 	bl	80012fc <_read_r>
 8001104:	2800      	cmp	r0, #0
 8001106:	bfab      	itete	ge
 8001108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800110a:	89a3      	ldrhlt	r3, [r4, #12]
 800110c:	181b      	addge	r3, r3, r0
 800110e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001112:	bfac      	ite	ge
 8001114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001116:	81a3      	strhlt	r3, [r4, #12]
 8001118:	bd10      	pop	{r4, pc}

0800111a <__swrite>:
 800111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800111e:	461f      	mov	r7, r3
 8001120:	898b      	ldrh	r3, [r1, #12]
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	4605      	mov	r5, r0
 8001126:	460c      	mov	r4, r1
 8001128:	4616      	mov	r6, r2
 800112a:	d505      	bpl.n	8001138 <__swrite+0x1e>
 800112c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001130:	2302      	movs	r3, #2
 8001132:	2200      	movs	r2, #0
 8001134:	f000 f8d0 	bl	80012d8 <_lseek_r>
 8001138:	89a3      	ldrh	r3, [r4, #12]
 800113a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800113e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001142:	81a3      	strh	r3, [r4, #12]
 8001144:	4632      	mov	r2, r6
 8001146:	463b      	mov	r3, r7
 8001148:	4628      	mov	r0, r5
 800114a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800114e:	f000 b8f7 	b.w	8001340 <_write_r>

08001152 <__sseek>:
 8001152:	b510      	push	{r4, lr}
 8001154:	460c      	mov	r4, r1
 8001156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800115a:	f000 f8bd 	bl	80012d8 <_lseek_r>
 800115e:	1c43      	adds	r3, r0, #1
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	bf15      	itete	ne
 8001164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800116a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800116e:	81a3      	strheq	r3, [r4, #12]
 8001170:	bf18      	it	ne
 8001172:	81a3      	strhne	r3, [r4, #12]
 8001174:	bd10      	pop	{r4, pc}

08001176 <__sclose>:
 8001176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117a:	f000 b89d 	b.w	80012b8 <_close_r>

0800117e <__swbuf_r>:
 800117e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001180:	460e      	mov	r6, r1
 8001182:	4614      	mov	r4, r2
 8001184:	4605      	mov	r5, r0
 8001186:	b118      	cbz	r0, 8001190 <__swbuf_r+0x12>
 8001188:	6a03      	ldr	r3, [r0, #32]
 800118a:	b90b      	cbnz	r3, 8001190 <__swbuf_r+0x12>
 800118c:	f7ff ff20 	bl	8000fd0 <__sinit>
 8001190:	69a3      	ldr	r3, [r4, #24]
 8001192:	60a3      	str	r3, [r4, #8]
 8001194:	89a3      	ldrh	r3, [r4, #12]
 8001196:	071a      	lsls	r2, r3, #28
 8001198:	d501      	bpl.n	800119e <__swbuf_r+0x20>
 800119a:	6923      	ldr	r3, [r4, #16]
 800119c:	b943      	cbnz	r3, 80011b0 <__swbuf_r+0x32>
 800119e:	4621      	mov	r1, r4
 80011a0:	4628      	mov	r0, r5
 80011a2:	f000 f82b 	bl	80011fc <__swsetup_r>
 80011a6:	b118      	cbz	r0, 80011b0 <__swbuf_r+0x32>
 80011a8:	f04f 37ff 	mov.w	r7, #4294967295
 80011ac:	4638      	mov	r0, r7
 80011ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011b0:	6823      	ldr	r3, [r4, #0]
 80011b2:	6922      	ldr	r2, [r4, #16]
 80011b4:	1a98      	subs	r0, r3, r2
 80011b6:	6963      	ldr	r3, [r4, #20]
 80011b8:	b2f6      	uxtb	r6, r6
 80011ba:	4283      	cmp	r3, r0
 80011bc:	4637      	mov	r7, r6
 80011be:	dc05      	bgt.n	80011cc <__swbuf_r+0x4e>
 80011c0:	4621      	mov	r1, r4
 80011c2:	4628      	mov	r0, r5
 80011c4:	f000 f9ca 	bl	800155c <_fflush_r>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1ed      	bne.n	80011a8 <__swbuf_r+0x2a>
 80011cc:	68a3      	ldr	r3, [r4, #8]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	60a3      	str	r3, [r4, #8]
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	6022      	str	r2, [r4, #0]
 80011d8:	701e      	strb	r6, [r3, #0]
 80011da:	6962      	ldr	r2, [r4, #20]
 80011dc:	1c43      	adds	r3, r0, #1
 80011de:	429a      	cmp	r2, r3
 80011e0:	d004      	beq.n	80011ec <__swbuf_r+0x6e>
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	07db      	lsls	r3, r3, #31
 80011e6:	d5e1      	bpl.n	80011ac <__swbuf_r+0x2e>
 80011e8:	2e0a      	cmp	r6, #10
 80011ea:	d1df      	bne.n	80011ac <__swbuf_r+0x2e>
 80011ec:	4621      	mov	r1, r4
 80011ee:	4628      	mov	r0, r5
 80011f0:	f000 f9b4 	bl	800155c <_fflush_r>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d0d9      	beq.n	80011ac <__swbuf_r+0x2e>
 80011f8:	e7d6      	b.n	80011a8 <__swbuf_r+0x2a>
	...

080011fc <__swsetup_r>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <__swsetup_r+0xa8>)
 8001200:	4605      	mov	r5, r0
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	460c      	mov	r4, r1
 8001206:	b118      	cbz	r0, 8001210 <__swsetup_r+0x14>
 8001208:	6a03      	ldr	r3, [r0, #32]
 800120a:	b90b      	cbnz	r3, 8001210 <__swsetup_r+0x14>
 800120c:	f7ff fee0 	bl	8000fd0 <__sinit>
 8001210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001214:	0719      	lsls	r1, r3, #28
 8001216:	d422      	bmi.n	800125e <__swsetup_r+0x62>
 8001218:	06da      	lsls	r2, r3, #27
 800121a:	d407      	bmi.n	800122c <__swsetup_r+0x30>
 800121c:	2209      	movs	r2, #9
 800121e:	602a      	str	r2, [r5, #0]
 8001220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001224:	81a3      	strh	r3, [r4, #12]
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	e033      	b.n	8001294 <__swsetup_r+0x98>
 800122c:	0758      	lsls	r0, r3, #29
 800122e:	d512      	bpl.n	8001256 <__swsetup_r+0x5a>
 8001230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001232:	b141      	cbz	r1, 8001246 <__swsetup_r+0x4a>
 8001234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001238:	4299      	cmp	r1, r3
 800123a:	d002      	beq.n	8001242 <__swsetup_r+0x46>
 800123c:	4628      	mov	r0, r5
 800123e:	f000 f8bf 	bl	80013c0 <_free_r>
 8001242:	2300      	movs	r3, #0
 8001244:	6363      	str	r3, [r4, #52]	@ 0x34
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800124c:	81a3      	strh	r3, [r4, #12]
 800124e:	2300      	movs	r3, #0
 8001250:	6063      	str	r3, [r4, #4]
 8001252:	6923      	ldr	r3, [r4, #16]
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	6923      	ldr	r3, [r4, #16]
 8001260:	b94b      	cbnz	r3, 8001276 <__swsetup_r+0x7a>
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800126c:	d003      	beq.n	8001276 <__swsetup_r+0x7a>
 800126e:	4621      	mov	r1, r4
 8001270:	4628      	mov	r0, r5
 8001272:	f000 f9c1 	bl	80015f8 <__smakebuf_r>
 8001276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800127a:	f013 0201 	ands.w	r2, r3, #1
 800127e:	d00a      	beq.n	8001296 <__swsetup_r+0x9a>
 8001280:	2200      	movs	r2, #0
 8001282:	60a2      	str	r2, [r4, #8]
 8001284:	6962      	ldr	r2, [r4, #20]
 8001286:	4252      	negs	r2, r2
 8001288:	61a2      	str	r2, [r4, #24]
 800128a:	6922      	ldr	r2, [r4, #16]
 800128c:	b942      	cbnz	r2, 80012a0 <__swsetup_r+0xa4>
 800128e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001292:	d1c5      	bne.n	8001220 <__swsetup_r+0x24>
 8001294:	bd38      	pop	{r3, r4, r5, pc}
 8001296:	0799      	lsls	r1, r3, #30
 8001298:	bf58      	it	pl
 800129a:	6962      	ldrpl	r2, [r4, #20]
 800129c:	60a2      	str	r2, [r4, #8]
 800129e:	e7f4      	b.n	800128a <__swsetup_r+0x8e>
 80012a0:	2000      	movs	r0, #0
 80012a2:	e7f7      	b.n	8001294 <__swsetup_r+0x98>
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <memset>:
 80012a8:	4402      	add	r2, r0
 80012aa:	4603      	mov	r3, r0
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d100      	bne.n	80012b2 <memset+0xa>
 80012b0:	4770      	bx	lr
 80012b2:	f803 1b01 	strb.w	r1, [r3], #1
 80012b6:	e7f9      	b.n	80012ac <memset+0x4>

080012b8 <_close_r>:
 80012b8:	b538      	push	{r3, r4, r5, lr}
 80012ba:	4d06      	ldr	r5, [pc, #24]	@ (80012d4 <_close_r+0x1c>)
 80012bc:	2300      	movs	r3, #0
 80012be:	4604      	mov	r4, r0
 80012c0:	4608      	mov	r0, r1
 80012c2:	602b      	str	r3, [r5, #0]
 80012c4:	f7ff fcb5 	bl	8000c32 <_close>
 80012c8:	1c43      	adds	r3, r0, #1
 80012ca:	d102      	bne.n	80012d2 <_close_r+0x1a>
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	b103      	cbz	r3, 80012d2 <_close_r+0x1a>
 80012d0:	6023      	str	r3, [r4, #0]
 80012d2:	bd38      	pop	{r3, r4, r5, pc}
 80012d4:	20000204 	.word	0x20000204

080012d8 <_lseek_r>:
 80012d8:	b538      	push	{r3, r4, r5, lr}
 80012da:	4d07      	ldr	r5, [pc, #28]	@ (80012f8 <_lseek_r+0x20>)
 80012dc:	4604      	mov	r4, r0
 80012de:	4608      	mov	r0, r1
 80012e0:	4611      	mov	r1, r2
 80012e2:	2200      	movs	r2, #0
 80012e4:	602a      	str	r2, [r5, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	f7ff fcca 	bl	8000c80 <_lseek>
 80012ec:	1c43      	adds	r3, r0, #1
 80012ee:	d102      	bne.n	80012f6 <_lseek_r+0x1e>
 80012f0:	682b      	ldr	r3, [r5, #0]
 80012f2:	b103      	cbz	r3, 80012f6 <_lseek_r+0x1e>
 80012f4:	6023      	str	r3, [r4, #0]
 80012f6:	bd38      	pop	{r3, r4, r5, pc}
 80012f8:	20000204 	.word	0x20000204

080012fc <_read_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4d07      	ldr	r5, [pc, #28]	@ (800131c <_read_r+0x20>)
 8001300:	4604      	mov	r4, r0
 8001302:	4608      	mov	r0, r1
 8001304:	4611      	mov	r1, r2
 8001306:	2200      	movs	r2, #0
 8001308:	602a      	str	r2, [r5, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	f7ff fc58 	bl	8000bc0 <_read>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	d102      	bne.n	800131a <_read_r+0x1e>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	b103      	cbz	r3, 800131a <_read_r+0x1e>
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	20000204 	.word	0x20000204

08001320 <_sbrk_r>:
 8001320:	b538      	push	{r3, r4, r5, lr}
 8001322:	4d06      	ldr	r5, [pc, #24]	@ (800133c <_sbrk_r+0x1c>)
 8001324:	2300      	movs	r3, #0
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	602b      	str	r3, [r5, #0]
 800132c:	f7ff fcb6 	bl	8000c9c <_sbrk>
 8001330:	1c43      	adds	r3, r0, #1
 8001332:	d102      	bne.n	800133a <_sbrk_r+0x1a>
 8001334:	682b      	ldr	r3, [r5, #0]
 8001336:	b103      	cbz	r3, 800133a <_sbrk_r+0x1a>
 8001338:	6023      	str	r3, [r4, #0]
 800133a:	bd38      	pop	{r3, r4, r5, pc}
 800133c:	20000204 	.word	0x20000204

08001340 <_write_r>:
 8001340:	b538      	push	{r3, r4, r5, lr}
 8001342:	4d07      	ldr	r5, [pc, #28]	@ (8001360 <_write_r+0x20>)
 8001344:	4604      	mov	r4, r0
 8001346:	4608      	mov	r0, r1
 8001348:	4611      	mov	r1, r2
 800134a:	2200      	movs	r2, #0
 800134c:	602a      	str	r2, [r5, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f7ff fc53 	bl	8000bfa <_write>
 8001354:	1c43      	adds	r3, r0, #1
 8001356:	d102      	bne.n	800135e <_write_r+0x1e>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	b103      	cbz	r3, 800135e <_write_r+0x1e>
 800135c:	6023      	str	r3, [r4, #0]
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	20000204 	.word	0x20000204

08001364 <__errno>:
 8001364:	4b01      	ldr	r3, [pc, #4]	@ (800136c <__errno+0x8>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000000c 	.word	0x2000000c

08001370 <__libc_init_array>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4d0d      	ldr	r5, [pc, #52]	@ (80013a8 <__libc_init_array+0x38>)
 8001374:	4c0d      	ldr	r4, [pc, #52]	@ (80013ac <__libc_init_array+0x3c>)
 8001376:	1b64      	subs	r4, r4, r5
 8001378:	10a4      	asrs	r4, r4, #2
 800137a:	2600      	movs	r6, #0
 800137c:	42a6      	cmp	r6, r4
 800137e:	d109      	bne.n	8001394 <__libc_init_array+0x24>
 8001380:	4d0b      	ldr	r5, [pc, #44]	@ (80013b0 <__libc_init_array+0x40>)
 8001382:	4c0c      	ldr	r4, [pc, #48]	@ (80013b4 <__libc_init_array+0x44>)
 8001384:	f000 f996 	bl	80016b4 <_init>
 8001388:	1b64      	subs	r4, r4, r5
 800138a:	10a4      	asrs	r4, r4, #2
 800138c:	2600      	movs	r6, #0
 800138e:	42a6      	cmp	r6, r4
 8001390:	d105      	bne.n	800139e <__libc_init_array+0x2e>
 8001392:	bd70      	pop	{r4, r5, r6, pc}
 8001394:	f855 3b04 	ldr.w	r3, [r5], #4
 8001398:	4798      	blx	r3
 800139a:	3601      	adds	r6, #1
 800139c:	e7ee      	b.n	800137c <__libc_init_array+0xc>
 800139e:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a2:	4798      	blx	r3
 80013a4:	3601      	adds	r6, #1
 80013a6:	e7f2      	b.n	800138e <__libc_init_array+0x1e>
 80013a8:	080016f4 	.word	0x080016f4
 80013ac:	080016f4 	.word	0x080016f4
 80013b0:	080016f4 	.word	0x080016f4
 80013b4:	080016f8 	.word	0x080016f8

080013b8 <__retarget_lock_init_recursive>:
 80013b8:	4770      	bx	lr

080013ba <__retarget_lock_acquire_recursive>:
 80013ba:	4770      	bx	lr

080013bc <__retarget_lock_release_recursive>:
 80013bc:	4770      	bx	lr
	...

080013c0 <_free_r>:
 80013c0:	b538      	push	{r3, r4, r5, lr}
 80013c2:	4605      	mov	r5, r0
 80013c4:	2900      	cmp	r1, #0
 80013c6:	d041      	beq.n	800144c <_free_r+0x8c>
 80013c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013cc:	1f0c      	subs	r4, r1, #4
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	18e4      	addlt	r4, r4, r3
 80013d4:	f7ff fd64 	bl	8000ea0 <__malloc_lock>
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <_free_r+0x90>)
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	b933      	cbnz	r3, 80013ec <_free_r+0x2c>
 80013de:	6063      	str	r3, [r4, #4]
 80013e0:	6014      	str	r4, [r2, #0]
 80013e2:	4628      	mov	r0, r5
 80013e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013e8:	f7ff bd60 	b.w	8000eac <__malloc_unlock>
 80013ec:	42a3      	cmp	r3, r4
 80013ee:	d908      	bls.n	8001402 <_free_r+0x42>
 80013f0:	6820      	ldr	r0, [r4, #0]
 80013f2:	1821      	adds	r1, r4, r0
 80013f4:	428b      	cmp	r3, r1
 80013f6:	bf01      	itttt	eq
 80013f8:	6819      	ldreq	r1, [r3, #0]
 80013fa:	685b      	ldreq	r3, [r3, #4]
 80013fc:	1809      	addeq	r1, r1, r0
 80013fe:	6021      	streq	r1, [r4, #0]
 8001400:	e7ed      	b.n	80013de <_free_r+0x1e>
 8001402:	461a      	mov	r2, r3
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	b10b      	cbz	r3, 800140c <_free_r+0x4c>
 8001408:	42a3      	cmp	r3, r4
 800140a:	d9fa      	bls.n	8001402 <_free_r+0x42>
 800140c:	6811      	ldr	r1, [r2, #0]
 800140e:	1850      	adds	r0, r2, r1
 8001410:	42a0      	cmp	r0, r4
 8001412:	d10b      	bne.n	800142c <_free_r+0x6c>
 8001414:	6820      	ldr	r0, [r4, #0]
 8001416:	4401      	add	r1, r0
 8001418:	1850      	adds	r0, r2, r1
 800141a:	4283      	cmp	r3, r0
 800141c:	6011      	str	r1, [r2, #0]
 800141e:	d1e0      	bne.n	80013e2 <_free_r+0x22>
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	6053      	str	r3, [r2, #4]
 8001426:	4408      	add	r0, r1
 8001428:	6010      	str	r0, [r2, #0]
 800142a:	e7da      	b.n	80013e2 <_free_r+0x22>
 800142c:	d902      	bls.n	8001434 <_free_r+0x74>
 800142e:	230c      	movs	r3, #12
 8001430:	602b      	str	r3, [r5, #0]
 8001432:	e7d6      	b.n	80013e2 <_free_r+0x22>
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	1821      	adds	r1, r4, r0
 8001438:	428b      	cmp	r3, r1
 800143a:	bf04      	itt	eq
 800143c:	6819      	ldreq	r1, [r3, #0]
 800143e:	685b      	ldreq	r3, [r3, #4]
 8001440:	6063      	str	r3, [r4, #4]
 8001442:	bf04      	itt	eq
 8001444:	1809      	addeq	r1, r1, r0
 8001446:	6021      	streq	r1, [r4, #0]
 8001448:	6054      	str	r4, [r2, #4]
 800144a:	e7ca      	b.n	80013e2 <_free_r+0x22>
 800144c:	bd38      	pop	{r3, r4, r5, pc}
 800144e:	bf00      	nop
 8001450:	200000c4 	.word	0x200000c4

08001454 <__sflush_r>:
 8001454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145c:	0716      	lsls	r6, r2, #28
 800145e:	4605      	mov	r5, r0
 8001460:	460c      	mov	r4, r1
 8001462:	d454      	bmi.n	800150e <__sflush_r+0xba>
 8001464:	684b      	ldr	r3, [r1, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dc02      	bgt.n	8001470 <__sflush_r+0x1c>
 800146a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd48      	ble.n	8001502 <__sflush_r+0xae>
 8001470:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001472:	2e00      	cmp	r6, #0
 8001474:	d045      	beq.n	8001502 <__sflush_r+0xae>
 8001476:	2300      	movs	r3, #0
 8001478:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800147c:	682f      	ldr	r7, [r5, #0]
 800147e:	6a21      	ldr	r1, [r4, #32]
 8001480:	602b      	str	r3, [r5, #0]
 8001482:	d030      	beq.n	80014e6 <__sflush_r+0x92>
 8001484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001486:	89a3      	ldrh	r3, [r4, #12]
 8001488:	0759      	lsls	r1, r3, #29
 800148a:	d505      	bpl.n	8001498 <__sflush_r+0x44>
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	1ad2      	subs	r2, r2, r3
 8001490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001492:	b10b      	cbz	r3, 8001498 <__sflush_r+0x44>
 8001494:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001496:	1ad2      	subs	r2, r2, r3
 8001498:	2300      	movs	r3, #0
 800149a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800149c:	6a21      	ldr	r1, [r4, #32]
 800149e:	4628      	mov	r0, r5
 80014a0:	47b0      	blx	r6
 80014a2:	1c43      	adds	r3, r0, #1
 80014a4:	89a3      	ldrh	r3, [r4, #12]
 80014a6:	d106      	bne.n	80014b6 <__sflush_r+0x62>
 80014a8:	6829      	ldr	r1, [r5, #0]
 80014aa:	291d      	cmp	r1, #29
 80014ac:	d82b      	bhi.n	8001506 <__sflush_r+0xb2>
 80014ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001558 <__sflush_r+0x104>)
 80014b0:	40ca      	lsrs	r2, r1
 80014b2:	07d6      	lsls	r6, r2, #31
 80014b4:	d527      	bpl.n	8001506 <__sflush_r+0xb2>
 80014b6:	2200      	movs	r2, #0
 80014b8:	6062      	str	r2, [r4, #4]
 80014ba:	04d9      	lsls	r1, r3, #19
 80014bc:	6922      	ldr	r2, [r4, #16]
 80014be:	6022      	str	r2, [r4, #0]
 80014c0:	d504      	bpl.n	80014cc <__sflush_r+0x78>
 80014c2:	1c42      	adds	r2, r0, #1
 80014c4:	d101      	bne.n	80014ca <__sflush_r+0x76>
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	b903      	cbnz	r3, 80014cc <__sflush_r+0x78>
 80014ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80014cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80014ce:	602f      	str	r7, [r5, #0]
 80014d0:	b1b9      	cbz	r1, 8001502 <__sflush_r+0xae>
 80014d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014d6:	4299      	cmp	r1, r3
 80014d8:	d002      	beq.n	80014e0 <__sflush_r+0x8c>
 80014da:	4628      	mov	r0, r5
 80014dc:	f7ff ff70 	bl	80013c0 <_free_r>
 80014e0:	2300      	movs	r3, #0
 80014e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80014e4:	e00d      	b.n	8001502 <__sflush_r+0xae>
 80014e6:	2301      	movs	r3, #1
 80014e8:	4628      	mov	r0, r5
 80014ea:	47b0      	blx	r6
 80014ec:	4602      	mov	r2, r0
 80014ee:	1c50      	adds	r0, r2, #1
 80014f0:	d1c9      	bne.n	8001486 <__sflush_r+0x32>
 80014f2:	682b      	ldr	r3, [r5, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0c6      	beq.n	8001486 <__sflush_r+0x32>
 80014f8:	2b1d      	cmp	r3, #29
 80014fa:	d001      	beq.n	8001500 <__sflush_r+0xac>
 80014fc:	2b16      	cmp	r3, #22
 80014fe:	d11e      	bne.n	800153e <__sflush_r+0xea>
 8001500:	602f      	str	r7, [r5, #0]
 8001502:	2000      	movs	r0, #0
 8001504:	e022      	b.n	800154c <__sflush_r+0xf8>
 8001506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800150a:	b21b      	sxth	r3, r3
 800150c:	e01b      	b.n	8001546 <__sflush_r+0xf2>
 800150e:	690f      	ldr	r7, [r1, #16]
 8001510:	2f00      	cmp	r7, #0
 8001512:	d0f6      	beq.n	8001502 <__sflush_r+0xae>
 8001514:	0793      	lsls	r3, r2, #30
 8001516:	680e      	ldr	r6, [r1, #0]
 8001518:	bf08      	it	eq
 800151a:	694b      	ldreq	r3, [r1, #20]
 800151c:	600f      	str	r7, [r1, #0]
 800151e:	bf18      	it	ne
 8001520:	2300      	movne	r3, #0
 8001522:	eba6 0807 	sub.w	r8, r6, r7
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	f1b8 0f00 	cmp.w	r8, #0
 800152c:	dde9      	ble.n	8001502 <__sflush_r+0xae>
 800152e:	6a21      	ldr	r1, [r4, #32]
 8001530:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001532:	4643      	mov	r3, r8
 8001534:	463a      	mov	r2, r7
 8001536:	4628      	mov	r0, r5
 8001538:	47b0      	blx	r6
 800153a:	2800      	cmp	r0, #0
 800153c:	dc08      	bgt.n	8001550 <__sflush_r+0xfc>
 800153e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001546:	81a3      	strh	r3, [r4, #12]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001550:	4407      	add	r7, r0
 8001552:	eba8 0800 	sub.w	r8, r8, r0
 8001556:	e7e7      	b.n	8001528 <__sflush_r+0xd4>
 8001558:	20400001 	.word	0x20400001

0800155c <_fflush_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	690b      	ldr	r3, [r1, #16]
 8001560:	4605      	mov	r5, r0
 8001562:	460c      	mov	r4, r1
 8001564:	b913      	cbnz	r3, 800156c <_fflush_r+0x10>
 8001566:	2500      	movs	r5, #0
 8001568:	4628      	mov	r0, r5
 800156a:	bd38      	pop	{r3, r4, r5, pc}
 800156c:	b118      	cbz	r0, 8001576 <_fflush_r+0x1a>
 800156e:	6a03      	ldr	r3, [r0, #32]
 8001570:	b90b      	cbnz	r3, 8001576 <_fflush_r+0x1a>
 8001572:	f7ff fd2d 	bl	8000fd0 <__sinit>
 8001576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f3      	beq.n	8001566 <_fflush_r+0xa>
 800157e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001580:	07d0      	lsls	r0, r2, #31
 8001582:	d404      	bmi.n	800158e <_fflush_r+0x32>
 8001584:	0599      	lsls	r1, r3, #22
 8001586:	d402      	bmi.n	800158e <_fflush_r+0x32>
 8001588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800158a:	f7ff ff16 	bl	80013ba <__retarget_lock_acquire_recursive>
 800158e:	4628      	mov	r0, r5
 8001590:	4621      	mov	r1, r4
 8001592:	f7ff ff5f 	bl	8001454 <__sflush_r>
 8001596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001598:	07da      	lsls	r2, r3, #31
 800159a:	4605      	mov	r5, r0
 800159c:	d4e4      	bmi.n	8001568 <_fflush_r+0xc>
 800159e:	89a3      	ldrh	r3, [r4, #12]
 80015a0:	059b      	lsls	r3, r3, #22
 80015a2:	d4e1      	bmi.n	8001568 <_fflush_r+0xc>
 80015a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015a6:	f7ff ff09 	bl	80013bc <__retarget_lock_release_recursive>
 80015aa:	e7dd      	b.n	8001568 <_fflush_r+0xc>

080015ac <__swhatbuf_r>:
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	460c      	mov	r4, r1
 80015b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015b4:	2900      	cmp	r1, #0
 80015b6:	b096      	sub	sp, #88	@ 0x58
 80015b8:	4615      	mov	r5, r2
 80015ba:	461e      	mov	r6, r3
 80015bc:	da0d      	bge.n	80015da <__swhatbuf_r+0x2e>
 80015be:	89a3      	ldrh	r3, [r4, #12]
 80015c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	bf14      	ite	ne
 80015ca:	2340      	movne	r3, #64	@ 0x40
 80015cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015d0:	2000      	movs	r0, #0
 80015d2:	6031      	str	r1, [r6, #0]
 80015d4:	602b      	str	r3, [r5, #0]
 80015d6:	b016      	add	sp, #88	@ 0x58
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
 80015da:	466a      	mov	r2, sp
 80015dc:	f000 f848 	bl	8001670 <_fstat_r>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	dbec      	blt.n	80015be <__swhatbuf_r+0x12>
 80015e4:	9901      	ldr	r1, [sp, #4]
 80015e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015ee:	4259      	negs	r1, r3
 80015f0:	4159      	adcs	r1, r3
 80015f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f6:	e7eb      	b.n	80015d0 <__swhatbuf_r+0x24>

080015f8 <__smakebuf_r>:
 80015f8:	898b      	ldrh	r3, [r1, #12]
 80015fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015fc:	079d      	lsls	r5, r3, #30
 80015fe:	4606      	mov	r6, r0
 8001600:	460c      	mov	r4, r1
 8001602:	d507      	bpl.n	8001614 <__smakebuf_r+0x1c>
 8001604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	6123      	str	r3, [r4, #16]
 800160c:	2301      	movs	r3, #1
 800160e:	6163      	str	r3, [r4, #20]
 8001610:	b003      	add	sp, #12
 8001612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001614:	ab01      	add	r3, sp, #4
 8001616:	466a      	mov	r2, sp
 8001618:	f7ff ffc8 	bl	80015ac <__swhatbuf_r>
 800161c:	9f00      	ldr	r7, [sp, #0]
 800161e:	4605      	mov	r5, r0
 8001620:	4639      	mov	r1, r7
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff fbbc 	bl	8000da0 <_malloc_r>
 8001628:	b948      	cbnz	r0, 800163e <__smakebuf_r+0x46>
 800162a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800162e:	059a      	lsls	r2, r3, #22
 8001630:	d4ee      	bmi.n	8001610 <__smakebuf_r+0x18>
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	81a3      	strh	r3, [r4, #12]
 800163c:	e7e2      	b.n	8001604 <__smakebuf_r+0xc>
 800163e:	89a3      	ldrh	r3, [r4, #12]
 8001640:	6020      	str	r0, [r4, #0]
 8001642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001646:	81a3      	strh	r3, [r4, #12]
 8001648:	9b01      	ldr	r3, [sp, #4]
 800164a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800164e:	b15b      	cbz	r3, 8001668 <__smakebuf_r+0x70>
 8001650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001654:	4630      	mov	r0, r6
 8001656:	f000 f81d 	bl	8001694 <_isatty_r>
 800165a:	b128      	cbz	r0, 8001668 <__smakebuf_r+0x70>
 800165c:	89a3      	ldrh	r3, [r4, #12]
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	81a3      	strh	r3, [r4, #12]
 8001668:	89a3      	ldrh	r3, [r4, #12]
 800166a:	431d      	orrs	r5, r3
 800166c:	81a5      	strh	r5, [r4, #12]
 800166e:	e7cf      	b.n	8001610 <__smakebuf_r+0x18>

08001670 <_fstat_r>:
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	4d07      	ldr	r5, [pc, #28]	@ (8001690 <_fstat_r+0x20>)
 8001674:	2300      	movs	r3, #0
 8001676:	4604      	mov	r4, r0
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	602b      	str	r3, [r5, #0]
 800167e:	f7ff fae4 	bl	8000c4a <_fstat>
 8001682:	1c43      	adds	r3, r0, #1
 8001684:	d102      	bne.n	800168c <_fstat_r+0x1c>
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	b103      	cbz	r3, 800168c <_fstat_r+0x1c>
 800168a:	6023      	str	r3, [r4, #0]
 800168c:	bd38      	pop	{r3, r4, r5, pc}
 800168e:	bf00      	nop
 8001690:	20000204 	.word	0x20000204

08001694 <_isatty_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4d06      	ldr	r5, [pc, #24]	@ (80016b0 <_isatty_r+0x1c>)
 8001698:	2300      	movs	r3, #0
 800169a:	4604      	mov	r4, r0
 800169c:	4608      	mov	r0, r1
 800169e:	602b      	str	r3, [r5, #0]
 80016a0:	f7ff fae3 	bl	8000c6a <_isatty>
 80016a4:	1c43      	adds	r3, r0, #1
 80016a6:	d102      	bne.n	80016ae <_isatty_r+0x1a>
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	b103      	cbz	r3, 80016ae <_isatty_r+0x1a>
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	bd38      	pop	{r3, r4, r5, pc}
 80016b0:	20000204 	.word	0x20000204

080016b4 <_init>:
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	bf00      	nop
 80016b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ba:	bc08      	pop	{r3}
 80016bc:	469e      	mov	lr, r3
 80016be:	4770      	bx	lr

080016c0 <_fini>:
 80016c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c2:	bf00      	nop
 80016c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c6:	bc08      	pop	{r3}
 80016c8:	469e      	mov	lr, r3
 80016ca:	4770      	bx	lr
