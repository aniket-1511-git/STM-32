
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002284  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002414  08002414  00003414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c4  080024c4  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080024c4  080024c4  000034c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024cc  080024cc  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024cc  080024cc  000034cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024d0  080024d0  000034d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080024d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          0000023c  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001815  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000061e  00000000  00000000  000058ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c0  00000000  00000000  00005ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013f  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017d5  00000000  00000000  000061cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000996  00000000  00000000  000079a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000833a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011c4  00000000  00000000  00008380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00009544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023fc 	.word	0x080023fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080023fc 	.word	0x080023fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <SPI_PeriClockControl>:
/*
 *  Peripheral Clock configuration
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d120      	bne.n	80002d4 <SPI_PeriClockControl+0x54>
			{
				if(pSPIx == SPI1)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a22      	ldr	r2, [pc, #136]	@ (8000320 <SPI_PeriClockControl+0xa0>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <SPI_PeriClockControl+0x28>
				{
					SPI1_PCLK_EN();
 800029a:	4b22      	ldr	r3, [pc, #136]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 800029c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800029e:	4a21      	ldr	r2, [pc, #132]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002a4:	6613      	str	r3, [r2, #96]	@ 0x60
							SPI3_PCLK_DI();
						}

			}

}
 80002a6:	e035      	b.n	8000314 <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI2)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000328 <SPI_PeriClockControl+0xa8>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <SPI_PeriClockControl+0x3e>
					SPI2_PCLK_EN();
 80002b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002ba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002bc:	e02a      	b.n	8000314 <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI3)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a1a      	ldr	r2, [pc, #104]	@ (800032c <SPI_PeriClockControl+0xac>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d126      	bne.n	8000314 <SPI_PeriClockControl+0x94>
					SPI3_PCLK_EN();
 80002c6:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002ca:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002d0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002d2:	e01f      	b.n	8000314 <SPI_PeriClockControl+0x94>
				if(pSPIx == SPI1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <SPI_PeriClockControl+0xa0>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002e0:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002e6:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80002e8:	e014      	b.n	8000314 <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI2)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <SPI_PeriClockControl+0xa8>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002fc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002fe:	e009      	b.n	8000314 <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI3)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <SPI_PeriClockControl+0xac>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d105      	bne.n	8000314 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 800030a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800030c:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 800030e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000312:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40013000 	.word	0x40013000
 8000324:	40021000 	.word	0x40021000
 8000328:	40003800 	.word	0x40003800
 800032c:	40003c00 	.word	0x40003c00

08000330 <SPI_Init>:
/*
 *  Init and De-init
 */

void SPI_Init(SPI_Handle_t *pSPIHANDLE)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	// Configure the SPI_CR1 Register
	uint32_t tempreg=0;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]

			SPI_PeriClockControl(pSPIHANDLE->pSPIx, ENABLE);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff9c 	bl	8000280 <SPI_PeriClockControl>

			// Configure the device mode
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DeviceMode<<2;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	4313      	orrs	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]

			//Configure the Bus config
			if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FD)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d104      	bne.n	8000366 <SPI_Init+0x36>
			{
				//  BIDI mode should be cleared
				tempreg &=~(1<<15);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e014      	b.n	8000390 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HD)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	795b      	ldrb	r3, [r3, #5]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d104      	bne.n	8000378 <SPI_Init+0x48>
			{
				//  BIDI mode should be set
				tempreg |=(1<<15);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e00b      	b.n	8000390 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	2b03      	cmp	r3, #3
 800037e:	d107      	bne.n	8000390 <SPI_Init+0x60>
			{
				// BIDI mode should be cleared
				tempreg &=~(1<<15);
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000386:	60fb      	str	r3, [r7, #12]

				// RXONLY bit must be set
				tempreg |=(1<<10);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800038e:	60fb      	str	r3, [r7, #12]
			}

			// Configure the SPI Serial Clock Speed(baud rate)
			tempreg |=pSPIHANDLE->SPIConfig.SPI_SclkSpeed<<3;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	799b      	ldrb	r3, [r3, #6]
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	4313      	orrs	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]

			// Configure the CPOL
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPOL<<1;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7a1b      	ldrb	r3, [r3, #8]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]

			// Configure the CPHA
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPHA<<0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7a5b      	ldrb	r3, [r3, #9]
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR1 |=tempreg;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	6819      	ldr	r1, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]

			tempreg=0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]

			//// Configure the DFF
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DFF<<8;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	79db      	ldrb	r3, [r3, #7]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR2 |=tempreg;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6859      	ldr	r1, [r3, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	605a      	str	r2, [r3, #4]


}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <SPI_PeripheralControl>:
	}
}

// Enable or disable SPI peripheral
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d106      	bne.n	800040c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << 6);  // Set SPE bit
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << 6);  // Clear SPE bit
	}
}
 800040a:	e005      	b.n	8000418 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << 6);  // Clear SPE bit
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	601a      	str	r2, [r3, #0]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <SPI_SSOEConfig>:
	}
}

// Configure SSOE (Slave Select Output Enable)
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	460b      	mov	r3, r1
 800042e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000430:	78fb      	ldrb	r3, [r7, #3]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d106      	bne.n	8000444 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << 2);  // Set SSOE bit
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f043 0204 	orr.w	r2, r3, #4
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << 2);  // Clear SSOE bit
	}
}
 8000442:	e005      	b.n	8000450 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << 2);  // Clear SSOE bit
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f023 0204 	bic.w	r2, r3, #4
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	605a      	str	r2, [r3, #4]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <SPI_SendDataIT>:

// Interrupt-based (non-blocking) send data function
uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800045c:	b480      	push	{r7}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
    uint8_t state = pSPIHandle->TxState;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	7f1b      	ldrb	r3, [r3, #28]
 800046c:	75fb      	strb	r3, [r7, #23]
    if (state != SPI_BUSY_IN_TX)
 800046e:	7dfb      	ldrb	r3, [r7, #23]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d010      	beq.n	8000496 <SPI_SendDataIT+0x3a>
    {
        pSPIHandle->pTxBuffer = pTxBuffer;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	60da      	str	r2, [r3, #12]
        pSPIHandle->TxLen     = Len;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	615a      	str	r2, [r3, #20]
        pSPIHandle->TxState   = SPI_BUSY_IN_TX;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2202      	movs	r2, #2
 8000484:	771a      	strb	r2, [r3, #28]
        pSPIHandle->pSPIx->CR2 |= (1U << SPI_CR2_TXEIE_Pos);
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000494:	605a      	str	r2, [r3, #4]
       /* if (pSPIHandle->pSPIx->SR & (1U << SPI_SR_TXE_Pos))
        {
            spi_txe_interrupt_handle(pSPIHandle);
        }*/
    }
    return state;
 8000496:	7dfb      	ldrb	r3, [r7, #23]
}
 8000498:	4618      	mov	r0, r3
 800049a:	371c      	adds	r7, #28
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <SPI_ReceiveDataIT>:

// Interrupt-based (non-blocking) receive data function
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	7f5b      	ldrb	r3, [r3, #29]
 80004b4:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)  // Check if SPI is free
 80004b6:	7dfb      	ldrb	r3, [r7, #23]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d010      	beq.n	80004de <SPI_ReceiveDataIT+0x3a>
	{
		// Save Rx buffer info in handle
		pSPIHandle->pRxBuffer = pRxBuffer;
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	619a      	str	r2, [r3, #24]
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	2201      	movs	r2, #1
 80004cc:	775a      	strb	r2, [r3, #29]

		// Enable RXNEIE (RX buffer not empty interrupt)
		pSPIHandle->pSPIx->CR2 |= (1 << 6);
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	685a      	ldr	r2, [r3, #4]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80004dc:	605a      	str	r2, [r3, #4]
	}
	return state; // Return previous state
 80004de:	7dfb      	ldrb	r3, [r7, #23]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	371c      	adds	r7, #28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <SPI_IRQInterruptConfig>:
 *  IRQ Configuration and ISR Handling
 */

// Enable or disable SPI interrupt in NVIC
void SPI_IRQInterruptConfig(uint8_t IRQNumber,  uint8_t EnorDi)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	460a      	mov	r2, r1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d133      	bne.n	800056a <SPI_IRQInterruptConfig+0x7e>
	{
		// NVIC ISER0 for IRQ 0-31
		if(IRQNumber <= 31)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b1f      	cmp	r3, #31
 8000506:	d80a      	bhi.n	800051e <SPI_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000508:	4b35      	ldr	r3, [pc, #212]	@ (80005e0 <SPI_IRQInterruptConfig+0xf4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	2101      	movs	r1, #1
 8000510:	fa01 f202 	lsl.w	r2, r1, r2
 8000514:	4611      	mov	r1, r2
 8000516:	4a32      	ldr	r2, [pc, #200]	@ (80005e0 <SPI_IRQInterruptConfig+0xf4>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >= 6 && IRQNumber < 96 )
		{
			*NVIC_ICER3 |= (1 << (IRQNumber % 64));
		}
	}
}
 800051c:	e059      	b.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b1f      	cmp	r3, #31
 8000522:	d90f      	bls.n	8000544 <SPI_IRQInterruptConfig+0x58>
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b3f      	cmp	r3, #63	@ 0x3f
 8000528:	d80c      	bhi.n	8000544 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800052a:	4b2e      	ldr	r3, [pc, #184]	@ (80005e4 <SPI_IRQInterruptConfig+0xf8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	79fa      	ldrb	r2, [r7, #7]
 8000530:	f002 021f 	and.w	r2, r2, #31
 8000534:	2101      	movs	r1, #1
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <SPI_IRQInterruptConfig+0xf8>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	e046      	b.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b3f      	cmp	r3, #63	@ 0x3f
 8000548:	d943      	bls.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b5f      	cmp	r3, #95	@ 0x5f
 800054e:	d840      	bhi.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= (1 << (IRQNumber % 64));
 8000550:	4b25      	ldr	r3, [pc, #148]	@ (80005e8 <SPI_IRQInterruptConfig+0xfc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	79fa      	ldrb	r2, [r7, #7]
 8000556:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	4611      	mov	r1, r2
 8000562:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <SPI_IRQInterruptConfig+0xfc>)
 8000564:	430b      	orrs	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	e033      	b.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b1f      	cmp	r3, #31
 800056e:	d80a      	bhi.n	8000586 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000570:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <SPI_IRQInterruptConfig+0x100>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	79fa      	ldrb	r2, [r7, #7]
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a1b      	ldr	r2, [pc, #108]	@ (80005ec <SPI_IRQInterruptConfig+0x100>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
}
 8000584:	e025      	b.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber > 31 && IRQNumber < 64 )
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b1f      	cmp	r3, #31
 800058a:	d90f      	bls.n	80005ac <SPI_IRQInterruptConfig+0xc0>
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000590:	d80c      	bhi.n	80005ac <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000592:	4b17      	ldr	r3, [pc, #92]	@ (80005f0 <SPI_IRQInterruptConfig+0x104>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	79fa      	ldrb	r2, [r7, #7]
 8000598:	f002 021f 	and.w	r2, r2, #31
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <SPI_IRQInterruptConfig+0x104>)
 80005a6:	430b      	orrs	r3, r1
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	e012      	b.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d90f      	bls.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b5f      	cmp	r3, #95	@ 0x5f
 80005b6:	d80c      	bhi.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= (1 << (IRQNumber % 64));
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <SPI_IRQInterruptConfig+0x108>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	79fa      	ldrb	r2, [r7, #7]
 80005be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <SPI_IRQInterruptConfig+0x108>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	e7ff      	b.n	80005d2 <SPI_IRQInterruptConfig+0xe6>
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e100 	.word	0xe000e100
 80005e4:	e000e104 	.word	0xe000e104
 80005e8:	e000e10c 	.word	0xe000e10c
 80005ec:	e000e180 	.word	0xe000e180
 80005f0:	e000e184 	.word	0xe000e184
 80005f4:	e000e18c 	.word	0xe000e18c

080005f8 <SPI_IRQHandling>:
	*(NVIC_PR_BASE_ADDR + iprx) |=  (IRQPriority << shift_amount);
}

// Main SPI IRQ handling (checks different interrupt sources)
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    uint8_t temp1, temp2;
    temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE_Pos));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 0302 	and.w	r3, r3, #2
 800060c:	73fb      	strb	r3, [r7, #15]
    temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE_Pos));
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800061a:	73bb      	strb	r3, [r7, #14]
    if (temp1 && temp2)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <SPI_IRQHandling+0x36>
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <SPI_IRQHandling+0x36>
    {
        spi_txe_interrupt_handle(pSPIHandle);
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f000 f868 	bl	80006fe <spi_txe_interrupt_handle>
    }
    temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE_Pos));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
    temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE_Pos));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000648:	73bb      	strb	r3, [r7, #14]
    if (temp1 && temp2)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d005      	beq.n	800065c <SPI_IRQHandling+0x64>
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <SPI_IRQHandling+0x64>
    {
        spi_rxne_interrupt_handle(pSPIHandle);
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f874 	bl	8000744 <spi_rxne_interrupt_handle>
    }
    temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR_Pos));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000668:	73fb      	strb	r3, [r7, #15]
    temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE_Pos));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0320 	and.w	r3, r3, #32
 8000676:	73bb      	strb	r3, [r7, #14]
    if (temp1 && temp2)
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <SPI_IRQHandling+0x92>
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <SPI_IRQHandling+0x92>
    {
        spi_ovr_err_interrupt_handle(pSPIHandle);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f881 	bl	800078c <spi_ovr_err_interrupt_handle>
    }
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <SPI_CloseReception>:
void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~(1 << 6);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80006a8:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	775a      	strb	r2, [r3, #29]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <SPI_CloseTransmisson>:

void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    pSPIHandle->pSPIx->CR2 &= ~(1U << SPI_CR2_TXEIE_Pos);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	685a      	ldr	r2, [r3, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80006de:	605a      	str	r2, [r3, #4]
    pSPIHandle->pTxBuffer = NULL;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    pSPIHandle->TxLen = 0;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
    pSPIHandle->TxState = SPI_READY;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	771a      	strb	r2, [r3, #28]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <spi_txe_interrupt_handle>:
	// User application should implement this
}


static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen--;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	615a      	str	r2, [r3, #20]
	pSPIHandle->pTxBuffer++;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60da      	str	r2, [r3, #12]

	if(!pSPIHandle ->TxLen)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d106      	bne.n	800073c <spi_txe_interrupt_handle+0x3e>
	{
		SPI_CloseTransmisson(pSPIHandle);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ffca 	bl	80006c8 <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 8000734:	2101      	movs	r1, #1
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 fb48 	bl	8000dcc <SPI_ApplicationEventCallback>
	}
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <spi_rxne_interrupt_handle>:



// Handle RXNE interrupt (read received byte)
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	*(pSPIHandle->pRxBuffer) = (uint8_t)pSPIHandle->pSPIx->DR;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	68da      	ldr	r2, [r3, #12]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
	pSPIHandle->RxLen--;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	619a      	str	r2, [r3, #24]
	pSPIHandle->pRxBuffer++;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	691b      	ldr	r3, [r3, #16]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	611a      	str	r2, [r3, #16]

	if(!pSPIHandle->RxLen) // Reception finished
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d106      	bne.n	8000784 <spi_rxne_interrupt_handle+0x40>
	{
		SPI_CloseReception(pSPIHandle);
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff ff8b 	bl	8000692 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 800077c:	2102      	movs	r1, #2
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 fb24 	bl	8000dcc <SPI_ApplicationEventCallback>
	}
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <spi_ovr_err_interrupt_handle>:

// Handle Overrun Error interrupt
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7f1b      	ldrb	r3, [r3, #28]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d007      	beq.n	80007ac <spi_ovr_err_interrupt_handle+0x20>
	{
		// Clear OVR flag by reading DR and SR
		temp = pSPIHandle->pSPIx->DR;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
 80007ac:	2103      	movs	r1, #3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 fb0c 	bl	8000dcc <SPI_ApplicationEventCallback>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d157      	bne.n	800087e <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007d4:	d106      	bne.n	80007e4 <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 80007d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a59      	ldr	r2, [pc, #356]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 80007e2:	e0a6      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a57      	ldr	r2, [pc, #348]	@ (8000944 <GPIO_PeriClockControl+0x188>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 80007ec:	4b54      	ldr	r3, [pc, #336]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a53      	ldr	r2, [pc, #332]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007f8:	e09b      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a52      	ldr	r2, [pc, #328]	@ (8000948 <GPIO_PeriClockControl+0x18c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 8000802:	4b4f      	ldr	r3, [pc, #316]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a4e      	ldr	r2, [pc, #312]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800080e:	e090      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a4e      	ldr	r2, [pc, #312]	@ (800094c <GPIO_PeriClockControl+0x190>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d106      	bne.n	8000826 <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 8000818:	4b49      	ldr	r3, [pc, #292]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 800081a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081c:	4a48      	ldr	r2, [pc, #288]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000824:	e085      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a49      	ldr	r2, [pc, #292]	@ (8000950 <GPIO_PeriClockControl+0x194>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d106      	bne.n	800083c <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 800082e:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a43      	ldr	r2, [pc, #268]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800083a:	e07a      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4a45      	ldr	r2, [pc, #276]	@ (8000954 <GPIO_PeriClockControl+0x198>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d106      	bne.n	8000852 <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 8000844:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000848:	4a3d      	ldr	r2, [pc, #244]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 800084a:	f043 0320 	orr.w	r3, r3, #32
 800084e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000850:	e06f      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a40      	ldr	r2, [pc, #256]	@ (8000958 <GPIO_PeriClockControl+0x19c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d106      	bne.n	8000868 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 800085a:	4b39      	ldr	r3, [pc, #228]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	4a38      	ldr	r2, [pc, #224]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000864:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000866:	e064      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a3c      	ldr	r2, [pc, #240]	@ (800095c <GPIO_PeriClockControl+0x1a0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d160      	bne.n	8000932 <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 8000870:	4b33      	ldr	r3, [pc, #204]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000874:	4a32      	ldr	r2, [pc, #200]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800087c:	e059      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d156      	bne.n	8000932 <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800088a:	d106      	bne.n	800089a <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 800088c:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 800088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000890:	4a2b      	ldr	r2, [pc, #172]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000892:	f023 0301 	bic.w	r3, r3, #1
 8000896:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000898:	e04b      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a29      	ldr	r2, [pc, #164]	@ (8000944 <GPIO_PeriClockControl+0x188>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d106      	bne.n	80008b0 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a26      	ldr	r2, [pc, #152]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008a8:	f023 0302 	bic.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80008ae:	e040      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a25      	ldr	r2, [pc, #148]	@ (8000948 <GPIO_PeriClockControl+0x18c>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d106      	bne.n	80008c6 <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a20      	ldr	r2, [pc, #128]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008be:	f023 0304 	bic.w	r3, r3, #4
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80008c4:	e035      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a20      	ldr	r2, [pc, #128]	@ (800094c <GPIO_PeriClockControl+0x190>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d106      	bne.n	80008dc <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008d4:	f023 0308 	bic.w	r3, r3, #8
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80008da:	e02a      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a1c      	ldr	r2, [pc, #112]	@ (8000950 <GPIO_PeriClockControl+0x194>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d106      	bne.n	80008f2 <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	4a15      	ldr	r2, [pc, #84]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008ea:	f023 0310 	bic.w	r3, r3, #16
 80008ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80008f0:	e01f      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a17      	ldr	r2, [pc, #92]	@ (8000954 <GPIO_PeriClockControl+0x198>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d106      	bne.n	8000908 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000900:	f023 0320 	bic.w	r3, r3, #32
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000906:	e014      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4a13      	ldr	r2, [pc, #76]	@ (8000958 <GPIO_PeriClockControl+0x19c>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d106      	bne.n	800091e <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000910:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800091a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800091c:	e009      	b.n	8000932 <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <GPIO_PeriClockControl+0x1a0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d105      	bne.n	8000932 <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <GPIO_PeriClockControl+0x184>)
 800092c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000930:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	48000800 	.word	0x48000800
 800094c:	48000c00 	.word	0x48000c00
 8000950:	48001000 	.word	0x48001000
 8000954:	48001400 	.word	0x48001400
 8000958:	48001800 	.word	0x48001800
 800095c:	48001c00 	.word	0x48001c00

08000960 <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff22 	bl	80007bc <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d822      	bhi.n	80009c6 <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000990:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2103      	movs	r1, #3
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	4619      	mov	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	400a      	ands	r2, r1
 80009ae:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	430a      	orrs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e0e1      	b.n	8000b8a <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	795b      	ldrb	r3, [r3, #5]
 80009ca:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80009d6:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	791b      	ldrb	r3, [r3, #4]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	2103      	movs	r1, #3
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	400a      	ands	r2, r1
 80009f4:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	6819      	ldr	r1, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	795b      	ldrb	r3, [r3, #5]
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d117      	bne.n	8000a42 <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a12:	4b47      	ldr	r3, [pc, #284]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	7912      	ldrb	r2, [r2, #4]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	408a      	lsls	r2, r1
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a43      	ldr	r2, [pc, #268]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a28:	4b41      	ldr	r3, [pc, #260]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	7912      	ldrb	r2, [r2, #4]
 8000a30:	4611      	mov	r1, r2
 8000a32:	2201      	movs	r2, #1
 8000a34:	408a      	lsls	r2, r1
 8000a36:	43d2      	mvns	r2, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	6093      	str	r3, [r2, #8]
 8000a40:	e035      	b.n	8000aae <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	795b      	ldrb	r3, [r3, #5]
 8000a46:	2b05      	cmp	r3, #5
 8000a48:	d117      	bne.n	8000a7a <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a4a:	4b39      	ldr	r3, [pc, #228]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	7912      	ldrb	r2, [r2, #4]
 8000a52:	4611      	mov	r1, r2
 8000a54:	2201      	movs	r2, #1
 8000a56:	408a      	lsls	r2, r1
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a60:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	7912      	ldrb	r2, [r2, #4]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	408a      	lsls	r2, r1
 8000a6e:	43d2      	mvns	r2, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a2f      	ldr	r2, [pc, #188]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a74:	400b      	ands	r3, r1
 8000a76:	60d3      	str	r3, [r2, #12]
 8000a78:	e019      	b.n	8000aae <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d115      	bne.n	8000aae <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	7912      	ldrb	r2, [r2, #4]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	408a      	lsls	r2, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	4a27      	ldr	r2, [pc, #156]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a94:	430b      	orrs	r3, r1
 8000a96:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	7912      	ldrb	r2, [r2, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	408a      	lsls	r2, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <GPIO_Init+0x1d0>)
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	791b      	ldrb	r3, [r3, #4]
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ac8:	d042      	beq.n	8000b50 <GPIO_Init+0x1f0>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <GPIO_Init+0x1d4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d02b      	beq.n	8000b2c <GPIO_Init+0x1cc>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <GPIO_Init+0x1d8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d024      	beq.n	8000b28 <GPIO_Init+0x1c8>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a16      	ldr	r2, [pc, #88]	@ (8000b3c <GPIO_Init+0x1dc>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d01d      	beq.n	8000b24 <GPIO_Init+0x1c4>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <GPIO_Init+0x1e0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d016      	beq.n	8000b20 <GPIO_Init+0x1c0>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a13      	ldr	r2, [pc, #76]	@ (8000b44 <GPIO_Init+0x1e4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d00f      	beq.n	8000b1c <GPIO_Init+0x1bc>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a11      	ldr	r2, [pc, #68]	@ (8000b48 <GPIO_Init+0x1e8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d008      	beq.n	8000b18 <GPIO_Init+0x1b8>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <GPIO_Init+0x1ec>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d101      	bne.n	8000b14 <GPIO_Init+0x1b4>
 8000b10:	2307      	movs	r3, #7
 8000b12:	e01e      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b14:	2300      	movs	r3, #0
 8000b16:	e01c      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b18:	2306      	movs	r3, #6
 8000b1a:	e01a      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	e018      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e016      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b24:	2303      	movs	r3, #3
 8000b26:	e014      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e012      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e010      	b.n	8000b52 <GPIO_Init+0x1f2>
 8000b30:	40010400 	.word	0x40010400
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	48000c00 	.word	0x48000c00
 8000b40:	48001000 	.word	0x48001000
 8000b44:	48001400 	.word	0x48001400
 8000b48:	48001800 	.word	0x48001800
 8000b4c:	48001c00 	.word	0x48001c00
 8000b50:	2300      	movs	r3, #0
 8000b52:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000b54:	4b5d      	ldr	r3, [pc, #372]	@ (8000ccc <GPIO_Init+0x36c>)
 8000b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b58:	4a5c      	ldr	r2, [pc, #368]	@ (8000ccc <GPIO_Init+0x36c>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000b60:	7c7a      	ldrb	r2, [r7, #17]
 8000b62:	7cbb      	ldrb	r3, [r7, #18]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	fa02 f103 	lsl.w	r1, r2, r3
 8000b6a:	4a59      	ldr	r2, [pc, #356]	@ (8000cd0 <GPIO_Init+0x370>)
 8000b6c:	7cfb      	ldrb	r3, [r7, #19]
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000b74:	4b57      	ldr	r3, [pc, #348]	@ (8000cd4 <GPIO_Init+0x374>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	7912      	ldrb	r2, [r2, #4]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	2201      	movs	r2, #1
 8000b80:	408a      	lsls	r2, r1
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a53      	ldr	r2, [pc, #332]	@ (8000cd4 <GPIO_Init+0x374>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	799b      	ldrb	r3, [r3, #6]
 8000b92:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000b9e:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2103      	movs	r1, #3
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	400a      	ands	r2, r1
 8000bbc:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	6899      	ldr	r1, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	79db      	ldrb	r3, [r3, #7]
 8000bd6:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000be2:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	400a      	ands	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	68d9      	ldr	r1, [r3, #12]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	7a1b      	ldrb	r3, [r3, #8]
 8000c1a:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000c24:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2301      	movs	r3, #1
 8000c34:	408b      	lsls	r3, r1
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	400a      	ands	r2, r1
 8000c40:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6859      	ldr	r1, [r3, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	795b      	ldrb	r3, [r3, #5]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d132      	bne.n	8000cc4 <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	791b      	ldrb	r3, [r3, #4]
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	791b      	ldrb	r3, [r3, #4]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	210f      	movs	r1, #15
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4011      	ands	r1, r2
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	3208      	adds	r2, #8
 8000c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a5b      	ldrb	r3, [r3, #9]
 8000caa:	4619      	mov	r1, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4311      	orrs	r1, r2
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010000 	.word	0x40010000
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <SPI2_GPIOInits>:
}
extern  void initialise_monitor_handles(void);


void SPI2_GPIOInits(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;
    SPIPins.pGPIOx = GPIOB;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <SPI2_GPIOInits+0x60>)
 8000ce0:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000cea:	2300      	movs	r3, #0
 8000cec:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	72bb      	strb	r3, [r7, #10]
    GPIO_PeriClockControl(GPIOB, ENABLE);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <SPI2_GPIOInits+0x60>)
 8000cfa:	f7ff fd5f 	bl	80007bc <GPIO_PeriClockControl>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;  // NSS
 8000cfe:	230c      	movs	r3, #12
 8000d00:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe2b 	bl	8000960 <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;  // SCK
 8000d0a:	230d      	movs	r3, #13
 8000d0c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe25 	bl	8000960 <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;  // MISO
 8000d16:	230e      	movs	r3, #14
 8000d18:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe1f 	bl	8000960 <GPIO_Init>

    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;  // MOSI
 8000d22:	230f      	movs	r3, #15
 8000d24:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fe19 	bl	8000960 <GPIO_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	48000400 	.word	0x48000400

08000d3c <SPI2_InitsMaster>:


void SPI2_InitsMaster(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    SPI2Handle.pSPIx = SPI2;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <SPI2_InitsMaster+0x44>)
 8000d44:	601a      	str	r2, [r3, #0]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	711a      	strb	r2, [r3, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	715a      	strb	r2, [r3, #5]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d54:	2204      	movs	r2, #4
 8000d56:	719a      	strb	r2, [r3, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	71da      	strb	r2, [r3, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	721a      	strb	r2, [r3, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	725a      	strb	r2, [r3, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	729a      	strb	r2, [r3, #10]
    SPI_Init(&SPI2Handle);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <SPI2_InitsMaster+0x40>)
 8000d72:	f7ff fadd 	bl	8000330 <SPI_Init>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000084 	.word	0x20000084
 8000d80:	40003800 	.word	0x40003800

08000d84 <SPI2_InitSlave>:
void SPI2_InitSlave(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    SPI2Handle.pSPIx = SPI2;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <SPI2_InitSlave+0x44>)
 8000d8c:	601a      	str	r2, [r3, #0]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_SLAVE;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	711a      	strb	r2, [r3, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	715a      	strb	r2, [r3, #5]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	719a      	strb	r2, [r3, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	71da      	strb	r2, [r3, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	721a      	strb	r2, [r3, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	725a      	strb	r2, [r3, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	729a      	strb	r2, [r3, #10]
    SPI_Init(&SPI2Handle);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <SPI2_InitSlave+0x40>)
 8000dba:	f7ff fab9 	bl	8000330 <SPI_Init>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000084 	.word	0x20000084
 8000dc8:	40003800 	.word	0x40003800

08000dcc <SPI_ApplicationEventCallback>:
// SPI event callback
void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv)
{
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b090      	sub	sp, #64	@ 0x40
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
    if(AppEv == SPI_EVENT_TX_CMPLT)                 // TX complete event
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10f      	bne.n	8000dfe <SPI_ApplicationEventCallback+0x32>
    {
        char msg[] = "SPI Transmit Complete!\r\n";
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <SPI_ApplicationEventCallback+0x60>)
 8000de0:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000de4:	461d      	mov	r5, r3
 8000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dee:	c403      	stmia	r4!, {r0, r1}
 8000df0:	7022      	strb	r2, [r4, #0]
        printf("%s\n",msg);
 8000df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fa02 	bl	8001200 <puts>
    }
    else if(SPI_EVENT_RX_CMPLT == AppEv ){
    	char msg[] = "SPI Receive Complete!\r\n";
    	printf("%s\n",msg);
    }
}
 8000dfc:	e011      	b.n	8000e22 <SPI_ApplicationEventCallback+0x56>
    else if(SPI_EVENT_RX_CMPLT == AppEv ){
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d10e      	bne.n	8000e22 <SPI_ApplicationEventCallback+0x56>
    	char msg[] = "SPI Receive Complete!\r\n";
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <SPI_ApplicationEventCallback+0x64>)
 8000e06:	f107 040c 	add.w	r4, r7, #12
 8000e0a:	461d      	mov	r5, r3
 8000e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e14:	e884 0003 	stmia.w	r4, {r0, r1}
    	printf("%s\n",msg);
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f9ef 	bl	8001200 <puts>
}
 8000e22:	bf00      	nop
 8000e24:	3740      	adds	r7, #64	@ 0x40
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bdb0      	pop	{r4, r5, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	08002414 	.word	0x08002414
 8000e30:	08002430 	.word	0x08002430

08000e34 <main>:

// Main function
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000e38:	f001 fa62 	bl	8002300 <initialise_monitor_handles>
    SPI2_GPIOInits();
 8000e3c:	f7ff ff4c 	bl	8000cd8 <SPI2_GPIOInits>
    SPI2_InitsMaster();
 8000e40:	f7ff ff7c 	bl	8000d3c <SPI2_InitsMaster>

    SPI_SSOEConfig(SPI2, ENABLE);
 8000e44:	2101      	movs	r1, #1
 8000e46:	4815      	ldr	r0, [pc, #84]	@ (8000e9c <main+0x68>)
 8000e48:	f7ff faec 	bl	8000424 <SPI_SSOEConfig>
    SPI_PeripheralControl(SPI2, ENABLE);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4813      	ldr	r0, [pc, #76]	@ (8000e9c <main+0x68>)
 8000e50:	f7ff facc 	bl	80003ec <SPI_PeripheralControl>

    SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 8000e54:	2101      	movs	r1, #1
 8000e56:	2024      	movs	r0, #36	@ 0x24
 8000e58:	f7ff fb48 	bl	80004ec <SPI_IRQInterruptConfig>

    SPI_SendDataIT(&SPI2Handle, &data, 1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4910      	ldr	r1, [pc, #64]	@ (8000ea0 <main+0x6c>)
 8000e60:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <main+0x70>)
 8000e62:	f7ff fafb 	bl	800045c <SPI_SendDataIT>

    SPI2_InitSlave();
 8000e66:	f7ff ff8d 	bl	8000d84 <SPI2_InitSlave>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <main+0x68>)
 8000e6e:	f7ff fad9 	bl	8000424 <SPI_SSOEConfig>
	SPI_PeripheralControl(SPI2, ENABLE);
 8000e72:	2101      	movs	r1, #1
 8000e74:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <main+0x68>)
 8000e76:	f7ff fab9 	bl	80003ec <SPI_PeripheralControl>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2, ENABLE);
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	2024      	movs	r0, #36	@ 0x24
 8000e7e:	f7ff fb35 	bl	80004ec <SPI_IRQInterruptConfig>

    SPI_ReceiveDataIT(&SPI2Handle,&rdata, 1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <main+0x74>)
 8000e86:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <main+0x70>)
 8000e88:	f7ff fb0c 	bl	80004a4 <SPI_ReceiveDataIT>
    printf("Received Data %d\n",rdata);
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <main+0x74>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	@ (8000eac <main+0x78>)
 8000e94:	f000 f94c 	bl	8001130 <iprintf>
    while(1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <main+0x64>
 8000e9c:	40003800 	.word	0x40003800
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000084 	.word	0x20000084
 8000ea8:	200000a4 	.word	0x200000a4
 8000eac:	08002448 	.word	0x08002448

08000eb0 <SPI2_IRQHandler>:
    }
}


void SPI2_IRQHandler(void)
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
    const char msg[] = "SPI2 Interrupt generated\r\n";
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <SPI2_IRQHandler+0x34>)
 8000eb8:	1d3c      	adds	r4, r7, #4
 8000eba:	461d      	mov	r5, r3
 8000ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ec4:	c403      	stmia	r4!, {r0, r1}
 8000ec6:	8022      	strh	r2, [r4, #0]
 8000ec8:	3402      	adds	r4, #2
 8000eca:	0c13      	lsrs	r3, r2, #16
 8000ecc:	7023      	strb	r3, [r4, #0]
    printf("%s\n",msg);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f995 	bl	8001200 <puts>
    SPI_IRQHandling(&SPI2Handle);
 8000ed6:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <SPI2_IRQHandler+0x38>)
 8000ed8:	f7ff fb8e 	bl	80005f8 <SPI_IRQHandling>
}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee4:	0800245c 	.word	0x0800245c
 8000ee8:	20000084 	.word	0x20000084

08000eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef4:	4a14      	ldr	r2, [pc, #80]	@ (8000f48 <_sbrk+0x5c>)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <_sbrk+0x60>)
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f00:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <_sbrk+0x64>)
 8000f0a:	4a12      	ldr	r2, [pc, #72]	@ (8000f54 <_sbrk+0x68>)
 8000f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d207      	bcs.n	8000f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f1c:	f000 fa9e 	bl	800145c <__errno>
 8000f20:	4603      	mov	r3, r0
 8000f22:	220c      	movs	r2, #12
 8000f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2a:	e009      	b.n	8000f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f32:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <_sbrk+0x64>)
 8000f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20018000 	.word	0x20018000
 8000f4c:	00000400 	.word	0x00000400
 8000f50:	200000a8 	.word	0x200000a8
 8000f54:	200002a8 	.word	0x200002a8

08000f58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f60:	480c      	ldr	r0, [pc, #48]	@ (8000f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f62:	490d      	ldr	r1, [pc, #52]	@ (8000f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <LoopForever+0xe>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f78:	4c0a      	ldr	r4, [pc, #40]	@ (8000fa4 <LoopForever+0x16>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000f86:	f000 fa6f 	bl	8001468 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000f8a:	f7ff ff53 	bl	8000e34 <main>

08000f8e <LoopForever>:

LoopForever:
  b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>
  ldr   r0, =_estack
 8000f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f9c:	080024d4 	.word	0x080024d4
  ldr r2, =_sbss
 8000fa0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fa4:	200002a4 	.word	0x200002a4

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <std>:
 8000fac:	2300      	movs	r3, #0
 8000fae:	b510      	push	{r4, lr}
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8000fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000fba:	6083      	str	r3, [r0, #8]
 8000fbc:	8181      	strh	r1, [r0, #12]
 8000fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8000fc0:	81c2      	strh	r2, [r0, #14]
 8000fc2:	6183      	str	r3, [r0, #24]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	305c      	adds	r0, #92	@ 0x5c
 8000fca:	f000 f9f9 	bl	80013c0 <memset>
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <std+0x58>)
 8000fd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <std+0x5c>)
 8000fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <std+0x60>)
 8000fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <std+0x64>)
 8000fdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fde:	4b0d      	ldr	r3, [pc, #52]	@ (8001014 <std+0x68>)
 8000fe0:	6224      	str	r4, [r4, #32]
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	d006      	beq.n	8000ff4 <std+0x48>
 8000fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000fea:	4294      	cmp	r4, r2
 8000fec:	d002      	beq.n	8000ff4 <std+0x48>
 8000fee:	33d0      	adds	r3, #208	@ 0xd0
 8000ff0:	429c      	cmp	r4, r3
 8000ff2:	d105      	bne.n	8001000 <std+0x54>
 8000ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ffc:	f000 ba58 	b.w	80014b0 <__retarget_lock_init_recursive>
 8001000:	bd10      	pop	{r4, pc}
 8001002:	bf00      	nop
 8001004:	08001211 	.word	0x08001211
 8001008:	08001233 	.word	0x08001233
 800100c:	0800126b 	.word	0x0800126b
 8001010:	0800128f 	.word	0x0800128f
 8001014:	200000ac 	.word	0x200000ac

08001018 <stdio_exit_handler>:
 8001018:	4a02      	ldr	r2, [pc, #8]	@ (8001024 <stdio_exit_handler+0xc>)
 800101a:	4903      	ldr	r1, [pc, #12]	@ (8001028 <stdio_exit_handler+0x10>)
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <stdio_exit_handler+0x14>)
 800101e:	f000 b869 	b.w	80010f4 <_fwalk_sglue>
 8001022:	bf00      	nop
 8001024:	20000004 	.word	0x20000004
 8001028:	08001d4d 	.word	0x08001d4d
 800102c:	20000014 	.word	0x20000014

08001030 <cleanup_stdio>:
 8001030:	6841      	ldr	r1, [r0, #4]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <cleanup_stdio+0x34>)
 8001034:	4299      	cmp	r1, r3
 8001036:	b510      	push	{r4, lr}
 8001038:	4604      	mov	r4, r0
 800103a:	d001      	beq.n	8001040 <cleanup_stdio+0x10>
 800103c:	f000 fe86 	bl	8001d4c <_fflush_r>
 8001040:	68a1      	ldr	r1, [r4, #8]
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <cleanup_stdio+0x38>)
 8001044:	4299      	cmp	r1, r3
 8001046:	d002      	beq.n	800104e <cleanup_stdio+0x1e>
 8001048:	4620      	mov	r0, r4
 800104a:	f000 fe7f 	bl	8001d4c <_fflush_r>
 800104e:	68e1      	ldr	r1, [r4, #12]
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <cleanup_stdio+0x3c>)
 8001052:	4299      	cmp	r1, r3
 8001054:	d004      	beq.n	8001060 <cleanup_stdio+0x30>
 8001056:	4620      	mov	r0, r4
 8001058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800105c:	f000 be76 	b.w	8001d4c <_fflush_r>
 8001060:	bd10      	pop	{r4, pc}
 8001062:	bf00      	nop
 8001064:	200000ac 	.word	0x200000ac
 8001068:	20000114 	.word	0x20000114
 800106c:	2000017c 	.word	0x2000017c

08001070 <global_stdio_init.part.0>:
 8001070:	b510      	push	{r4, lr}
 8001072:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <global_stdio_init.part.0+0x30>)
 8001074:	4c0b      	ldr	r4, [pc, #44]	@ (80010a4 <global_stdio_init.part.0+0x34>)
 8001076:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <global_stdio_init.part.0+0x38>)
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4620      	mov	r0, r4
 800107c:	2200      	movs	r2, #0
 800107e:	2104      	movs	r1, #4
 8001080:	f7ff ff94 	bl	8000fac <std>
 8001084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001088:	2201      	movs	r2, #1
 800108a:	2109      	movs	r1, #9
 800108c:	f7ff ff8e 	bl	8000fac <std>
 8001090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001094:	2202      	movs	r2, #2
 8001096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800109a:	2112      	movs	r1, #18
 800109c:	f7ff bf86 	b.w	8000fac <std>
 80010a0:	200001e4 	.word	0x200001e4
 80010a4:	200000ac 	.word	0x200000ac
 80010a8:	08001019 	.word	0x08001019

080010ac <__sfp_lock_acquire>:
 80010ac:	4801      	ldr	r0, [pc, #4]	@ (80010b4 <__sfp_lock_acquire+0x8>)
 80010ae:	f000 ba00 	b.w	80014b2 <__retarget_lock_acquire_recursive>
 80010b2:	bf00      	nop
 80010b4:	200001ed 	.word	0x200001ed

080010b8 <__sfp_lock_release>:
 80010b8:	4801      	ldr	r0, [pc, #4]	@ (80010c0 <__sfp_lock_release+0x8>)
 80010ba:	f000 b9fb 	b.w	80014b4 <__retarget_lock_release_recursive>
 80010be:	bf00      	nop
 80010c0:	200001ed 	.word	0x200001ed

080010c4 <__sinit>:
 80010c4:	b510      	push	{r4, lr}
 80010c6:	4604      	mov	r4, r0
 80010c8:	f7ff fff0 	bl	80010ac <__sfp_lock_acquire>
 80010cc:	6a23      	ldr	r3, [r4, #32]
 80010ce:	b11b      	cbz	r3, 80010d8 <__sinit+0x14>
 80010d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010d4:	f7ff bff0 	b.w	80010b8 <__sfp_lock_release>
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <__sinit+0x28>)
 80010da:	6223      	str	r3, [r4, #32]
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <__sinit+0x2c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f5      	bne.n	80010d0 <__sinit+0xc>
 80010e4:	f7ff ffc4 	bl	8001070 <global_stdio_init.part.0>
 80010e8:	e7f2      	b.n	80010d0 <__sinit+0xc>
 80010ea:	bf00      	nop
 80010ec:	08001031 	.word	0x08001031
 80010f0:	200001e4 	.word	0x200001e4

080010f4 <_fwalk_sglue>:
 80010f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010f8:	4607      	mov	r7, r0
 80010fa:	4688      	mov	r8, r1
 80010fc:	4614      	mov	r4, r2
 80010fe:	2600      	movs	r6, #0
 8001100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001104:	f1b9 0901 	subs.w	r9, r9, #1
 8001108:	d505      	bpl.n	8001116 <_fwalk_sglue+0x22>
 800110a:	6824      	ldr	r4, [r4, #0]
 800110c:	2c00      	cmp	r4, #0
 800110e:	d1f7      	bne.n	8001100 <_fwalk_sglue+0xc>
 8001110:	4630      	mov	r0, r6
 8001112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001116:	89ab      	ldrh	r3, [r5, #12]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d907      	bls.n	800112c <_fwalk_sglue+0x38>
 800111c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001120:	3301      	adds	r3, #1
 8001122:	d003      	beq.n	800112c <_fwalk_sglue+0x38>
 8001124:	4629      	mov	r1, r5
 8001126:	4638      	mov	r0, r7
 8001128:	47c0      	blx	r8
 800112a:	4306      	orrs	r6, r0
 800112c:	3568      	adds	r5, #104	@ 0x68
 800112e:	e7e9      	b.n	8001104 <_fwalk_sglue+0x10>

08001130 <iprintf>:
 8001130:	b40f      	push	{r0, r1, r2, r3}
 8001132:	b507      	push	{r0, r1, r2, lr}
 8001134:	4906      	ldr	r1, [pc, #24]	@ (8001150 <iprintf+0x20>)
 8001136:	ab04      	add	r3, sp, #16
 8001138:	6808      	ldr	r0, [r1, #0]
 800113a:	f853 2b04 	ldr.w	r2, [r3], #4
 800113e:	6881      	ldr	r1, [r0, #8]
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f000 fadb 	bl	80016fc <_vfiprintf_r>
 8001146:	b003      	add	sp, #12
 8001148:	f85d eb04 	ldr.w	lr, [sp], #4
 800114c:	b004      	add	sp, #16
 800114e:	4770      	bx	lr
 8001150:	20000010 	.word	0x20000010

08001154 <_puts_r>:
 8001154:	6a03      	ldr	r3, [r0, #32]
 8001156:	b570      	push	{r4, r5, r6, lr}
 8001158:	6884      	ldr	r4, [r0, #8]
 800115a:	4605      	mov	r5, r0
 800115c:	460e      	mov	r6, r1
 800115e:	b90b      	cbnz	r3, 8001164 <_puts_r+0x10>
 8001160:	f7ff ffb0 	bl	80010c4 <__sinit>
 8001164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001166:	07db      	lsls	r3, r3, #31
 8001168:	d405      	bmi.n	8001176 <_puts_r+0x22>
 800116a:	89a3      	ldrh	r3, [r4, #12]
 800116c:	0598      	lsls	r0, r3, #22
 800116e:	d402      	bmi.n	8001176 <_puts_r+0x22>
 8001170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001172:	f000 f99e 	bl	80014b2 <__retarget_lock_acquire_recursive>
 8001176:	89a3      	ldrh	r3, [r4, #12]
 8001178:	0719      	lsls	r1, r3, #28
 800117a:	d502      	bpl.n	8001182 <_puts_r+0x2e>
 800117c:	6923      	ldr	r3, [r4, #16]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d135      	bne.n	80011ee <_puts_r+0x9a>
 8001182:	4621      	mov	r1, r4
 8001184:	4628      	mov	r0, r5
 8001186:	f000 f8c5 	bl	8001314 <__swsetup_r>
 800118a:	b380      	cbz	r0, 80011ee <_puts_r+0x9a>
 800118c:	f04f 35ff 	mov.w	r5, #4294967295
 8001190:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001192:	07da      	lsls	r2, r3, #31
 8001194:	d405      	bmi.n	80011a2 <_puts_r+0x4e>
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	059b      	lsls	r3, r3, #22
 800119a:	d402      	bmi.n	80011a2 <_puts_r+0x4e>
 800119c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800119e:	f000 f989 	bl	80014b4 <__retarget_lock_release_recursive>
 80011a2:	4628      	mov	r0, r5
 80011a4:	bd70      	pop	{r4, r5, r6, pc}
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da04      	bge.n	80011b4 <_puts_r+0x60>
 80011aa:	69a2      	ldr	r2, [r4, #24]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dc17      	bgt.n	80011e0 <_puts_r+0x8c>
 80011b0:	290a      	cmp	r1, #10
 80011b2:	d015      	beq.n	80011e0 <_puts_r+0x8c>
 80011b4:	6823      	ldr	r3, [r4, #0]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	6022      	str	r2, [r4, #0]
 80011ba:	7019      	strb	r1, [r3, #0]
 80011bc:	68a3      	ldr	r3, [r4, #8]
 80011be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011c2:	3b01      	subs	r3, #1
 80011c4:	60a3      	str	r3, [r4, #8]
 80011c6:	2900      	cmp	r1, #0
 80011c8:	d1ed      	bne.n	80011a6 <_puts_r+0x52>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da11      	bge.n	80011f2 <_puts_r+0x9e>
 80011ce:	4622      	mov	r2, r4
 80011d0:	210a      	movs	r1, #10
 80011d2:	4628      	mov	r0, r5
 80011d4:	f000 f85f 	bl	8001296 <__swbuf_r>
 80011d8:	3001      	adds	r0, #1
 80011da:	d0d7      	beq.n	800118c <_puts_r+0x38>
 80011dc:	250a      	movs	r5, #10
 80011de:	e7d7      	b.n	8001190 <_puts_r+0x3c>
 80011e0:	4622      	mov	r2, r4
 80011e2:	4628      	mov	r0, r5
 80011e4:	f000 f857 	bl	8001296 <__swbuf_r>
 80011e8:	3001      	adds	r0, #1
 80011ea:	d1e7      	bne.n	80011bc <_puts_r+0x68>
 80011ec:	e7ce      	b.n	800118c <_puts_r+0x38>
 80011ee:	3e01      	subs	r6, #1
 80011f0:	e7e4      	b.n	80011bc <_puts_r+0x68>
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	6022      	str	r2, [r4, #0]
 80011f8:	220a      	movs	r2, #10
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e7ee      	b.n	80011dc <_puts_r+0x88>
	...

08001200 <puts>:
 8001200:	4b02      	ldr	r3, [pc, #8]	@ (800120c <puts+0xc>)
 8001202:	4601      	mov	r1, r0
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f7ff bfa5 	b.w	8001154 <_puts_r>
 800120a:	bf00      	nop
 800120c:	20000010 	.word	0x20000010

08001210 <__sread>:
 8001210:	b510      	push	{r4, lr}
 8001212:	460c      	mov	r4, r1
 8001214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001218:	f000 f8fc 	bl	8001414 <_read_r>
 800121c:	2800      	cmp	r0, #0
 800121e:	bfab      	itete	ge
 8001220:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001222:	89a3      	ldrhlt	r3, [r4, #12]
 8001224:	181b      	addge	r3, r3, r0
 8001226:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800122a:	bfac      	ite	ge
 800122c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800122e:	81a3      	strhlt	r3, [r4, #12]
 8001230:	bd10      	pop	{r4, pc}

08001232 <__swrite>:
 8001232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001236:	461f      	mov	r7, r3
 8001238:	898b      	ldrh	r3, [r1, #12]
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	4605      	mov	r5, r0
 800123e:	460c      	mov	r4, r1
 8001240:	4616      	mov	r6, r2
 8001242:	d505      	bpl.n	8001250 <__swrite+0x1e>
 8001244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001248:	2302      	movs	r3, #2
 800124a:	2200      	movs	r2, #0
 800124c:	f000 f8d0 	bl	80013f0 <_lseek_r>
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001256:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800125a:	81a3      	strh	r3, [r4, #12]
 800125c:	4632      	mov	r2, r6
 800125e:	463b      	mov	r3, r7
 8001260:	4628      	mov	r0, r5
 8001262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001266:	f000 b8e7 	b.w	8001438 <_write_r>

0800126a <__sseek>:
 800126a:	b510      	push	{r4, lr}
 800126c:	460c      	mov	r4, r1
 800126e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001272:	f000 f8bd 	bl	80013f0 <_lseek_r>
 8001276:	1c43      	adds	r3, r0, #1
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	bf15      	itete	ne
 800127c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800127e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001282:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001286:	81a3      	strheq	r3, [r4, #12]
 8001288:	bf18      	it	ne
 800128a:	81a3      	strhne	r3, [r4, #12]
 800128c:	bd10      	pop	{r4, pc}

0800128e <__sclose>:
 800128e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001292:	f000 b89d 	b.w	80013d0 <_close_r>

08001296 <__swbuf_r>:
 8001296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001298:	460e      	mov	r6, r1
 800129a:	4614      	mov	r4, r2
 800129c:	4605      	mov	r5, r0
 800129e:	b118      	cbz	r0, 80012a8 <__swbuf_r+0x12>
 80012a0:	6a03      	ldr	r3, [r0, #32]
 80012a2:	b90b      	cbnz	r3, 80012a8 <__swbuf_r+0x12>
 80012a4:	f7ff ff0e 	bl	80010c4 <__sinit>
 80012a8:	69a3      	ldr	r3, [r4, #24]
 80012aa:	60a3      	str	r3, [r4, #8]
 80012ac:	89a3      	ldrh	r3, [r4, #12]
 80012ae:	071a      	lsls	r2, r3, #28
 80012b0:	d501      	bpl.n	80012b6 <__swbuf_r+0x20>
 80012b2:	6923      	ldr	r3, [r4, #16]
 80012b4:	b943      	cbnz	r3, 80012c8 <__swbuf_r+0x32>
 80012b6:	4621      	mov	r1, r4
 80012b8:	4628      	mov	r0, r5
 80012ba:	f000 f82b 	bl	8001314 <__swsetup_r>
 80012be:	b118      	cbz	r0, 80012c8 <__swbuf_r+0x32>
 80012c0:	f04f 37ff 	mov.w	r7, #4294967295
 80012c4:	4638      	mov	r0, r7
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	6922      	ldr	r2, [r4, #16]
 80012cc:	1a98      	subs	r0, r3, r2
 80012ce:	6963      	ldr	r3, [r4, #20]
 80012d0:	b2f6      	uxtb	r6, r6
 80012d2:	4283      	cmp	r3, r0
 80012d4:	4637      	mov	r7, r6
 80012d6:	dc05      	bgt.n	80012e4 <__swbuf_r+0x4e>
 80012d8:	4621      	mov	r1, r4
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 fd36 	bl	8001d4c <_fflush_r>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d1ed      	bne.n	80012c0 <__swbuf_r+0x2a>
 80012e4:	68a3      	ldr	r3, [r4, #8]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60a3      	str	r3, [r4, #8]
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	6022      	str	r2, [r4, #0]
 80012f0:	701e      	strb	r6, [r3, #0]
 80012f2:	6962      	ldr	r2, [r4, #20]
 80012f4:	1c43      	adds	r3, r0, #1
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d004      	beq.n	8001304 <__swbuf_r+0x6e>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	07db      	lsls	r3, r3, #31
 80012fe:	d5e1      	bpl.n	80012c4 <__swbuf_r+0x2e>
 8001300:	2e0a      	cmp	r6, #10
 8001302:	d1df      	bne.n	80012c4 <__swbuf_r+0x2e>
 8001304:	4621      	mov	r1, r4
 8001306:	4628      	mov	r0, r5
 8001308:	f000 fd20 	bl	8001d4c <_fflush_r>
 800130c:	2800      	cmp	r0, #0
 800130e:	d0d9      	beq.n	80012c4 <__swbuf_r+0x2e>
 8001310:	e7d6      	b.n	80012c0 <__swbuf_r+0x2a>
	...

08001314 <__swsetup_r>:
 8001314:	b538      	push	{r3, r4, r5, lr}
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <__swsetup_r+0xa8>)
 8001318:	4605      	mov	r5, r0
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	460c      	mov	r4, r1
 800131e:	b118      	cbz	r0, 8001328 <__swsetup_r+0x14>
 8001320:	6a03      	ldr	r3, [r0, #32]
 8001322:	b90b      	cbnz	r3, 8001328 <__swsetup_r+0x14>
 8001324:	f7ff fece 	bl	80010c4 <__sinit>
 8001328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800132c:	0719      	lsls	r1, r3, #28
 800132e:	d422      	bmi.n	8001376 <__swsetup_r+0x62>
 8001330:	06da      	lsls	r2, r3, #27
 8001332:	d407      	bmi.n	8001344 <__swsetup_r+0x30>
 8001334:	2209      	movs	r2, #9
 8001336:	602a      	str	r2, [r5, #0]
 8001338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800133c:	81a3      	strh	r3, [r4, #12]
 800133e:	f04f 30ff 	mov.w	r0, #4294967295
 8001342:	e033      	b.n	80013ac <__swsetup_r+0x98>
 8001344:	0758      	lsls	r0, r3, #29
 8001346:	d512      	bpl.n	800136e <__swsetup_r+0x5a>
 8001348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800134a:	b141      	cbz	r1, 800135e <__swsetup_r+0x4a>
 800134c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001350:	4299      	cmp	r1, r3
 8001352:	d002      	beq.n	800135a <__swsetup_r+0x46>
 8001354:	4628      	mov	r0, r5
 8001356:	f000 f8af 	bl	80014b8 <_free_r>
 800135a:	2300      	movs	r3, #0
 800135c:	6363      	str	r3, [r4, #52]	@ 0x34
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001364:	81a3      	strh	r3, [r4, #12]
 8001366:	2300      	movs	r3, #0
 8001368:	6063      	str	r3, [r4, #4]
 800136a:	6923      	ldr	r3, [r4, #16]
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	81a3      	strh	r3, [r4, #12]
 8001376:	6923      	ldr	r3, [r4, #16]
 8001378:	b94b      	cbnz	r3, 800138e <__swsetup_r+0x7a>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001384:	d003      	beq.n	800138e <__swsetup_r+0x7a>
 8001386:	4621      	mov	r1, r4
 8001388:	4628      	mov	r0, r5
 800138a:	f000 fd2d 	bl	8001de8 <__smakebuf_r>
 800138e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001392:	f013 0201 	ands.w	r2, r3, #1
 8001396:	d00a      	beq.n	80013ae <__swsetup_r+0x9a>
 8001398:	2200      	movs	r2, #0
 800139a:	60a2      	str	r2, [r4, #8]
 800139c:	6962      	ldr	r2, [r4, #20]
 800139e:	4252      	negs	r2, r2
 80013a0:	61a2      	str	r2, [r4, #24]
 80013a2:	6922      	ldr	r2, [r4, #16]
 80013a4:	b942      	cbnz	r2, 80013b8 <__swsetup_r+0xa4>
 80013a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013aa:	d1c5      	bne.n	8001338 <__swsetup_r+0x24>
 80013ac:	bd38      	pop	{r3, r4, r5, pc}
 80013ae:	0799      	lsls	r1, r3, #30
 80013b0:	bf58      	it	pl
 80013b2:	6962      	ldrpl	r2, [r4, #20]
 80013b4:	60a2      	str	r2, [r4, #8]
 80013b6:	e7f4      	b.n	80013a2 <__swsetup_r+0x8e>
 80013b8:	2000      	movs	r0, #0
 80013ba:	e7f7      	b.n	80013ac <__swsetup_r+0x98>
 80013bc:	20000010 	.word	0x20000010

080013c0 <memset>:
 80013c0:	4402      	add	r2, r0
 80013c2:	4603      	mov	r3, r0
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d100      	bne.n	80013ca <memset+0xa>
 80013c8:	4770      	bx	lr
 80013ca:	f803 1b01 	strb.w	r1, [r3], #1
 80013ce:	e7f9      	b.n	80013c4 <memset+0x4>

080013d0 <_close_r>:
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4d06      	ldr	r5, [pc, #24]	@ (80013ec <_close_r+0x1c>)
 80013d4:	2300      	movs	r3, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	602b      	str	r3, [r5, #0]
 80013dc:	f000 fe44 	bl	8002068 <_close>
 80013e0:	1c43      	adds	r3, r0, #1
 80013e2:	d102      	bne.n	80013ea <_close_r+0x1a>
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	b103      	cbz	r3, 80013ea <_close_r+0x1a>
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
 80013ec:	200001e8 	.word	0x200001e8

080013f0 <_lseek_r>:
 80013f0:	b538      	push	{r3, r4, r5, lr}
 80013f2:	4d07      	ldr	r5, [pc, #28]	@ (8001410 <_lseek_r+0x20>)
 80013f4:	4604      	mov	r4, r0
 80013f6:	4608      	mov	r0, r1
 80013f8:	4611      	mov	r1, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	602a      	str	r2, [r5, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f000 fdf3 	bl	8001fea <_lseek>
 8001404:	1c43      	adds	r3, r0, #1
 8001406:	d102      	bne.n	800140e <_lseek_r+0x1e>
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	b103      	cbz	r3, 800140e <_lseek_r+0x1e>
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	200001e8 	.word	0x200001e8

08001414 <_read_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4d07      	ldr	r5, [pc, #28]	@ (8001434 <_read_r+0x20>)
 8001418:	4604      	mov	r4, r0
 800141a:	4608      	mov	r0, r1
 800141c:	4611      	mov	r1, r2
 800141e:	2200      	movs	r2, #0
 8001420:	602a      	str	r2, [r5, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	f000 fd8b 	bl	8001f3e <_read>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_read_r+0x1e>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_read_r+0x1e>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	200001e8 	.word	0x200001e8

08001438 <_write_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4d07      	ldr	r5, [pc, #28]	@ (8001458 <_write_r+0x20>)
 800143c:	4604      	mov	r4, r0
 800143e:	4608      	mov	r0, r1
 8001440:	4611      	mov	r1, r2
 8001442:	2200      	movs	r2, #0
 8001444:	602a      	str	r2, [r5, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	f000 fde1 	bl	800200e <_write>
 800144c:	1c43      	adds	r3, r0, #1
 800144e:	d102      	bne.n	8001456 <_write_r+0x1e>
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	b103      	cbz	r3, 8001456 <_write_r+0x1e>
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	200001e8 	.word	0x200001e8

0800145c <__errno>:
 800145c:	4b01      	ldr	r3, [pc, #4]	@ (8001464 <__errno+0x8>)
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000010 	.word	0x20000010

08001468 <__libc_init_array>:
 8001468:	b570      	push	{r4, r5, r6, lr}
 800146a:	4d0d      	ldr	r5, [pc, #52]	@ (80014a0 <__libc_init_array+0x38>)
 800146c:	4c0d      	ldr	r4, [pc, #52]	@ (80014a4 <__libc_init_array+0x3c>)
 800146e:	1b64      	subs	r4, r4, r5
 8001470:	10a4      	asrs	r4, r4, #2
 8001472:	2600      	movs	r6, #0
 8001474:	42a6      	cmp	r6, r4
 8001476:	d109      	bne.n	800148c <__libc_init_array+0x24>
 8001478:	4d0b      	ldr	r5, [pc, #44]	@ (80014a8 <__libc_init_array+0x40>)
 800147a:	4c0c      	ldr	r4, [pc, #48]	@ (80014ac <__libc_init_array+0x44>)
 800147c:	f000 ffbe 	bl	80023fc <_init>
 8001480:	1b64      	subs	r4, r4, r5
 8001482:	10a4      	asrs	r4, r4, #2
 8001484:	2600      	movs	r6, #0
 8001486:	42a6      	cmp	r6, r4
 8001488:	d105      	bne.n	8001496 <__libc_init_array+0x2e>
 800148a:	bd70      	pop	{r4, r5, r6, pc}
 800148c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001490:	4798      	blx	r3
 8001492:	3601      	adds	r6, #1
 8001494:	e7ee      	b.n	8001474 <__libc_init_array+0xc>
 8001496:	f855 3b04 	ldr.w	r3, [r5], #4
 800149a:	4798      	blx	r3
 800149c:	3601      	adds	r6, #1
 800149e:	e7f2      	b.n	8001486 <__libc_init_array+0x1e>
 80014a0:	080024cc 	.word	0x080024cc
 80014a4:	080024cc 	.word	0x080024cc
 80014a8:	080024cc 	.word	0x080024cc
 80014ac:	080024d0 	.word	0x080024d0

080014b0 <__retarget_lock_init_recursive>:
 80014b0:	4770      	bx	lr

080014b2 <__retarget_lock_acquire_recursive>:
 80014b2:	4770      	bx	lr

080014b4 <__retarget_lock_release_recursive>:
 80014b4:	4770      	bx	lr
	...

080014b8 <_free_r>:
 80014b8:	b538      	push	{r3, r4, r5, lr}
 80014ba:	4605      	mov	r5, r0
 80014bc:	2900      	cmp	r1, #0
 80014be:	d041      	beq.n	8001544 <_free_r+0x8c>
 80014c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c4:	1f0c      	subs	r4, r1, #4
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bfb8      	it	lt
 80014ca:	18e4      	addlt	r4, r4, r3
 80014cc:	f000 f8e0 	bl	8001690 <__malloc_lock>
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <_free_r+0x90>)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	b933      	cbnz	r3, 80014e4 <_free_r+0x2c>
 80014d6:	6063      	str	r3, [r4, #4]
 80014d8:	6014      	str	r4, [r2, #0]
 80014da:	4628      	mov	r0, r5
 80014dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014e0:	f000 b8dc 	b.w	800169c <__malloc_unlock>
 80014e4:	42a3      	cmp	r3, r4
 80014e6:	d908      	bls.n	80014fa <_free_r+0x42>
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	1821      	adds	r1, r4, r0
 80014ec:	428b      	cmp	r3, r1
 80014ee:	bf01      	itttt	eq
 80014f0:	6819      	ldreq	r1, [r3, #0]
 80014f2:	685b      	ldreq	r3, [r3, #4]
 80014f4:	1809      	addeq	r1, r1, r0
 80014f6:	6021      	streq	r1, [r4, #0]
 80014f8:	e7ed      	b.n	80014d6 <_free_r+0x1e>
 80014fa:	461a      	mov	r2, r3
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	b10b      	cbz	r3, 8001504 <_free_r+0x4c>
 8001500:	42a3      	cmp	r3, r4
 8001502:	d9fa      	bls.n	80014fa <_free_r+0x42>
 8001504:	6811      	ldr	r1, [r2, #0]
 8001506:	1850      	adds	r0, r2, r1
 8001508:	42a0      	cmp	r0, r4
 800150a:	d10b      	bne.n	8001524 <_free_r+0x6c>
 800150c:	6820      	ldr	r0, [r4, #0]
 800150e:	4401      	add	r1, r0
 8001510:	1850      	adds	r0, r2, r1
 8001512:	4283      	cmp	r3, r0
 8001514:	6011      	str	r1, [r2, #0]
 8001516:	d1e0      	bne.n	80014da <_free_r+0x22>
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	6053      	str	r3, [r2, #4]
 800151e:	4408      	add	r0, r1
 8001520:	6010      	str	r0, [r2, #0]
 8001522:	e7da      	b.n	80014da <_free_r+0x22>
 8001524:	d902      	bls.n	800152c <_free_r+0x74>
 8001526:	230c      	movs	r3, #12
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	e7d6      	b.n	80014da <_free_r+0x22>
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	1821      	adds	r1, r4, r0
 8001530:	428b      	cmp	r3, r1
 8001532:	bf04      	itt	eq
 8001534:	6819      	ldreq	r1, [r3, #0]
 8001536:	685b      	ldreq	r3, [r3, #4]
 8001538:	6063      	str	r3, [r4, #4]
 800153a:	bf04      	itt	eq
 800153c:	1809      	addeq	r1, r1, r0
 800153e:	6021      	streq	r1, [r4, #0]
 8001540:	6054      	str	r4, [r2, #4]
 8001542:	e7ca      	b.n	80014da <_free_r+0x22>
 8001544:	bd38      	pop	{r3, r4, r5, pc}
 8001546:	bf00      	nop
 8001548:	200001f4 	.word	0x200001f4

0800154c <sbrk_aligned>:
 800154c:	b570      	push	{r4, r5, r6, lr}
 800154e:	4e0f      	ldr	r6, [pc, #60]	@ (800158c <sbrk_aligned+0x40>)
 8001550:	460c      	mov	r4, r1
 8001552:	6831      	ldr	r1, [r6, #0]
 8001554:	4605      	mov	r5, r0
 8001556:	b911      	cbnz	r1, 800155e <sbrk_aligned+0x12>
 8001558:	f000 fca4 	bl	8001ea4 <_sbrk_r>
 800155c:	6030      	str	r0, [r6, #0]
 800155e:	4621      	mov	r1, r4
 8001560:	4628      	mov	r0, r5
 8001562:	f000 fc9f 	bl	8001ea4 <_sbrk_r>
 8001566:	1c43      	adds	r3, r0, #1
 8001568:	d103      	bne.n	8001572 <sbrk_aligned+0x26>
 800156a:	f04f 34ff 	mov.w	r4, #4294967295
 800156e:	4620      	mov	r0, r4
 8001570:	bd70      	pop	{r4, r5, r6, pc}
 8001572:	1cc4      	adds	r4, r0, #3
 8001574:	f024 0403 	bic.w	r4, r4, #3
 8001578:	42a0      	cmp	r0, r4
 800157a:	d0f8      	beq.n	800156e <sbrk_aligned+0x22>
 800157c:	1a21      	subs	r1, r4, r0
 800157e:	4628      	mov	r0, r5
 8001580:	f000 fc90 	bl	8001ea4 <_sbrk_r>
 8001584:	3001      	adds	r0, #1
 8001586:	d1f2      	bne.n	800156e <sbrk_aligned+0x22>
 8001588:	e7ef      	b.n	800156a <sbrk_aligned+0x1e>
 800158a:	bf00      	nop
 800158c:	200001f0 	.word	0x200001f0

08001590 <_malloc_r>:
 8001590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001594:	1ccd      	adds	r5, r1, #3
 8001596:	f025 0503 	bic.w	r5, r5, #3
 800159a:	3508      	adds	r5, #8
 800159c:	2d0c      	cmp	r5, #12
 800159e:	bf38      	it	cc
 80015a0:	250c      	movcc	r5, #12
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	4606      	mov	r6, r0
 80015a6:	db01      	blt.n	80015ac <_malloc_r+0x1c>
 80015a8:	42a9      	cmp	r1, r5
 80015aa:	d904      	bls.n	80015b6 <_malloc_r+0x26>
 80015ac:	230c      	movs	r3, #12
 80015ae:	6033      	str	r3, [r6, #0]
 80015b0:	2000      	movs	r0, #0
 80015b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800168c <_malloc_r+0xfc>
 80015ba:	f000 f869 	bl	8001690 <__malloc_lock>
 80015be:	f8d8 3000 	ldr.w	r3, [r8]
 80015c2:	461c      	mov	r4, r3
 80015c4:	bb44      	cbnz	r4, 8001618 <_malloc_r+0x88>
 80015c6:	4629      	mov	r1, r5
 80015c8:	4630      	mov	r0, r6
 80015ca:	f7ff ffbf 	bl	800154c <sbrk_aligned>
 80015ce:	1c43      	adds	r3, r0, #1
 80015d0:	4604      	mov	r4, r0
 80015d2:	d158      	bne.n	8001686 <_malloc_r+0xf6>
 80015d4:	f8d8 4000 	ldr.w	r4, [r8]
 80015d8:	4627      	mov	r7, r4
 80015da:	2f00      	cmp	r7, #0
 80015dc:	d143      	bne.n	8001666 <_malloc_r+0xd6>
 80015de:	2c00      	cmp	r4, #0
 80015e0:	d04b      	beq.n	800167a <_malloc_r+0xea>
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	4639      	mov	r1, r7
 80015e6:	4630      	mov	r0, r6
 80015e8:	eb04 0903 	add.w	r9, r4, r3
 80015ec:	f000 fc5a 	bl	8001ea4 <_sbrk_r>
 80015f0:	4581      	cmp	r9, r0
 80015f2:	d142      	bne.n	800167a <_malloc_r+0xea>
 80015f4:	6821      	ldr	r1, [r4, #0]
 80015f6:	1a6d      	subs	r5, r5, r1
 80015f8:	4629      	mov	r1, r5
 80015fa:	4630      	mov	r0, r6
 80015fc:	f7ff ffa6 	bl	800154c <sbrk_aligned>
 8001600:	3001      	adds	r0, #1
 8001602:	d03a      	beq.n	800167a <_malloc_r+0xea>
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	442b      	add	r3, r5
 8001608:	6023      	str	r3, [r4, #0]
 800160a:	f8d8 3000 	ldr.w	r3, [r8]
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	bb62      	cbnz	r2, 800166c <_malloc_r+0xdc>
 8001612:	f8c8 7000 	str.w	r7, [r8]
 8001616:	e00f      	b.n	8001638 <_malloc_r+0xa8>
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	1b52      	subs	r2, r2, r5
 800161c:	d420      	bmi.n	8001660 <_malloc_r+0xd0>
 800161e:	2a0b      	cmp	r2, #11
 8001620:	d917      	bls.n	8001652 <_malloc_r+0xc2>
 8001622:	1961      	adds	r1, r4, r5
 8001624:	42a3      	cmp	r3, r4
 8001626:	6025      	str	r5, [r4, #0]
 8001628:	bf18      	it	ne
 800162a:	6059      	strne	r1, [r3, #4]
 800162c:	6863      	ldr	r3, [r4, #4]
 800162e:	bf08      	it	eq
 8001630:	f8c8 1000 	streq.w	r1, [r8]
 8001634:	5162      	str	r2, [r4, r5]
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	4630      	mov	r0, r6
 800163a:	f000 f82f 	bl	800169c <__malloc_unlock>
 800163e:	f104 000b 	add.w	r0, r4, #11
 8001642:	1d23      	adds	r3, r4, #4
 8001644:	f020 0007 	bic.w	r0, r0, #7
 8001648:	1ac2      	subs	r2, r0, r3
 800164a:	bf1c      	itt	ne
 800164c:	1a1b      	subne	r3, r3, r0
 800164e:	50a3      	strne	r3, [r4, r2]
 8001650:	e7af      	b.n	80015b2 <_malloc_r+0x22>
 8001652:	6862      	ldr	r2, [r4, #4]
 8001654:	42a3      	cmp	r3, r4
 8001656:	bf0c      	ite	eq
 8001658:	f8c8 2000 	streq.w	r2, [r8]
 800165c:	605a      	strne	r2, [r3, #4]
 800165e:	e7eb      	b.n	8001638 <_malloc_r+0xa8>
 8001660:	4623      	mov	r3, r4
 8001662:	6864      	ldr	r4, [r4, #4]
 8001664:	e7ae      	b.n	80015c4 <_malloc_r+0x34>
 8001666:	463c      	mov	r4, r7
 8001668:	687f      	ldr	r7, [r7, #4]
 800166a:	e7b6      	b.n	80015da <_malloc_r+0x4a>
 800166c:	461a      	mov	r2, r3
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	42a3      	cmp	r3, r4
 8001672:	d1fb      	bne.n	800166c <_malloc_r+0xdc>
 8001674:	2300      	movs	r3, #0
 8001676:	6053      	str	r3, [r2, #4]
 8001678:	e7de      	b.n	8001638 <_malloc_r+0xa8>
 800167a:	230c      	movs	r3, #12
 800167c:	6033      	str	r3, [r6, #0]
 800167e:	4630      	mov	r0, r6
 8001680:	f000 f80c 	bl	800169c <__malloc_unlock>
 8001684:	e794      	b.n	80015b0 <_malloc_r+0x20>
 8001686:	6005      	str	r5, [r0, #0]
 8001688:	e7d6      	b.n	8001638 <_malloc_r+0xa8>
 800168a:	bf00      	nop
 800168c:	200001f4 	.word	0x200001f4

08001690 <__malloc_lock>:
 8001690:	4801      	ldr	r0, [pc, #4]	@ (8001698 <__malloc_lock+0x8>)
 8001692:	f7ff bf0e 	b.w	80014b2 <__retarget_lock_acquire_recursive>
 8001696:	bf00      	nop
 8001698:	200001ec 	.word	0x200001ec

0800169c <__malloc_unlock>:
 800169c:	4801      	ldr	r0, [pc, #4]	@ (80016a4 <__malloc_unlock+0x8>)
 800169e:	f7ff bf09 	b.w	80014b4 <__retarget_lock_release_recursive>
 80016a2:	bf00      	nop
 80016a4:	200001ec 	.word	0x200001ec

080016a8 <__sfputc_r>:
 80016a8:	6893      	ldr	r3, [r2, #8]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	b410      	push	{r4}
 80016b0:	6093      	str	r3, [r2, #8]
 80016b2:	da08      	bge.n	80016c6 <__sfputc_r+0x1e>
 80016b4:	6994      	ldr	r4, [r2, #24]
 80016b6:	42a3      	cmp	r3, r4
 80016b8:	db01      	blt.n	80016be <__sfputc_r+0x16>
 80016ba:	290a      	cmp	r1, #10
 80016bc:	d103      	bne.n	80016c6 <__sfputc_r+0x1e>
 80016be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016c2:	f7ff bde8 	b.w	8001296 <__swbuf_r>
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	1c58      	adds	r0, r3, #1
 80016ca:	6010      	str	r0, [r2, #0]
 80016cc:	7019      	strb	r1, [r3, #0]
 80016ce:	4608      	mov	r0, r1
 80016d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <__sfputs_r>:
 80016d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d8:	4606      	mov	r6, r0
 80016da:	460f      	mov	r7, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	18d5      	adds	r5, r2, r3
 80016e0:	42ac      	cmp	r4, r5
 80016e2:	d101      	bne.n	80016e8 <__sfputs_r+0x12>
 80016e4:	2000      	movs	r0, #0
 80016e6:	e007      	b.n	80016f8 <__sfputs_r+0x22>
 80016e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016ec:	463a      	mov	r2, r7
 80016ee:	4630      	mov	r0, r6
 80016f0:	f7ff ffda 	bl	80016a8 <__sfputc_r>
 80016f4:	1c43      	adds	r3, r0, #1
 80016f6:	d1f3      	bne.n	80016e0 <__sfputs_r+0xa>
 80016f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016fc <_vfiprintf_r>:
 80016fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001700:	460d      	mov	r5, r1
 8001702:	b09d      	sub	sp, #116	@ 0x74
 8001704:	4614      	mov	r4, r2
 8001706:	4698      	mov	r8, r3
 8001708:	4606      	mov	r6, r0
 800170a:	b118      	cbz	r0, 8001714 <_vfiprintf_r+0x18>
 800170c:	6a03      	ldr	r3, [r0, #32]
 800170e:	b90b      	cbnz	r3, 8001714 <_vfiprintf_r+0x18>
 8001710:	f7ff fcd8 	bl	80010c4 <__sinit>
 8001714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001716:	07d9      	lsls	r1, r3, #31
 8001718:	d405      	bmi.n	8001726 <_vfiprintf_r+0x2a>
 800171a:	89ab      	ldrh	r3, [r5, #12]
 800171c:	059a      	lsls	r2, r3, #22
 800171e:	d402      	bmi.n	8001726 <_vfiprintf_r+0x2a>
 8001720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001722:	f7ff fec6 	bl	80014b2 <__retarget_lock_acquire_recursive>
 8001726:	89ab      	ldrh	r3, [r5, #12]
 8001728:	071b      	lsls	r3, r3, #28
 800172a:	d501      	bpl.n	8001730 <_vfiprintf_r+0x34>
 800172c:	692b      	ldr	r3, [r5, #16]
 800172e:	b99b      	cbnz	r3, 8001758 <_vfiprintf_r+0x5c>
 8001730:	4629      	mov	r1, r5
 8001732:	4630      	mov	r0, r6
 8001734:	f7ff fdee 	bl	8001314 <__swsetup_r>
 8001738:	b170      	cbz	r0, 8001758 <_vfiprintf_r+0x5c>
 800173a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800173c:	07dc      	lsls	r4, r3, #31
 800173e:	d504      	bpl.n	800174a <_vfiprintf_r+0x4e>
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	b01d      	add	sp, #116	@ 0x74
 8001746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174a:	89ab      	ldrh	r3, [r5, #12]
 800174c:	0598      	lsls	r0, r3, #22
 800174e:	d4f7      	bmi.n	8001740 <_vfiprintf_r+0x44>
 8001750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001752:	f7ff feaf 	bl	80014b4 <__retarget_lock_release_recursive>
 8001756:	e7f3      	b.n	8001740 <_vfiprintf_r+0x44>
 8001758:	2300      	movs	r3, #0
 800175a:	9309      	str	r3, [sp, #36]	@ 0x24
 800175c:	2320      	movs	r3, #32
 800175e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001762:	f8cd 800c 	str.w	r8, [sp, #12]
 8001766:	2330      	movs	r3, #48	@ 0x30
 8001768:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001918 <_vfiprintf_r+0x21c>
 800176c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001770:	f04f 0901 	mov.w	r9, #1
 8001774:	4623      	mov	r3, r4
 8001776:	469a      	mov	sl, r3
 8001778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800177c:	b10a      	cbz	r2, 8001782 <_vfiprintf_r+0x86>
 800177e:	2a25      	cmp	r2, #37	@ 0x25
 8001780:	d1f9      	bne.n	8001776 <_vfiprintf_r+0x7a>
 8001782:	ebba 0b04 	subs.w	fp, sl, r4
 8001786:	d00b      	beq.n	80017a0 <_vfiprintf_r+0xa4>
 8001788:	465b      	mov	r3, fp
 800178a:	4622      	mov	r2, r4
 800178c:	4629      	mov	r1, r5
 800178e:	4630      	mov	r0, r6
 8001790:	f7ff ffa1 	bl	80016d6 <__sfputs_r>
 8001794:	3001      	adds	r0, #1
 8001796:	f000 80a7 	beq.w	80018e8 <_vfiprintf_r+0x1ec>
 800179a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800179c:	445a      	add	r2, fp
 800179e:	9209      	str	r2, [sp, #36]	@ 0x24
 80017a0:	f89a 3000 	ldrb.w	r3, [sl]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 809f 	beq.w	80018e8 <_vfiprintf_r+0x1ec>
 80017aa:	2300      	movs	r3, #0
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017b4:	f10a 0a01 	add.w	sl, sl, #1
 80017b8:	9304      	str	r3, [sp, #16]
 80017ba:	9307      	str	r3, [sp, #28]
 80017bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80017c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80017c2:	4654      	mov	r4, sl
 80017c4:	2205      	movs	r2, #5
 80017c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ca:	4853      	ldr	r0, [pc, #332]	@ (8001918 <_vfiprintf_r+0x21c>)
 80017cc:	f7fe fd00 	bl	80001d0 <memchr>
 80017d0:	9a04      	ldr	r2, [sp, #16]
 80017d2:	b9d8      	cbnz	r0, 800180c <_vfiprintf_r+0x110>
 80017d4:	06d1      	lsls	r1, r2, #27
 80017d6:	bf44      	itt	mi
 80017d8:	2320      	movmi	r3, #32
 80017da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017de:	0713      	lsls	r3, r2, #28
 80017e0:	bf44      	itt	mi
 80017e2:	232b      	movmi	r3, #43	@ 0x2b
 80017e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80017e8:	f89a 3000 	ldrb.w	r3, [sl]
 80017ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80017ee:	d015      	beq.n	800181c <_vfiprintf_r+0x120>
 80017f0:	9a07      	ldr	r2, [sp, #28]
 80017f2:	4654      	mov	r4, sl
 80017f4:	2000      	movs	r0, #0
 80017f6:	f04f 0c0a 	mov.w	ip, #10
 80017fa:	4621      	mov	r1, r4
 80017fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001800:	3b30      	subs	r3, #48	@ 0x30
 8001802:	2b09      	cmp	r3, #9
 8001804:	d94b      	bls.n	800189e <_vfiprintf_r+0x1a2>
 8001806:	b1b0      	cbz	r0, 8001836 <_vfiprintf_r+0x13a>
 8001808:	9207      	str	r2, [sp, #28]
 800180a:	e014      	b.n	8001836 <_vfiprintf_r+0x13a>
 800180c:	eba0 0308 	sub.w	r3, r0, r8
 8001810:	fa09 f303 	lsl.w	r3, r9, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	9304      	str	r3, [sp, #16]
 8001818:	46a2      	mov	sl, r4
 800181a:	e7d2      	b.n	80017c2 <_vfiprintf_r+0xc6>
 800181c:	9b03      	ldr	r3, [sp, #12]
 800181e:	1d19      	adds	r1, r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	9103      	str	r1, [sp, #12]
 8001824:	2b00      	cmp	r3, #0
 8001826:	bfbb      	ittet	lt
 8001828:	425b      	neglt	r3, r3
 800182a:	f042 0202 	orrlt.w	r2, r2, #2
 800182e:	9307      	strge	r3, [sp, #28]
 8001830:	9307      	strlt	r3, [sp, #28]
 8001832:	bfb8      	it	lt
 8001834:	9204      	strlt	r2, [sp, #16]
 8001836:	7823      	ldrb	r3, [r4, #0]
 8001838:	2b2e      	cmp	r3, #46	@ 0x2e
 800183a:	d10a      	bne.n	8001852 <_vfiprintf_r+0x156>
 800183c:	7863      	ldrb	r3, [r4, #1]
 800183e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001840:	d132      	bne.n	80018a8 <_vfiprintf_r+0x1ac>
 8001842:	9b03      	ldr	r3, [sp, #12]
 8001844:	1d1a      	adds	r2, r3, #4
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	9203      	str	r2, [sp, #12]
 800184a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800184e:	3402      	adds	r4, #2
 8001850:	9305      	str	r3, [sp, #20]
 8001852:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001928 <_vfiprintf_r+0x22c>
 8001856:	7821      	ldrb	r1, [r4, #0]
 8001858:	2203      	movs	r2, #3
 800185a:	4650      	mov	r0, sl
 800185c:	f7fe fcb8 	bl	80001d0 <memchr>
 8001860:	b138      	cbz	r0, 8001872 <_vfiprintf_r+0x176>
 8001862:	9b04      	ldr	r3, [sp, #16]
 8001864:	eba0 000a 	sub.w	r0, r0, sl
 8001868:	2240      	movs	r2, #64	@ 0x40
 800186a:	4082      	lsls	r2, r0
 800186c:	4313      	orrs	r3, r2
 800186e:	3401      	adds	r4, #1
 8001870:	9304      	str	r3, [sp, #16]
 8001872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001876:	4829      	ldr	r0, [pc, #164]	@ (800191c <_vfiprintf_r+0x220>)
 8001878:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800187c:	2206      	movs	r2, #6
 800187e:	f7fe fca7 	bl	80001d0 <memchr>
 8001882:	2800      	cmp	r0, #0
 8001884:	d03f      	beq.n	8001906 <_vfiprintf_r+0x20a>
 8001886:	4b26      	ldr	r3, [pc, #152]	@ (8001920 <_vfiprintf_r+0x224>)
 8001888:	bb1b      	cbnz	r3, 80018d2 <_vfiprintf_r+0x1d6>
 800188a:	9b03      	ldr	r3, [sp, #12]
 800188c:	3307      	adds	r3, #7
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	3308      	adds	r3, #8
 8001894:	9303      	str	r3, [sp, #12]
 8001896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001898:	443b      	add	r3, r7
 800189a:	9309      	str	r3, [sp, #36]	@ 0x24
 800189c:	e76a      	b.n	8001774 <_vfiprintf_r+0x78>
 800189e:	fb0c 3202 	mla	r2, ip, r2, r3
 80018a2:	460c      	mov	r4, r1
 80018a4:	2001      	movs	r0, #1
 80018a6:	e7a8      	b.n	80017fa <_vfiprintf_r+0xfe>
 80018a8:	2300      	movs	r3, #0
 80018aa:	3401      	adds	r4, #1
 80018ac:	9305      	str	r3, [sp, #20]
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 0c0a 	mov.w	ip, #10
 80018b4:	4620      	mov	r0, r4
 80018b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018ba:	3a30      	subs	r2, #48	@ 0x30
 80018bc:	2a09      	cmp	r2, #9
 80018be:	d903      	bls.n	80018c8 <_vfiprintf_r+0x1cc>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0c6      	beq.n	8001852 <_vfiprintf_r+0x156>
 80018c4:	9105      	str	r1, [sp, #20]
 80018c6:	e7c4      	b.n	8001852 <_vfiprintf_r+0x156>
 80018c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80018cc:	4604      	mov	r4, r0
 80018ce:	2301      	movs	r3, #1
 80018d0:	e7f0      	b.n	80018b4 <_vfiprintf_r+0x1b8>
 80018d2:	ab03      	add	r3, sp, #12
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	462a      	mov	r2, r5
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <_vfiprintf_r+0x228>)
 80018da:	a904      	add	r1, sp, #16
 80018dc:	4630      	mov	r0, r6
 80018de:	f3af 8000 	nop.w
 80018e2:	4607      	mov	r7, r0
 80018e4:	1c78      	adds	r0, r7, #1
 80018e6:	d1d6      	bne.n	8001896 <_vfiprintf_r+0x19a>
 80018e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018ea:	07d9      	lsls	r1, r3, #31
 80018ec:	d405      	bmi.n	80018fa <_vfiprintf_r+0x1fe>
 80018ee:	89ab      	ldrh	r3, [r5, #12]
 80018f0:	059a      	lsls	r2, r3, #22
 80018f2:	d402      	bmi.n	80018fa <_vfiprintf_r+0x1fe>
 80018f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80018f6:	f7ff fddd 	bl	80014b4 <__retarget_lock_release_recursive>
 80018fa:	89ab      	ldrh	r3, [r5, #12]
 80018fc:	065b      	lsls	r3, r3, #25
 80018fe:	f53f af1f 	bmi.w	8001740 <_vfiprintf_r+0x44>
 8001902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001904:	e71e      	b.n	8001744 <_vfiprintf_r+0x48>
 8001906:	ab03      	add	r3, sp, #12
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	462a      	mov	r2, r5
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <_vfiprintf_r+0x228>)
 800190e:	a904      	add	r1, sp, #16
 8001910:	4630      	mov	r0, r6
 8001912:	f000 f879 	bl	8001a08 <_printf_i>
 8001916:	e7e4      	b.n	80018e2 <_vfiprintf_r+0x1e6>
 8001918:	08002477 	.word	0x08002477
 800191c:	08002481 	.word	0x08002481
 8001920:	00000000 	.word	0x00000000
 8001924:	080016d7 	.word	0x080016d7
 8001928:	0800247d 	.word	0x0800247d

0800192c <_printf_common>:
 800192c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001930:	4616      	mov	r6, r2
 8001932:	4698      	mov	r8, r3
 8001934:	688a      	ldr	r2, [r1, #8]
 8001936:	690b      	ldr	r3, [r1, #16]
 8001938:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800193c:	4293      	cmp	r3, r2
 800193e:	bfb8      	it	lt
 8001940:	4613      	movlt	r3, r2
 8001942:	6033      	str	r3, [r6, #0]
 8001944:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001948:	4607      	mov	r7, r0
 800194a:	460c      	mov	r4, r1
 800194c:	b10a      	cbz	r2, 8001952 <_printf_common+0x26>
 800194e:	3301      	adds	r3, #1
 8001950:	6033      	str	r3, [r6, #0]
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	0699      	lsls	r1, r3, #26
 8001956:	bf42      	ittt	mi
 8001958:	6833      	ldrmi	r3, [r6, #0]
 800195a:	3302      	addmi	r3, #2
 800195c:	6033      	strmi	r3, [r6, #0]
 800195e:	6825      	ldr	r5, [r4, #0]
 8001960:	f015 0506 	ands.w	r5, r5, #6
 8001964:	d106      	bne.n	8001974 <_printf_common+0x48>
 8001966:	f104 0a19 	add.w	sl, r4, #25
 800196a:	68e3      	ldr	r3, [r4, #12]
 800196c:	6832      	ldr	r2, [r6, #0]
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	42ab      	cmp	r3, r5
 8001972:	dc26      	bgt.n	80019c2 <_printf_common+0x96>
 8001974:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	3b00      	subs	r3, #0
 800197c:	bf18      	it	ne
 800197e:	2301      	movne	r3, #1
 8001980:	0692      	lsls	r2, r2, #26
 8001982:	d42b      	bmi.n	80019dc <_printf_common+0xb0>
 8001984:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001988:	4641      	mov	r1, r8
 800198a:	4638      	mov	r0, r7
 800198c:	47c8      	blx	r9
 800198e:	3001      	adds	r0, #1
 8001990:	d01e      	beq.n	80019d0 <_printf_common+0xa4>
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	6922      	ldr	r2, [r4, #16]
 8001996:	f003 0306 	and.w	r3, r3, #6
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf02      	ittt	eq
 800199e:	68e5      	ldreq	r5, [r4, #12]
 80019a0:	6833      	ldreq	r3, [r6, #0]
 80019a2:	1aed      	subeq	r5, r5, r3
 80019a4:	68a3      	ldr	r3, [r4, #8]
 80019a6:	bf0c      	ite	eq
 80019a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019ac:	2500      	movne	r5, #0
 80019ae:	4293      	cmp	r3, r2
 80019b0:	bfc4      	itt	gt
 80019b2:	1a9b      	subgt	r3, r3, r2
 80019b4:	18ed      	addgt	r5, r5, r3
 80019b6:	2600      	movs	r6, #0
 80019b8:	341a      	adds	r4, #26
 80019ba:	42b5      	cmp	r5, r6
 80019bc:	d11a      	bne.n	80019f4 <_printf_common+0xc8>
 80019be:	2000      	movs	r0, #0
 80019c0:	e008      	b.n	80019d4 <_printf_common+0xa8>
 80019c2:	2301      	movs	r3, #1
 80019c4:	4652      	mov	r2, sl
 80019c6:	4641      	mov	r1, r8
 80019c8:	4638      	mov	r0, r7
 80019ca:	47c8      	blx	r9
 80019cc:	3001      	adds	r0, #1
 80019ce:	d103      	bne.n	80019d8 <_printf_common+0xac>
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019d8:	3501      	adds	r5, #1
 80019da:	e7c6      	b.n	800196a <_printf_common+0x3e>
 80019dc:	18e1      	adds	r1, r4, r3
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	2030      	movs	r0, #48	@ 0x30
 80019e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80019e6:	4422      	add	r2, r4
 80019e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80019ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80019f0:	3302      	adds	r3, #2
 80019f2:	e7c7      	b.n	8001984 <_printf_common+0x58>
 80019f4:	2301      	movs	r3, #1
 80019f6:	4622      	mov	r2, r4
 80019f8:	4641      	mov	r1, r8
 80019fa:	4638      	mov	r0, r7
 80019fc:	47c8      	blx	r9
 80019fe:	3001      	adds	r0, #1
 8001a00:	d0e6      	beq.n	80019d0 <_printf_common+0xa4>
 8001a02:	3601      	adds	r6, #1
 8001a04:	e7d9      	b.n	80019ba <_printf_common+0x8e>
	...

08001a08 <_printf_i>:
 8001a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a0c:	7e0f      	ldrb	r7, [r1, #24]
 8001a0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a10:	2f78      	cmp	r7, #120	@ 0x78
 8001a12:	4691      	mov	r9, r2
 8001a14:	4680      	mov	r8, r0
 8001a16:	460c      	mov	r4, r1
 8001a18:	469a      	mov	sl, r3
 8001a1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a1e:	d807      	bhi.n	8001a30 <_printf_i+0x28>
 8001a20:	2f62      	cmp	r7, #98	@ 0x62
 8001a22:	d80a      	bhi.n	8001a3a <_printf_i+0x32>
 8001a24:	2f00      	cmp	r7, #0
 8001a26:	f000 80d1 	beq.w	8001bcc <_printf_i+0x1c4>
 8001a2a:	2f58      	cmp	r7, #88	@ 0x58
 8001a2c:	f000 80b8 	beq.w	8001ba0 <_printf_i+0x198>
 8001a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a38:	e03a      	b.n	8001ab0 <_printf_i+0xa8>
 8001a3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a3e:	2b15      	cmp	r3, #21
 8001a40:	d8f6      	bhi.n	8001a30 <_printf_i+0x28>
 8001a42:	a101      	add	r1, pc, #4	@ (adr r1, 8001a48 <_printf_i+0x40>)
 8001a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a48:	08001aa1 	.word	0x08001aa1
 8001a4c:	08001ab5 	.word	0x08001ab5
 8001a50:	08001a31 	.word	0x08001a31
 8001a54:	08001a31 	.word	0x08001a31
 8001a58:	08001a31 	.word	0x08001a31
 8001a5c:	08001a31 	.word	0x08001a31
 8001a60:	08001ab5 	.word	0x08001ab5
 8001a64:	08001a31 	.word	0x08001a31
 8001a68:	08001a31 	.word	0x08001a31
 8001a6c:	08001a31 	.word	0x08001a31
 8001a70:	08001a31 	.word	0x08001a31
 8001a74:	08001bb3 	.word	0x08001bb3
 8001a78:	08001adf 	.word	0x08001adf
 8001a7c:	08001b6d 	.word	0x08001b6d
 8001a80:	08001a31 	.word	0x08001a31
 8001a84:	08001a31 	.word	0x08001a31
 8001a88:	08001bd5 	.word	0x08001bd5
 8001a8c:	08001a31 	.word	0x08001a31
 8001a90:	08001adf 	.word	0x08001adf
 8001a94:	08001a31 	.word	0x08001a31
 8001a98:	08001a31 	.word	0x08001a31
 8001a9c:	08001b75 	.word	0x08001b75
 8001aa0:	6833      	ldr	r3, [r6, #0]
 8001aa2:	1d1a      	adds	r2, r3, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6032      	str	r2, [r6, #0]
 8001aa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001aac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e09c      	b.n	8001bee <_printf_i+0x1e6>
 8001ab4:	6833      	ldr	r3, [r6, #0]
 8001ab6:	6820      	ldr	r0, [r4, #0]
 8001ab8:	1d19      	adds	r1, r3, #4
 8001aba:	6031      	str	r1, [r6, #0]
 8001abc:	0606      	lsls	r6, r0, #24
 8001abe:	d501      	bpl.n	8001ac4 <_printf_i+0xbc>
 8001ac0:	681d      	ldr	r5, [r3, #0]
 8001ac2:	e003      	b.n	8001acc <_printf_i+0xc4>
 8001ac4:	0645      	lsls	r5, r0, #25
 8001ac6:	d5fb      	bpl.n	8001ac0 <_printf_i+0xb8>
 8001ac8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	da03      	bge.n	8001ad8 <_printf_i+0xd0>
 8001ad0:	232d      	movs	r3, #45	@ 0x2d
 8001ad2:	426d      	negs	r5, r5
 8001ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ad8:	4858      	ldr	r0, [pc, #352]	@ (8001c3c <_printf_i+0x234>)
 8001ada:	230a      	movs	r3, #10
 8001adc:	e011      	b.n	8001b02 <_printf_i+0xfa>
 8001ade:	6821      	ldr	r1, [r4, #0]
 8001ae0:	6833      	ldr	r3, [r6, #0]
 8001ae2:	0608      	lsls	r0, r1, #24
 8001ae4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ae8:	d402      	bmi.n	8001af0 <_printf_i+0xe8>
 8001aea:	0649      	lsls	r1, r1, #25
 8001aec:	bf48      	it	mi
 8001aee:	b2ad      	uxthmi	r5, r5
 8001af0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001af2:	4852      	ldr	r0, [pc, #328]	@ (8001c3c <_printf_i+0x234>)
 8001af4:	6033      	str	r3, [r6, #0]
 8001af6:	bf14      	ite	ne
 8001af8:	230a      	movne	r3, #10
 8001afa:	2308      	moveq	r3, #8
 8001afc:	2100      	movs	r1, #0
 8001afe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b02:	6866      	ldr	r6, [r4, #4]
 8001b04:	60a6      	str	r6, [r4, #8]
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	db05      	blt.n	8001b16 <_printf_i+0x10e>
 8001b0a:	6821      	ldr	r1, [r4, #0]
 8001b0c:	432e      	orrs	r6, r5
 8001b0e:	f021 0104 	bic.w	r1, r1, #4
 8001b12:	6021      	str	r1, [r4, #0]
 8001b14:	d04b      	beq.n	8001bae <_printf_i+0x1a6>
 8001b16:	4616      	mov	r6, r2
 8001b18:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b1c:	fb03 5711 	mls	r7, r3, r1, r5
 8001b20:	5dc7      	ldrb	r7, [r0, r7]
 8001b22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b26:	462f      	mov	r7, r5
 8001b28:	42bb      	cmp	r3, r7
 8001b2a:	460d      	mov	r5, r1
 8001b2c:	d9f4      	bls.n	8001b18 <_printf_i+0x110>
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d10b      	bne.n	8001b4a <_printf_i+0x142>
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	07df      	lsls	r7, r3, #31
 8001b36:	d508      	bpl.n	8001b4a <_printf_i+0x142>
 8001b38:	6923      	ldr	r3, [r4, #16]
 8001b3a:	6861      	ldr	r1, [r4, #4]
 8001b3c:	4299      	cmp	r1, r3
 8001b3e:	bfde      	ittt	le
 8001b40:	2330      	movle	r3, #48	@ 0x30
 8001b42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001b4a:	1b92      	subs	r2, r2, r6
 8001b4c:	6122      	str	r2, [r4, #16]
 8001b4e:	f8cd a000 	str.w	sl, [sp]
 8001b52:	464b      	mov	r3, r9
 8001b54:	aa03      	add	r2, sp, #12
 8001b56:	4621      	mov	r1, r4
 8001b58:	4640      	mov	r0, r8
 8001b5a:	f7ff fee7 	bl	800192c <_printf_common>
 8001b5e:	3001      	adds	r0, #1
 8001b60:	d14a      	bne.n	8001bf8 <_printf_i+0x1f0>
 8001b62:	f04f 30ff 	mov.w	r0, #4294967295
 8001b66:	b004      	add	sp, #16
 8001b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	6023      	str	r3, [r4, #0]
 8001b74:	4832      	ldr	r0, [pc, #200]	@ (8001c40 <_printf_i+0x238>)
 8001b76:	2778      	movs	r7, #120	@ 0x78
 8001b78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	6831      	ldr	r1, [r6, #0]
 8001b80:	061f      	lsls	r7, r3, #24
 8001b82:	f851 5b04 	ldr.w	r5, [r1], #4
 8001b86:	d402      	bmi.n	8001b8e <_printf_i+0x186>
 8001b88:	065f      	lsls	r7, r3, #25
 8001b8a:	bf48      	it	mi
 8001b8c:	b2ad      	uxthmi	r5, r5
 8001b8e:	6031      	str	r1, [r6, #0]
 8001b90:	07d9      	lsls	r1, r3, #31
 8001b92:	bf44      	itt	mi
 8001b94:	f043 0320 	orrmi.w	r3, r3, #32
 8001b98:	6023      	strmi	r3, [r4, #0]
 8001b9a:	b11d      	cbz	r5, 8001ba4 <_printf_i+0x19c>
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	e7ad      	b.n	8001afc <_printf_i+0xf4>
 8001ba0:	4826      	ldr	r0, [pc, #152]	@ (8001c3c <_printf_i+0x234>)
 8001ba2:	e7e9      	b.n	8001b78 <_printf_i+0x170>
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	f023 0320 	bic.w	r3, r3, #32
 8001baa:	6023      	str	r3, [r4, #0]
 8001bac:	e7f6      	b.n	8001b9c <_printf_i+0x194>
 8001bae:	4616      	mov	r6, r2
 8001bb0:	e7bd      	b.n	8001b2e <_printf_i+0x126>
 8001bb2:	6833      	ldr	r3, [r6, #0]
 8001bb4:	6825      	ldr	r5, [r4, #0]
 8001bb6:	6961      	ldr	r1, [r4, #20]
 8001bb8:	1d18      	adds	r0, r3, #4
 8001bba:	6030      	str	r0, [r6, #0]
 8001bbc:	062e      	lsls	r6, r5, #24
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	d501      	bpl.n	8001bc6 <_printf_i+0x1be>
 8001bc2:	6019      	str	r1, [r3, #0]
 8001bc4:	e002      	b.n	8001bcc <_printf_i+0x1c4>
 8001bc6:	0668      	lsls	r0, r5, #25
 8001bc8:	d5fb      	bpl.n	8001bc2 <_printf_i+0x1ba>
 8001bca:	8019      	strh	r1, [r3, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	6123      	str	r3, [r4, #16]
 8001bd0:	4616      	mov	r6, r2
 8001bd2:	e7bc      	b.n	8001b4e <_printf_i+0x146>
 8001bd4:	6833      	ldr	r3, [r6, #0]
 8001bd6:	1d1a      	adds	r2, r3, #4
 8001bd8:	6032      	str	r2, [r6, #0]
 8001bda:	681e      	ldr	r6, [r3, #0]
 8001bdc:	6862      	ldr	r2, [r4, #4]
 8001bde:	2100      	movs	r1, #0
 8001be0:	4630      	mov	r0, r6
 8001be2:	f7fe faf5 	bl	80001d0 <memchr>
 8001be6:	b108      	cbz	r0, 8001bec <_printf_i+0x1e4>
 8001be8:	1b80      	subs	r0, r0, r6
 8001bea:	6060      	str	r0, [r4, #4]
 8001bec:	6863      	ldr	r3, [r4, #4]
 8001bee:	6123      	str	r3, [r4, #16]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bf6:	e7aa      	b.n	8001b4e <_printf_i+0x146>
 8001bf8:	6923      	ldr	r3, [r4, #16]
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	4640      	mov	r0, r8
 8001c00:	47d0      	blx	sl
 8001c02:	3001      	adds	r0, #1
 8001c04:	d0ad      	beq.n	8001b62 <_printf_i+0x15a>
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	079b      	lsls	r3, r3, #30
 8001c0a:	d413      	bmi.n	8001c34 <_printf_i+0x22c>
 8001c0c:	68e0      	ldr	r0, [r4, #12]
 8001c0e:	9b03      	ldr	r3, [sp, #12]
 8001c10:	4298      	cmp	r0, r3
 8001c12:	bfb8      	it	lt
 8001c14:	4618      	movlt	r0, r3
 8001c16:	e7a6      	b.n	8001b66 <_printf_i+0x15e>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	4632      	mov	r2, r6
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	4640      	mov	r0, r8
 8001c20:	47d0      	blx	sl
 8001c22:	3001      	adds	r0, #1
 8001c24:	d09d      	beq.n	8001b62 <_printf_i+0x15a>
 8001c26:	3501      	adds	r5, #1
 8001c28:	68e3      	ldr	r3, [r4, #12]
 8001c2a:	9903      	ldr	r1, [sp, #12]
 8001c2c:	1a5b      	subs	r3, r3, r1
 8001c2e:	42ab      	cmp	r3, r5
 8001c30:	dcf2      	bgt.n	8001c18 <_printf_i+0x210>
 8001c32:	e7eb      	b.n	8001c0c <_printf_i+0x204>
 8001c34:	2500      	movs	r5, #0
 8001c36:	f104 0619 	add.w	r6, r4, #25
 8001c3a:	e7f5      	b.n	8001c28 <_printf_i+0x220>
 8001c3c:	08002488 	.word	0x08002488
 8001c40:	08002499 	.word	0x08002499

08001c44 <__sflush_r>:
 8001c44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4c:	0716      	lsls	r6, r2, #28
 8001c4e:	4605      	mov	r5, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	d454      	bmi.n	8001cfe <__sflush_r+0xba>
 8001c54:	684b      	ldr	r3, [r1, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dc02      	bgt.n	8001c60 <__sflush_r+0x1c>
 8001c5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dd48      	ble.n	8001cf2 <__sflush_r+0xae>
 8001c60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c62:	2e00      	cmp	r6, #0
 8001c64:	d045      	beq.n	8001cf2 <__sflush_r+0xae>
 8001c66:	2300      	movs	r3, #0
 8001c68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c6c:	682f      	ldr	r7, [r5, #0]
 8001c6e:	6a21      	ldr	r1, [r4, #32]
 8001c70:	602b      	str	r3, [r5, #0]
 8001c72:	d030      	beq.n	8001cd6 <__sflush_r+0x92>
 8001c74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c76:	89a3      	ldrh	r3, [r4, #12]
 8001c78:	0759      	lsls	r1, r3, #29
 8001c7a:	d505      	bpl.n	8001c88 <__sflush_r+0x44>
 8001c7c:	6863      	ldr	r3, [r4, #4]
 8001c7e:	1ad2      	subs	r2, r2, r3
 8001c80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c82:	b10b      	cbz	r3, 8001c88 <__sflush_r+0x44>
 8001c84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c8c:	6a21      	ldr	r1, [r4, #32]
 8001c8e:	4628      	mov	r0, r5
 8001c90:	47b0      	blx	r6
 8001c92:	1c43      	adds	r3, r0, #1
 8001c94:	89a3      	ldrh	r3, [r4, #12]
 8001c96:	d106      	bne.n	8001ca6 <__sflush_r+0x62>
 8001c98:	6829      	ldr	r1, [r5, #0]
 8001c9a:	291d      	cmp	r1, #29
 8001c9c:	d82b      	bhi.n	8001cf6 <__sflush_r+0xb2>
 8001c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d48 <__sflush_r+0x104>)
 8001ca0:	40ca      	lsrs	r2, r1
 8001ca2:	07d6      	lsls	r6, r2, #31
 8001ca4:	d527      	bpl.n	8001cf6 <__sflush_r+0xb2>
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	6062      	str	r2, [r4, #4]
 8001caa:	04d9      	lsls	r1, r3, #19
 8001cac:	6922      	ldr	r2, [r4, #16]
 8001cae:	6022      	str	r2, [r4, #0]
 8001cb0:	d504      	bpl.n	8001cbc <__sflush_r+0x78>
 8001cb2:	1c42      	adds	r2, r0, #1
 8001cb4:	d101      	bne.n	8001cba <__sflush_r+0x76>
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	b903      	cbnz	r3, 8001cbc <__sflush_r+0x78>
 8001cba:	6560      	str	r0, [r4, #84]	@ 0x54
 8001cbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001cbe:	602f      	str	r7, [r5, #0]
 8001cc0:	b1b9      	cbz	r1, 8001cf2 <__sflush_r+0xae>
 8001cc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cc6:	4299      	cmp	r1, r3
 8001cc8:	d002      	beq.n	8001cd0 <__sflush_r+0x8c>
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f7ff fbf4 	bl	80014b8 <_free_r>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cd4:	e00d      	b.n	8001cf2 <__sflush_r+0xae>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4628      	mov	r0, r5
 8001cda:	47b0      	blx	r6
 8001cdc:	4602      	mov	r2, r0
 8001cde:	1c50      	adds	r0, r2, #1
 8001ce0:	d1c9      	bne.n	8001c76 <__sflush_r+0x32>
 8001ce2:	682b      	ldr	r3, [r5, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0c6      	beq.n	8001c76 <__sflush_r+0x32>
 8001ce8:	2b1d      	cmp	r3, #29
 8001cea:	d001      	beq.n	8001cf0 <__sflush_r+0xac>
 8001cec:	2b16      	cmp	r3, #22
 8001cee:	d11e      	bne.n	8001d2e <__sflush_r+0xea>
 8001cf0:	602f      	str	r7, [r5, #0]
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	e022      	b.n	8001d3c <__sflush_r+0xf8>
 8001cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	e01b      	b.n	8001d36 <__sflush_r+0xf2>
 8001cfe:	690f      	ldr	r7, [r1, #16]
 8001d00:	2f00      	cmp	r7, #0
 8001d02:	d0f6      	beq.n	8001cf2 <__sflush_r+0xae>
 8001d04:	0793      	lsls	r3, r2, #30
 8001d06:	680e      	ldr	r6, [r1, #0]
 8001d08:	bf08      	it	eq
 8001d0a:	694b      	ldreq	r3, [r1, #20]
 8001d0c:	600f      	str	r7, [r1, #0]
 8001d0e:	bf18      	it	ne
 8001d10:	2300      	movne	r3, #0
 8001d12:	eba6 0807 	sub.w	r8, r6, r7
 8001d16:	608b      	str	r3, [r1, #8]
 8001d18:	f1b8 0f00 	cmp.w	r8, #0
 8001d1c:	dde9      	ble.n	8001cf2 <__sflush_r+0xae>
 8001d1e:	6a21      	ldr	r1, [r4, #32]
 8001d20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001d22:	4643      	mov	r3, r8
 8001d24:	463a      	mov	r2, r7
 8001d26:	4628      	mov	r0, r5
 8001d28:	47b0      	blx	r6
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	dc08      	bgt.n	8001d40 <__sflush_r+0xfc>
 8001d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d36:	81a3      	strh	r3, [r4, #12]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d40:	4407      	add	r7, r0
 8001d42:	eba8 0800 	sub.w	r8, r8, r0
 8001d46:	e7e7      	b.n	8001d18 <__sflush_r+0xd4>
 8001d48:	20400001 	.word	0x20400001

08001d4c <_fflush_r>:
 8001d4c:	b538      	push	{r3, r4, r5, lr}
 8001d4e:	690b      	ldr	r3, [r1, #16]
 8001d50:	4605      	mov	r5, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	b913      	cbnz	r3, 8001d5c <_fflush_r+0x10>
 8001d56:	2500      	movs	r5, #0
 8001d58:	4628      	mov	r0, r5
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	b118      	cbz	r0, 8001d66 <_fflush_r+0x1a>
 8001d5e:	6a03      	ldr	r3, [r0, #32]
 8001d60:	b90b      	cbnz	r3, 8001d66 <_fflush_r+0x1a>
 8001d62:	f7ff f9af 	bl	80010c4 <__sinit>
 8001d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f3      	beq.n	8001d56 <_fflush_r+0xa>
 8001d6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d70:	07d0      	lsls	r0, r2, #31
 8001d72:	d404      	bmi.n	8001d7e <_fflush_r+0x32>
 8001d74:	0599      	lsls	r1, r3, #22
 8001d76:	d402      	bmi.n	8001d7e <_fflush_r+0x32>
 8001d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d7a:	f7ff fb9a 	bl	80014b2 <__retarget_lock_acquire_recursive>
 8001d7e:	4628      	mov	r0, r5
 8001d80:	4621      	mov	r1, r4
 8001d82:	f7ff ff5f 	bl	8001c44 <__sflush_r>
 8001d86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d88:	07da      	lsls	r2, r3, #31
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	d4e4      	bmi.n	8001d58 <_fflush_r+0xc>
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	059b      	lsls	r3, r3, #22
 8001d92:	d4e1      	bmi.n	8001d58 <_fflush_r+0xc>
 8001d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d96:	f7ff fb8d 	bl	80014b4 <__retarget_lock_release_recursive>
 8001d9a:	e7dd      	b.n	8001d58 <_fflush_r+0xc>

08001d9c <__swhatbuf_r>:
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	460c      	mov	r4, r1
 8001da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da4:	2900      	cmp	r1, #0
 8001da6:	b096      	sub	sp, #88	@ 0x58
 8001da8:	4615      	mov	r5, r2
 8001daa:	461e      	mov	r6, r3
 8001dac:	da0d      	bge.n	8001dca <__swhatbuf_r+0x2e>
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2340      	movne	r3, #64	@ 0x40
 8001dbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	6031      	str	r1, [r6, #0]
 8001dc4:	602b      	str	r3, [r5, #0]
 8001dc6:	b016      	add	sp, #88	@ 0x58
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
 8001dca:	466a      	mov	r2, sp
 8001dcc:	f000 f848 	bl	8001e60 <_fstat_r>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	dbec      	blt.n	8001dae <__swhatbuf_r+0x12>
 8001dd4:	9901      	ldr	r1, [sp, #4]
 8001dd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001dda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001dde:	4259      	negs	r1, r3
 8001de0:	4159      	adcs	r1, r3
 8001de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001de6:	e7eb      	b.n	8001dc0 <__swhatbuf_r+0x24>

08001de8 <__smakebuf_r>:
 8001de8:	898b      	ldrh	r3, [r1, #12]
 8001dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dec:	079d      	lsls	r5, r3, #30
 8001dee:	4606      	mov	r6, r0
 8001df0:	460c      	mov	r4, r1
 8001df2:	d507      	bpl.n	8001e04 <__smakebuf_r+0x1c>
 8001df4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001df8:	6023      	str	r3, [r4, #0]
 8001dfa:	6123      	str	r3, [r4, #16]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	6163      	str	r3, [r4, #20]
 8001e00:	b003      	add	sp, #12
 8001e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e04:	ab01      	add	r3, sp, #4
 8001e06:	466a      	mov	r2, sp
 8001e08:	f7ff ffc8 	bl	8001d9c <__swhatbuf_r>
 8001e0c:	9f00      	ldr	r7, [sp, #0]
 8001e0e:	4605      	mov	r5, r0
 8001e10:	4639      	mov	r1, r7
 8001e12:	4630      	mov	r0, r6
 8001e14:	f7ff fbbc 	bl	8001590 <_malloc_r>
 8001e18:	b948      	cbnz	r0, 8001e2e <__smakebuf_r+0x46>
 8001e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e1e:	059a      	lsls	r2, r3, #22
 8001e20:	d4ee      	bmi.n	8001e00 <__smakebuf_r+0x18>
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	81a3      	strh	r3, [r4, #12]
 8001e2c:	e7e2      	b.n	8001df4 <__smakebuf_r+0xc>
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	6020      	str	r0, [r4, #0]
 8001e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e36:	81a3      	strh	r3, [r4, #12]
 8001e38:	9b01      	ldr	r3, [sp, #4]
 8001e3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e3e:	b15b      	cbz	r3, 8001e58 <__smakebuf_r+0x70>
 8001e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e44:	4630      	mov	r0, r6
 8001e46:	f000 f81d 	bl	8001e84 <_isatty_r>
 8001e4a:	b128      	cbz	r0, 8001e58 <__smakebuf_r+0x70>
 8001e4c:	89a3      	ldrh	r3, [r4, #12]
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	81a3      	strh	r3, [r4, #12]
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	431d      	orrs	r5, r3
 8001e5c:	81a5      	strh	r5, [r4, #12]
 8001e5e:	e7cf      	b.n	8001e00 <__smakebuf_r+0x18>

08001e60 <_fstat_r>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	4d07      	ldr	r5, [pc, #28]	@ (8001e80 <_fstat_r+0x20>)
 8001e64:	2300      	movs	r3, #0
 8001e66:	4604      	mov	r4, r0
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	602b      	str	r3, [r5, #0]
 8001e6e:	f000 f942 	bl	80020f6 <_fstat>
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	d102      	bne.n	8001e7c <_fstat_r+0x1c>
 8001e76:	682b      	ldr	r3, [r5, #0]
 8001e78:	b103      	cbz	r3, 8001e7c <_fstat_r+0x1c>
 8001e7a:	6023      	str	r3, [r4, #0]
 8001e7c:	bd38      	pop	{r3, r4, r5, pc}
 8001e7e:	bf00      	nop
 8001e80:	200001e8 	.word	0x200001e8

08001e84 <_isatty_r>:
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4d06      	ldr	r5, [pc, #24]	@ (8001ea0 <_isatty_r+0x1c>)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	602b      	str	r3, [r5, #0]
 8001e90:	f000 fa96 	bl	80023c0 <_isatty>
 8001e94:	1c43      	adds	r3, r0, #1
 8001e96:	d102      	bne.n	8001e9e <_isatty_r+0x1a>
 8001e98:	682b      	ldr	r3, [r5, #0]
 8001e9a:	b103      	cbz	r3, 8001e9e <_isatty_r+0x1a>
 8001e9c:	6023      	str	r3, [r4, #0]
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ea0:	200001e8 	.word	0x200001e8

08001ea4 <_sbrk_r>:
 8001ea4:	b538      	push	{r3, r4, r5, lr}
 8001ea6:	4d06      	ldr	r5, [pc, #24]	@ (8001ec0 <_sbrk_r+0x1c>)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	4604      	mov	r4, r0
 8001eac:	4608      	mov	r0, r1
 8001eae:	602b      	str	r3, [r5, #0]
 8001eb0:	f7ff f81c 	bl	8000eec <_sbrk>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d102      	bne.n	8001ebe <_sbrk_r+0x1a>
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	b103      	cbz	r3, 8001ebe <_sbrk_r+0x1a>
 8001ebc:	6023      	str	r3, [r4, #0]
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
 8001ec0:	200001e8 	.word	0x200001e8

08001ec4 <findslot>:
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <findslot+0x2c>)
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	4604      	mov	r4, r0
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	b118      	cbz	r0, 8001ed6 <findslot+0x12>
 8001ece:	6a03      	ldr	r3, [r0, #32]
 8001ed0:	b90b      	cbnz	r3, 8001ed6 <findslot+0x12>
 8001ed2:	f7ff f8f7 	bl	80010c4 <__sinit>
 8001ed6:	2c13      	cmp	r4, #19
 8001ed8:	d807      	bhi.n	8001eea <findslot+0x26>
 8001eda:	4806      	ldr	r0, [pc, #24]	@ (8001ef4 <findslot+0x30>)
 8001edc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	d002      	beq.n	8001eea <findslot+0x26>
 8001ee4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	2000      	movs	r0, #0
 8001eec:	e7fc      	b.n	8001ee8 <findslot+0x24>
 8001eee:	bf00      	nop
 8001ef0:	20000010 	.word	0x20000010
 8001ef4:	20000204 	.word	0x20000204

08001ef8 <error>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	4604      	mov	r4, r0
 8001efc:	f7ff faae 	bl	800145c <__errno>
 8001f00:	2613      	movs	r6, #19
 8001f02:	4605      	mov	r5, r0
 8001f04:	2700      	movs	r7, #0
 8001f06:	4630      	mov	r0, r6
 8001f08:	4639      	mov	r1, r7
 8001f0a:	beab      	bkpt	0x00ab
 8001f0c:	4606      	mov	r6, r0
 8001f0e:	602e      	str	r6, [r5, #0]
 8001f10:	4620      	mov	r0, r4
 8001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f14 <checkerror>:
 8001f14:	1c43      	adds	r3, r0, #1
 8001f16:	d101      	bne.n	8001f1c <checkerror+0x8>
 8001f18:	f7ff bfee 	b.w	8001ef8 <error>
 8001f1c:	4770      	bx	lr

08001f1e <_swiread>:
 8001f1e:	b530      	push	{r4, r5, lr}
 8001f20:	b085      	sub	sp, #20
 8001f22:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f26:	9203      	str	r2, [sp, #12]
 8001f28:	2406      	movs	r4, #6
 8001f2a:	ad01      	add	r5, sp, #4
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	beab      	bkpt	0x00ab
 8001f32:	4604      	mov	r4, r0
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ffed 	bl	8001f14 <checkerror>
 8001f3a:	b005      	add	sp, #20
 8001f3c:	bd30      	pop	{r4, r5, pc}

08001f3e <_read>:
 8001f3e:	b570      	push	{r4, r5, r6, lr}
 8001f40:	460e      	mov	r6, r1
 8001f42:	4614      	mov	r4, r2
 8001f44:	f7ff ffbe 	bl	8001ec4 <findslot>
 8001f48:	4605      	mov	r5, r0
 8001f4a:	b930      	cbnz	r0, 8001f5a <_read+0x1c>
 8001f4c:	f7ff fa86 	bl	800145c <__errno>
 8001f50:	2309      	movs	r3, #9
 8001f52:	6003      	str	r3, [r0, #0]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	6800      	ldr	r0, [r0, #0]
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4631      	mov	r1, r6
 8001f60:	f7ff ffdd 	bl	8001f1e <_swiread>
 8001f64:	1c43      	adds	r3, r0, #1
 8001f66:	d0f5      	beq.n	8001f54 <_read+0x16>
 8001f68:	686b      	ldr	r3, [r5, #4]
 8001f6a:	1a20      	subs	r0, r4, r0
 8001f6c:	4403      	add	r3, r0
 8001f6e:	606b      	str	r3, [r5, #4]
 8001f70:	e7f2      	b.n	8001f58 <_read+0x1a>

08001f72 <_swilseek>:
 8001f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f74:	460c      	mov	r4, r1
 8001f76:	4616      	mov	r6, r2
 8001f78:	f7ff ffa4 	bl	8001ec4 <findslot>
 8001f7c:	4605      	mov	r5, r0
 8001f7e:	b940      	cbnz	r0, 8001f92 <_swilseek+0x20>
 8001f80:	f7ff fa6c 	bl	800145c <__errno>
 8001f84:	2309      	movs	r3, #9
 8001f86:	6003      	str	r3, [r0, #0]
 8001f88:	f04f 34ff 	mov.w	r4, #4294967295
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	b003      	add	sp, #12
 8001f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f92:	2e02      	cmp	r6, #2
 8001f94:	d903      	bls.n	8001f9e <_swilseek+0x2c>
 8001f96:	f7ff fa61 	bl	800145c <__errno>
 8001f9a:	2316      	movs	r3, #22
 8001f9c:	e7f3      	b.n	8001f86 <_swilseek+0x14>
 8001f9e:	2e01      	cmp	r6, #1
 8001fa0:	d112      	bne.n	8001fc8 <_swilseek+0x56>
 8001fa2:	6843      	ldr	r3, [r0, #4]
 8001fa4:	18e4      	adds	r4, r4, r3
 8001fa6:	d4f6      	bmi.n	8001f96 <_swilseek+0x24>
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	260a      	movs	r6, #10
 8001fac:	e9cd 3400 	strd	r3, r4, [sp]
 8001fb0:	466f      	mov	r7, sp
 8001fb2:	4630      	mov	r0, r6
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	beab      	bkpt	0x00ab
 8001fb8:	4606      	mov	r6, r0
 8001fba:	4630      	mov	r0, r6
 8001fbc:	f7ff ffaa 	bl	8001f14 <checkerror>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	dbe1      	blt.n	8001f88 <_swilseek+0x16>
 8001fc4:	606c      	str	r4, [r5, #4]
 8001fc6:	e7e1      	b.n	8001f8c <_swilseek+0x1a>
 8001fc8:	2e02      	cmp	r6, #2
 8001fca:	6803      	ldr	r3, [r0, #0]
 8001fcc:	d1ec      	bne.n	8001fa8 <_swilseek+0x36>
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	260c      	movs	r6, #12
 8001fd2:	466f      	mov	r7, sp
 8001fd4:	4630      	mov	r0, r6
 8001fd6:	4639      	mov	r1, r7
 8001fd8:	beab      	bkpt	0x00ab
 8001fda:	4606      	mov	r6, r0
 8001fdc:	4630      	mov	r0, r6
 8001fde:	f7ff ff99 	bl	8001f14 <checkerror>
 8001fe2:	1c43      	adds	r3, r0, #1
 8001fe4:	d0d0      	beq.n	8001f88 <_swilseek+0x16>
 8001fe6:	4404      	add	r4, r0
 8001fe8:	e7de      	b.n	8001fa8 <_swilseek+0x36>

08001fea <_lseek>:
 8001fea:	f7ff bfc2 	b.w	8001f72 <_swilseek>

08001fee <_swiwrite>:
 8001fee:	b530      	push	{r4, r5, lr}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001ff6:	9203      	str	r2, [sp, #12]
 8001ff8:	2405      	movs	r4, #5
 8001ffa:	ad01      	add	r5, sp, #4
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	beab      	bkpt	0x00ab
 8002002:	4604      	mov	r4, r0
 8002004:	4620      	mov	r0, r4
 8002006:	f7ff ff85 	bl	8001f14 <checkerror>
 800200a:	b005      	add	sp, #20
 800200c:	bd30      	pop	{r4, r5, pc}

0800200e <_write>:
 800200e:	b570      	push	{r4, r5, r6, lr}
 8002010:	460e      	mov	r6, r1
 8002012:	4615      	mov	r5, r2
 8002014:	f7ff ff56 	bl	8001ec4 <findslot>
 8002018:	4604      	mov	r4, r0
 800201a:	b930      	cbnz	r0, 800202a <_write+0x1c>
 800201c:	f7ff fa1e 	bl	800145c <__errno>
 8002020:	2309      	movs	r3, #9
 8002022:	6003      	str	r3, [r0, #0]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	bd70      	pop	{r4, r5, r6, pc}
 800202a:	6800      	ldr	r0, [r0, #0]
 800202c:	462a      	mov	r2, r5
 800202e:	4631      	mov	r1, r6
 8002030:	f7ff ffdd 	bl	8001fee <_swiwrite>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	dbf5      	blt.n	8002024 <_write+0x16>
 8002038:	6862      	ldr	r2, [r4, #4]
 800203a:	1ae8      	subs	r0, r5, r3
 800203c:	4402      	add	r2, r0
 800203e:	42ab      	cmp	r3, r5
 8002040:	6062      	str	r2, [r4, #4]
 8002042:	d1f1      	bne.n	8002028 <_write+0x1a>
 8002044:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff bf55 	b.w	8001ef8 <error>

0800204e <_swiclose>:
 800204e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002050:	2402      	movs	r4, #2
 8002052:	9001      	str	r0, [sp, #4]
 8002054:	ad01      	add	r5, sp, #4
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	beab      	bkpt	0x00ab
 800205c:	4604      	mov	r4, r0
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff ff58 	bl	8001f14 <checkerror>
 8002064:	b003      	add	sp, #12
 8002066:	bd30      	pop	{r4, r5, pc}

08002068 <_close>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4605      	mov	r5, r0
 800206c:	f7ff ff2a 	bl	8001ec4 <findslot>
 8002070:	4604      	mov	r4, r0
 8002072:	b930      	cbnz	r0, 8002082 <_close+0x1a>
 8002074:	f7ff f9f2 	bl	800145c <__errno>
 8002078:	2309      	movs	r3, #9
 800207a:	6003      	str	r3, [r0, #0]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	bd38      	pop	{r3, r4, r5, pc}
 8002082:	3d01      	subs	r5, #1
 8002084:	2d01      	cmp	r5, #1
 8002086:	d809      	bhi.n	800209c <_close+0x34>
 8002088:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <_close+0x48>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	429a      	cmp	r2, r3
 8002090:	d104      	bne.n	800209c <_close+0x34>
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	6003      	str	r3, [r0, #0]
 8002098:	2000      	movs	r0, #0
 800209a:	e7f1      	b.n	8002080 <_close+0x18>
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	f7ff ffd6 	bl	800204e <_swiclose>
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d1ec      	bne.n	8002080 <_close+0x18>
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	6023      	str	r3, [r4, #0]
 80020ac:	e7e8      	b.n	8002080 <_close+0x18>
 80020ae:	bf00      	nop
 80020b0:	20000204 	.word	0x20000204

080020b4 <_swistat>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	460c      	mov	r4, r1
 80020b8:	f7ff ff04 	bl	8001ec4 <findslot>
 80020bc:	4605      	mov	r5, r0
 80020be:	b930      	cbnz	r0, 80020ce <_swistat+0x1a>
 80020c0:	f7ff f9cc 	bl	800145c <__errno>
 80020c4:	2309      	movs	r3, #9
 80020c6:	6003      	str	r3, [r0, #0]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020d4:	6063      	str	r3, [r4, #4]
 80020d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020da:	64a3      	str	r3, [r4, #72]	@ 0x48
 80020dc:	260c      	movs	r6, #12
 80020de:	4630      	mov	r0, r6
 80020e0:	4629      	mov	r1, r5
 80020e2:	beab      	bkpt	0x00ab
 80020e4:	4605      	mov	r5, r0
 80020e6:	4628      	mov	r0, r5
 80020e8:	f7ff ff14 	bl	8001f14 <checkerror>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	d0eb      	beq.n	80020c8 <_swistat+0x14>
 80020f0:	6120      	str	r0, [r4, #16]
 80020f2:	2000      	movs	r0, #0
 80020f4:	e7ea      	b.n	80020cc <_swistat+0x18>

080020f6 <_fstat>:
 80020f6:	460b      	mov	r3, r1
 80020f8:	b510      	push	{r4, lr}
 80020fa:	2100      	movs	r1, #0
 80020fc:	4604      	mov	r4, r0
 80020fe:	2258      	movs	r2, #88	@ 0x58
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f95d 	bl	80013c0 <memset>
 8002106:	4601      	mov	r1, r0
 8002108:	4620      	mov	r0, r4
 800210a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800210e:	f7ff bfd1 	b.w	80020b4 <_swistat>

08002112 <_stat>:
 8002112:	b538      	push	{r3, r4, r5, lr}
 8002114:	460d      	mov	r5, r1
 8002116:	4604      	mov	r4, r0
 8002118:	2258      	movs	r2, #88	@ 0x58
 800211a:	2100      	movs	r1, #0
 800211c:	4628      	mov	r0, r5
 800211e:	f7ff f94f 	bl	80013c0 <memset>
 8002122:	4620      	mov	r0, r4
 8002124:	2100      	movs	r1, #0
 8002126:	f000 f811 	bl	800214c <_swiopen>
 800212a:	1c43      	adds	r3, r0, #1
 800212c:	4604      	mov	r4, r0
 800212e:	d00b      	beq.n	8002148 <_stat+0x36>
 8002130:	686b      	ldr	r3, [r5, #4]
 8002132:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002136:	606b      	str	r3, [r5, #4]
 8002138:	4629      	mov	r1, r5
 800213a:	f7ff ffbb 	bl	80020b4 <_swistat>
 800213e:	4605      	mov	r5, r0
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff ff91 	bl	8002068 <_close>
 8002146:	462c      	mov	r4, r5
 8002148:	4620      	mov	r0, r4
 800214a:	bd38      	pop	{r3, r4, r5, pc}

0800214c <_swiopen>:
 800214c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002150:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80021fc <_swiopen+0xb0>
 8002154:	b096      	sub	sp, #88	@ 0x58
 8002156:	4607      	mov	r7, r0
 8002158:	460e      	mov	r6, r1
 800215a:	2400      	movs	r4, #0
 800215c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002160:	3301      	adds	r3, #1
 8002162:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002166:	d032      	beq.n	80021ce <_swiopen+0x82>
 8002168:	3401      	adds	r4, #1
 800216a:	2c14      	cmp	r4, #20
 800216c:	d1f6      	bne.n	800215c <_swiopen+0x10>
 800216e:	f7ff f975 	bl	800145c <__errno>
 8002172:	2318      	movs	r3, #24
 8002174:	e03a      	b.n	80021ec <_swiopen+0xa0>
 8002176:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800217a:	f240 6301 	movw	r3, #1537	@ 0x601
 800217e:	07b2      	lsls	r2, r6, #30
 8002180:	bf48      	it	mi
 8002182:	f045 0502 	orrmi.w	r5, r5, #2
 8002186:	421e      	tst	r6, r3
 8002188:	bf18      	it	ne
 800218a:	f045 0504 	orrne.w	r5, r5, #4
 800218e:	0733      	lsls	r3, r6, #28
 8002190:	bf48      	it	mi
 8002192:	f025 0504 	bicmi.w	r5, r5, #4
 8002196:	4638      	mov	r0, r7
 8002198:	bf48      	it	mi
 800219a:	f045 0508 	orrmi.w	r5, r5, #8
 800219e:	9700      	str	r7, [sp, #0]
 80021a0:	f7fe f866 	bl	8000270 <strlen>
 80021a4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80021a8:	2501      	movs	r5, #1
 80021aa:	4628      	mov	r0, r5
 80021ac:	4651      	mov	r1, sl
 80021ae:	beab      	bkpt	0x00ab
 80021b0:	4605      	mov	r5, r0
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	db06      	blt.n	80021c4 <_swiopen+0x78>
 80021b6:	44c8      	add	r8, r9
 80021b8:	2300      	movs	r3, #0
 80021ba:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80021be:	f8c8 3004 	str.w	r3, [r8, #4]
 80021c2:	e016      	b.n	80021f2 <_swiopen+0xa6>
 80021c4:	4628      	mov	r0, r5
 80021c6:	f7ff fe97 	bl	8001ef8 <error>
 80021ca:	4604      	mov	r4, r0
 80021cc:	e011      	b.n	80021f2 <_swiopen+0xa6>
 80021ce:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80021d2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80021d6:	46ea      	mov	sl, sp
 80021d8:	d1cd      	bne.n	8002176 <_swiopen+0x2a>
 80021da:	4651      	mov	r1, sl
 80021dc:	4638      	mov	r0, r7
 80021de:	f7ff ff98 	bl	8002112 <_stat>
 80021e2:	3001      	adds	r0, #1
 80021e4:	d0c7      	beq.n	8002176 <_swiopen+0x2a>
 80021e6:	f7ff f939 	bl	800145c <__errno>
 80021ea:	2311      	movs	r3, #17
 80021ec:	6003      	str	r3, [r0, #0]
 80021ee:	f04f 34ff 	mov.w	r4, #4294967295
 80021f2:	4620      	mov	r0, r4
 80021f4:	b016      	add	sp, #88	@ 0x58
 80021f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021fa:	bf00      	nop
 80021fc:	20000204 	.word	0x20000204

08002200 <_get_semihosting_exts>:
 8002200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002204:	4606      	mov	r6, r0
 8002206:	460f      	mov	r7, r1
 8002208:	4829      	ldr	r0, [pc, #164]	@ (80022b0 <_get_semihosting_exts+0xb0>)
 800220a:	2100      	movs	r1, #0
 800220c:	4615      	mov	r5, r2
 800220e:	f7ff ff9d 	bl	800214c <_swiopen>
 8002212:	462a      	mov	r2, r5
 8002214:	4604      	mov	r4, r0
 8002216:	2100      	movs	r1, #0
 8002218:	4630      	mov	r0, r6
 800221a:	f7ff f8d1 	bl	80013c0 <memset>
 800221e:	1c63      	adds	r3, r4, #1
 8002220:	d014      	beq.n	800224c <_get_semihosting_exts+0x4c>
 8002222:	4620      	mov	r0, r4
 8002224:	f7ff fe4e 	bl	8001ec4 <findslot>
 8002228:	f04f 080c 	mov.w	r8, #12
 800222c:	4681      	mov	r9, r0
 800222e:	4640      	mov	r0, r8
 8002230:	4649      	mov	r1, r9
 8002232:	beab      	bkpt	0x00ab
 8002234:	4680      	mov	r8, r0
 8002236:	4640      	mov	r0, r8
 8002238:	f7ff fe6c 	bl	8001f14 <checkerror>
 800223c:	2803      	cmp	r0, #3
 800223e:	dd02      	ble.n	8002246 <_get_semihosting_exts+0x46>
 8002240:	1ec3      	subs	r3, r0, #3
 8002242:	42ab      	cmp	r3, r5
 8002244:	dc07      	bgt.n	8002256 <_get_semihosting_exts+0x56>
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff ff0e 	bl	8002068 <_close>
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	b003      	add	sp, #12
 8002252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002256:	2204      	movs	r2, #4
 8002258:	eb0d 0102 	add.w	r1, sp, r2
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff fe6e 	bl	8001f3e <_read>
 8002262:	2803      	cmp	r0, #3
 8002264:	ddef      	ble.n	8002246 <_get_semihosting_exts+0x46>
 8002266:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800226a:	2b53      	cmp	r3, #83	@ 0x53
 800226c:	d1eb      	bne.n	8002246 <_get_semihosting_exts+0x46>
 800226e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002272:	2b48      	cmp	r3, #72	@ 0x48
 8002274:	d1e7      	bne.n	8002246 <_get_semihosting_exts+0x46>
 8002276:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800227a:	2b46      	cmp	r3, #70	@ 0x46
 800227c:	d1e3      	bne.n	8002246 <_get_semihosting_exts+0x46>
 800227e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002282:	2b42      	cmp	r3, #66	@ 0x42
 8002284:	d1df      	bne.n	8002246 <_get_semihosting_exts+0x46>
 8002286:	2201      	movs	r2, #1
 8002288:	4639      	mov	r1, r7
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff fe71 	bl	8001f72 <_swilseek>
 8002290:	2800      	cmp	r0, #0
 8002292:	dbd8      	blt.n	8002246 <_get_semihosting_exts+0x46>
 8002294:	462a      	mov	r2, r5
 8002296:	4631      	mov	r1, r6
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff fe50 	bl	8001f3e <_read>
 800229e:	4605      	mov	r5, r0
 80022a0:	4620      	mov	r0, r4
 80022a2:	f7ff fee1 	bl	8002068 <_close>
 80022a6:	4628      	mov	r0, r5
 80022a8:	f7ff fe34 	bl	8001f14 <checkerror>
 80022ac:	e7d0      	b.n	8002250 <_get_semihosting_exts+0x50>
 80022ae:	bf00      	nop
 80022b0:	080024aa 	.word	0x080024aa

080022b4 <initialise_semihosting_exts>:
 80022b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022b6:	4d0a      	ldr	r5, [pc, #40]	@ (80022e0 <initialise_semihosting_exts+0x2c>)
 80022b8:	4c0a      	ldr	r4, [pc, #40]	@ (80022e4 <initialise_semihosting_exts+0x30>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	2201      	movs	r2, #1
 80022be:	a801      	add	r0, sp, #4
 80022c0:	6029      	str	r1, [r5, #0]
 80022c2:	6022      	str	r2, [r4, #0]
 80022c4:	f7ff ff9c 	bl	8002200 <_get_semihosting_exts>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	dd07      	ble.n	80022dc <initialise_semihosting_exts+0x28>
 80022cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022d0:	f003 0201 	and.w	r2, r3, #1
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	602a      	str	r2, [r5, #0]
 80022da:	6023      	str	r3, [r4, #0]
 80022dc:	b003      	add	sp, #12
 80022de:	bd30      	pop	{r4, r5, pc}
 80022e0:	20000064 	.word	0x20000064
 80022e4:	20000060 	.word	0x20000060

080022e8 <_has_ext_stdout_stderr>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	4c04      	ldr	r4, [pc, #16]	@ (80022fc <_has_ext_stdout_stderr+0x14>)
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da01      	bge.n	80022f6 <_has_ext_stdout_stderr+0xe>
 80022f2:	f7ff ffdf 	bl	80022b4 <initialise_semihosting_exts>
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	bd10      	pop	{r4, pc}
 80022fa:	bf00      	nop
 80022fc:	20000060 	.word	0x20000060

08002300 <initialise_monitor_handles>:
 8002300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002304:	b085      	sub	sp, #20
 8002306:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80023b8 <initialise_monitor_handles+0xb8>
 800230a:	f8cd 9004 	str.w	r9, [sp, #4]
 800230e:	2303      	movs	r3, #3
 8002310:	2400      	movs	r4, #0
 8002312:	9303      	str	r3, [sp, #12]
 8002314:	af01      	add	r7, sp, #4
 8002316:	9402      	str	r4, [sp, #8]
 8002318:	2501      	movs	r5, #1
 800231a:	4628      	mov	r0, r5
 800231c:	4639      	mov	r1, r7
 800231e:	beab      	bkpt	0x00ab
 8002320:	4605      	mov	r5, r0
 8002322:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80023bc <initialise_monitor_handles+0xbc>
 8002326:	4623      	mov	r3, r4
 8002328:	4c20      	ldr	r4, [pc, #128]	@ (80023ac <initialise_monitor_handles+0xac>)
 800232a:	f8c8 5000 	str.w	r5, [r8]
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002336:	3301      	adds	r3, #1
 8002338:	2b14      	cmp	r3, #20
 800233a:	d1fa      	bne.n	8002332 <initialise_monitor_handles+0x32>
 800233c:	f7ff ffd4 	bl	80022e8 <_has_ext_stdout_stderr>
 8002340:	4d1b      	ldr	r5, [pc, #108]	@ (80023b0 <initialise_monitor_handles+0xb0>)
 8002342:	b1d0      	cbz	r0, 800237a <initialise_monitor_handles+0x7a>
 8002344:	f04f 0a03 	mov.w	sl, #3
 8002348:	2304      	movs	r3, #4
 800234a:	f8cd 9004 	str.w	r9, [sp, #4]
 800234e:	2601      	movs	r6, #1
 8002350:	f8cd a00c 	str.w	sl, [sp, #12]
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	4630      	mov	r0, r6
 8002358:	4639      	mov	r1, r7
 800235a:	beab      	bkpt	0x00ab
 800235c:	4683      	mov	fp, r0
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <initialise_monitor_handles+0xb4>)
 8002360:	f8cd 9004 	str.w	r9, [sp, #4]
 8002364:	f8c3 b000 	str.w	fp, [r3]
 8002368:	2308      	movs	r3, #8
 800236a:	f8cd a00c 	str.w	sl, [sp, #12]
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	4630      	mov	r0, r6
 8002372:	4639      	mov	r1, r7
 8002374:	beab      	bkpt	0x00ab
 8002376:	4606      	mov	r6, r0
 8002378:	602e      	str	r6, [r5, #0]
 800237a:	682b      	ldr	r3, [r5, #0]
 800237c:	3301      	adds	r3, #1
 800237e:	bf02      	ittt	eq
 8002380:	4b0c      	ldreq	r3, [pc, #48]	@ (80023b4 <initialise_monitor_handles+0xb4>)
 8002382:	681b      	ldreq	r3, [r3, #0]
 8002384:	602b      	streq	r3, [r5, #0]
 8002386:	2600      	movs	r6, #0
 8002388:	f8d8 3000 	ldr.w	r3, [r8]
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	6066      	str	r6, [r4, #4]
 8002390:	f7ff ffaa 	bl	80022e8 <_has_ext_stdout_stderr>
 8002394:	b130      	cbz	r0, 80023a4 <initialise_monitor_handles+0xa4>
 8002396:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <initialise_monitor_handles+0xb4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800239e:	682b      	ldr	r3, [r5, #0]
 80023a0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80023a4:	b005      	add	sp, #20
 80023a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023aa:	bf00      	nop
 80023ac:	20000204 	.word	0x20000204
 80023b0:	200001f8 	.word	0x200001f8
 80023b4:	200001fc 	.word	0x200001fc
 80023b8:	080024c0 	.word	0x080024c0
 80023bc:	20000200 	.word	0x20000200

080023c0 <_isatty>:
 80023c0:	b570      	push	{r4, r5, r6, lr}
 80023c2:	f7ff fd7f 	bl	8001ec4 <findslot>
 80023c6:	2409      	movs	r4, #9
 80023c8:	4605      	mov	r5, r0
 80023ca:	b920      	cbnz	r0, 80023d6 <_isatty+0x16>
 80023cc:	f7ff f846 	bl	800145c <__errno>
 80023d0:	6004      	str	r4, [r0, #0]
 80023d2:	2000      	movs	r0, #0
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
 80023d6:	4620      	mov	r0, r4
 80023d8:	4629      	mov	r1, r5
 80023da:	beab      	bkpt	0x00ab
 80023dc:	4604      	mov	r4, r0
 80023de:	2c01      	cmp	r4, #1
 80023e0:	4620      	mov	r0, r4
 80023e2:	d0f7      	beq.n	80023d4 <_isatty+0x14>
 80023e4:	f7ff f83a 	bl	800145c <__errno>
 80023e8:	2513      	movs	r5, #19
 80023ea:	4604      	mov	r4, r0
 80023ec:	2600      	movs	r6, #0
 80023ee:	4628      	mov	r0, r5
 80023f0:	4631      	mov	r1, r6
 80023f2:	beab      	bkpt	0x00ab
 80023f4:	4605      	mov	r5, r0
 80023f6:	6025      	str	r5, [r4, #0]
 80023f8:	e7eb      	b.n	80023d2 <_isatty+0x12>
	...

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr
