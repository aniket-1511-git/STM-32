
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000053c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006c8  080006d0  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006c8  080006c8  000016d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006c8  080006c8  000016d0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006c8  080006d0  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c8  080006c8  000016c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006cc  080006cc  000016cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000016d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000978  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000339  00000000  00000000  00002072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000023b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000085  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001801  00000000  00000000  000024f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d4e  00000000  00000000  00003cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005811  00000000  00000000  00004a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000a255  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000248  00000000  00000000  0000a298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  0000a4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080006b0 	.word	0x080006b0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	080006b0 	.word	0x080006b0

080001cc <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d157      	bne.n	800028e <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80001e4:	d106      	bne.n	80001f4 <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 80001e6:	4b59      	ldr	r3, [pc, #356]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001ea:	4a58      	ldr	r2, [pc, #352]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 80001f2:	e0a6      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a56      	ldr	r2, [pc, #344]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 80001fc:	4b53      	ldr	r3, [pc, #332]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80001fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000200:	4a52      	ldr	r2, [pc, #328]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000208:	e09b      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a51      	ldr	r2, [pc, #324]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d106      	bne.n	8000220 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 8000212:	4b4e      	ldr	r3, [pc, #312]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000216:	4a4d      	ldr	r2, [pc, #308]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000218:	f043 0304 	orr.w	r3, r3, #4
 800021c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800021e:	e090      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a4d      	ldr	r2, [pc, #308]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 8000224:	4293      	cmp	r3, r2
 8000226:	d106      	bne.n	8000236 <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 8000228:	4b48      	ldr	r3, [pc, #288]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800022a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800022c:	4a47      	ldr	r2, [pc, #284]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000234:	e085      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4a48      	ldr	r2, [pc, #288]	@ (800035c <GPIO_PeriClockControl+0x190>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d106      	bne.n	800024c <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 800023e:	4b43      	ldr	r3, [pc, #268]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000242:	4a42      	ldr	r2, [pc, #264]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000244:	f043 0310 	orr.w	r3, r3, #16
 8000248:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800024a:	e07a      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a44      	ldr	r2, [pc, #272]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000250:	4293      	cmp	r3, r2
 8000252:	d106      	bne.n	8000262 <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 8000254:	4b3d      	ldr	r3, [pc, #244]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000258:	4a3c      	ldr	r2, [pc, #240]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000260:	e06f      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4a3f      	ldr	r2, [pc, #252]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 800026a:	4b38      	ldr	r3, [pc, #224]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800026e:	4a37      	ldr	r2, [pc, #220]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000276:	e064      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a3b      	ldr	r2, [pc, #236]	@ (8000368 <GPIO_PeriClockControl+0x19c>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d160      	bne.n	8000342 <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 8000280:	4b32      	ldr	r3, [pc, #200]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000284:	4a31      	ldr	r2, [pc, #196]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800028c:	e059      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 800028e:	78fb      	ldrb	r3, [r7, #3]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d156      	bne.n	8000342 <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 800029c:	4b2b      	ldr	r3, [pc, #172]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800029e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002a0:	4a2a      	ldr	r2, [pc, #168]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002a2:	f023 0301 	bic.w	r3, r3, #1
 80002a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002a8:	e04b      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a28      	ldr	r2, [pc, #160]	@ (8000350 <GPIO_PeriClockControl+0x184>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 80002b2:	4b26      	ldr	r3, [pc, #152]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b6:	4a25      	ldr	r2, [pc, #148]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002b8:	f023 0302 	bic.w	r3, r3, #2
 80002bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002be:	e040      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a24      	ldr	r2, [pc, #144]	@ (8000354 <GPIO_PeriClockControl+0x188>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 80002c8:	4b20      	ldr	r3, [pc, #128]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002cc:	4a1f      	ldr	r2, [pc, #124]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002ce:	f023 0304 	bic.w	r3, r3, #4
 80002d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002d4:	e035      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000358 <GPIO_PeriClockControl+0x18c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 80002de:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002e2:	4a1a      	ldr	r2, [pc, #104]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0308 	bic.w	r3, r3, #8
 80002e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80002ea:	e02a      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a1b      	ldr	r2, [pc, #108]	@ (800035c <GPIO_PeriClockControl+0x190>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f8:	4a14      	ldr	r2, [pc, #80]	@ (800034c <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0310 	bic.w	r3, r3, #16
 80002fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000300:	e01f      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a16      	ldr	r2, [pc, #88]	@ (8000360 <GPIO_PeriClockControl+0x194>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 800030a:	4b10      	ldr	r3, [pc, #64]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	4a0f      	ldr	r2, [pc, #60]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0320 	bic.w	r3, r3, #32
 8000314:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000316:	e014      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <GPIO_PeriClockControl+0x198>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000324:	4a09      	ldr	r2, [pc, #36]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800032a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800032c:	e009      	b.n	8000342 <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <GPIO_PeriClockControl+0x19c>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d105      	bne.n	8000342 <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <GPIO_PeriClockControl+0x180>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033a:	4a04      	ldr	r2, [pc, #16]	@ (800034c <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000340:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	48000400 	.word	0x48000400
 8000354:	48000800 	.word	0x48000800
 8000358:	48000c00 	.word	0x48000c00
 800035c:	48001000 	.word	0x48001000
 8000360:	48001400 	.word	0x48001400
 8000364:	48001800 	.word	0x48001800
 8000368:	48001c00 	.word	0x48001c00

0800036c <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800036c:	b480      	push	{r7}
 800036e:	b087      	sub	sp, #28
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	2b03      	cmp	r3, #3
 800037e:	d821      	bhi.n	80003c4 <GPIO_Init+0x58>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	795b      	ldrb	r3, [r3, #5]
 8000384:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	791b      	ldrb	r3, [r3, #4]
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000390:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	2103      	movs	r1, #3
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	4619      	mov	r1, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	400a      	ands	r2, r1
 80003ae:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6819      	ldr	r1, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	697a      	ldr	r2, [r7, #20]
 80003bc:	430a      	orrs	r2, r1
 80003be:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	799b      	ldrb	r3, [r3, #6]
 80003cc:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80003d8:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	689a      	ldr	r2, [r3, #8]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	2103      	movs	r1, #3
 80003e8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6899      	ldr	r1, [r3, #8]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	430a      	orrs	r2, r1
 8000406:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	79db      	ldrb	r3, [r3, #7]
 8000410:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800041c:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68da      	ldr	r2, [r3, #12]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	2103      	movs	r1, #3
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
 8000430:	43db      	mvns	r3, r3
 8000432:	4619      	mov	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	400a      	ands	r2, r1
 800043a:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	68d9      	ldr	r1, [r3, #12]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	697a      	ldr	r2, [r7, #20]
 8000448:	430a      	orrs	r2, r1
 800044a:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7a1b      	ldrb	r3, [r3, #8]
 8000454:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800045e:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	4619      	mov	r1, r3
 800046c:	2301      	movs	r3, #1
 800046e:	408b      	lsls	r3, r1
 8000470:	43db      	mvns	r3, r3
 8000472:	4619      	mov	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	400a      	ands	r2, r1
 800047a:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6859      	ldr	r1, [r3, #4]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	430a      	orrs	r2, r1
 800048a:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d132      	bne.n	80004fe <GPIO_Init+0x192>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	08db      	lsrs	r3, r3, #3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	613b      	str	r3, [r7, #16]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	f003 0307 	and.w	r3, r3, #7
 80004aa:	60fb      	str	r3, [r7, #12]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	693a      	ldr	r2, [r7, #16]
 80004b2:	3208      	adds	r2, #8
 80004b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	210f      	movs	r1, #15
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	43db      	mvns	r3, r3
 80004c4:	4619      	mov	r1, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4011      	ands	r1, r2
 80004cc:	693a      	ldr	r2, [r7, #16]
 80004ce:	3208      	adds	r2, #8
 80004d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	693a      	ldr	r2, [r7, #16]
 80004da:	3208      	adds	r2, #8
 80004dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	7a5b      	ldrb	r3, [r3, #9]
 80004e4:	4619      	mov	r1, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4311      	orrs	r1, r2
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	3208      	adds	r2, #8
 80004fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80004fe:	bf00      	nop
 8000500:	371c      	adds	r7, #28
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <GPIO_ReadFromInputPin>:
* Function name      : uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber_u8)
* Description        : This function is to read the status of GPIO pin
*
*********************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber_u8)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
	/* Declare an 8-bit variable to hold the pin value */
	uint8_t value;

	/* Read the input data register (IDR).*/
	value = (uint8_t)((pGPIOx->IDR >> pinNumber_u8) & 0x01);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	691a      	ldr	r2, [r3, #16]
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	fa22 f303 	lsr.w	r3, r2, r3
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f003 0301 	and.w	r3, r3, #1
 8000524:	73fb      	strb	r3, [r7, #15]

	/* Return the read value (0 or 1) */
	return value;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <GPIO_WriteToOutputPin>:
* Function name      : void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber_u8,uint8_t state_u8)
* Description        : This function is to write the status for GPIO pin
*
*********************************************************************************************************************/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber_u8,uint8_t state_u8)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	460b      	mov	r3, r1
 800053c:	70fb      	strb	r3, [r7, #3]
 800053e:	4613      	mov	r3, r2
 8000540:	70bb      	strb	r3, [r7, #2]
	/* Check if the desired state is SET  */
	if(GPIO_PIN_SET == state_u8)
 8000542:	78bb      	ldrb	r3, [r7, #2]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d109      	bne.n	800055c <GPIO_WriteToOutputPin+0x2a>
	{
	    /* Set the corresponding bit in the ODR register -> drives pin HIGH */
	    pGPIOx->ODR |= (1 << pinNumber_u8);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	78fa      	ldrb	r2, [r7, #3]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	431a      	orrs	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	615a      	str	r2, [r3, #20]
	/* If state is neither SET nor RESET */
	else
	{
	    /* Do nothing (invalid state) */
	}
}
 800055a:	e00c      	b.n	8000576 <GPIO_WriteToOutputPin+0x44>
	else if(GPIO_PIN_RESET == state_u8)
 800055c:	78bb      	ldrb	r3, [r7, #2]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d109      	bne.n	8000576 <GPIO_WriteToOutputPin+0x44>
	    pGPIOx->ODR &= ~(1 << pinNumber_u8);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	78fa      	ldrb	r2, [r7, #3]
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	43d2      	mvns	r2, r2
 8000570:	401a      	ands	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	615a      	str	r2, [r3, #20]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <main>:
    for(uint32_t i = 0; i < msec; i++) {
        delay_us(1000);
    }
}
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpioLed ;
	GPIO_Handle_t gpioSwitch;

	gpioSwitch.pGPIOx = GPIOC;
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <main+0x90>)
 8000588:	603b      	str	r3, [r7, #0]
	gpioSwitch.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800058a:	230d      	movs	r3, #13
 800058c:	713b      	strb	r3, [r7, #4]
	gpioSwitch.GPIO_PinConfig.GPIO_PinMode   = GPIO_MODE_IN;
 800058e:	2300      	movs	r3, #0
 8000590:	717b      	strb	r3, [r7, #5]
	gpioSwitch.GPIO_PinConfig.GPIO_PinSpeed  = GPIO_SPEED_FAST;
 8000592:	2302      	movs	r3, #2
 8000594:	71bb      	strb	r3, [r7, #6]
	gpioSwitch.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]



	gpioLed.pGPIOx = GPIOA;
 800059a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800059e:	60fb      	str	r3, [r7, #12]
	gpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80005a0:	2305      	movs	r3, #5
 80005a2:	743b      	strb	r3, [r7, #16]
	gpioLed.GPIO_PinConfig.GPIO_PinMode   = GPIO_MODE_OUT;
 80005a4:	2301      	movs	r3, #1
 80005a6:	747b      	strb	r3, [r7, #17]
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed  = GPIO_SPEED_FAST;
 80005a8:	2302      	movs	r3, #2
 80005aa:	74bb      	strb	r3, [r7, #18]
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80005ac:	2300      	movs	r3, #0
 80005ae:	753b      	strb	r3, [r7, #20]
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80005b0:	2300      	movs	r3, #0
 80005b2:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80005b4:	2101      	movs	r1, #1
 80005b6:	4816      	ldr	r0, [pc, #88]	@ (8000610 <main+0x90>)
 80005b8:	f7ff fe08 	bl	80001cc <GPIO_PeriClockControl>
	GPIO_Init(&gpioSwitch);
 80005bc:	463b      	mov	r3, r7
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fed4 	bl	800036c <GPIO_Init>
	GPIO_PeriClockControl(GPIOA, ENABLE);
 80005c4:	2101      	movs	r1, #1
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f7ff fdff 	bl	80001cc <GPIO_PeriClockControl>
	GPIO_Init(&gpioLed);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff feca 	bl	800036c <GPIO_Init>
	while(1U)
	{
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)== GPIO_PIN_RESET)
 80005d8:	210d      	movs	r1, #13
 80005da:	480d      	ldr	r0, [pc, #52]	@ (8000610 <main+0x90>)
 80005dc:	f7ff ff94 	bl	8000508 <GPIO_ReadFromInputPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d106      	bne.n	80005f4 <main+0x74>
		{
			/* Function call to Off LED */
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2105      	movs	r1, #5
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f7ff ffa0 	bl	8000532 <GPIO_WriteToOutputPin>
 80005f2:	e7f1      	b.n	80005d8 <main+0x58>
		}
		else if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)== GPIO_PIN_SET)
 80005f4:	210d      	movs	r1, #13
 80005f6:	4806      	ldr	r0, [pc, #24]	@ (8000610 <main+0x90>)
 80005f8:	f7ff ff86 	bl	8000508 <GPIO_ReadFromInputPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d1ea      	bne.n	80005d8 <main+0x58>
		{
			/* Function call to Off LED */
			GPIO_WriteToOutputPin(GPIOA, GPIO_PIN_NO_5, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2105      	movs	r1, #5
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f7ff ff92 	bl	8000532 <GPIO_WriteToOutputPin>
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)== GPIO_PIN_RESET)
 800060e:	e7e3      	b.n	80005d8 <main+0x58>
 8000610:	48000800 	.word	0x48000800

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	@ (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	@ (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000642:	f000 f811 	bl	8000668 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000646:	f7ff ff9b 	bl	8000580 <main>

0800064a <LoopForever>:

LoopForever:
  b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000658:	080006d0 	.word	0x080006d0
  ldr r2, =_sbss
 800065c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000660:	2000001c 	.word	0x2000001c

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <__libc_init_array>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	4d0d      	ldr	r5, [pc, #52]	@ (80006a0 <__libc_init_array+0x38>)
 800066c:	4c0d      	ldr	r4, [pc, #52]	@ (80006a4 <__libc_init_array+0x3c>)
 800066e:	1b64      	subs	r4, r4, r5
 8000670:	10a4      	asrs	r4, r4, #2
 8000672:	2600      	movs	r6, #0
 8000674:	42a6      	cmp	r6, r4
 8000676:	d109      	bne.n	800068c <__libc_init_array+0x24>
 8000678:	4d0b      	ldr	r5, [pc, #44]	@ (80006a8 <__libc_init_array+0x40>)
 800067a:	4c0c      	ldr	r4, [pc, #48]	@ (80006ac <__libc_init_array+0x44>)
 800067c:	f000 f818 	bl	80006b0 <_init>
 8000680:	1b64      	subs	r4, r4, r5
 8000682:	10a4      	asrs	r4, r4, #2
 8000684:	2600      	movs	r6, #0
 8000686:	42a6      	cmp	r6, r4
 8000688:	d105      	bne.n	8000696 <__libc_init_array+0x2e>
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000690:	4798      	blx	r3
 8000692:	3601      	adds	r6, #1
 8000694:	e7ee      	b.n	8000674 <__libc_init_array+0xc>
 8000696:	f855 3b04 	ldr.w	r3, [r5], #4
 800069a:	4798      	blx	r3
 800069c:	3601      	adds	r6, #1
 800069e:	e7f2      	b.n	8000686 <__libc_init_array+0x1e>
 80006a0:	080006c8 	.word	0x080006c8
 80006a4:	080006c8 	.word	0x080006c8
 80006a8:	080006c8 	.word	0x080006c8
 80006ac:	080006cc 	.word	0x080006cc

080006b0 <_init>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	bf00      	nop
 80006b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b6:	bc08      	pop	{r3}
 80006b8:	469e      	mov	lr, r3
 80006ba:	4770      	bx	lr

080006bc <_fini>:
 80006bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006be:	bf00      	nop
 80006c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c2:	bc08      	pop	{r3}
 80006c4:	469e      	mov	lr, r3
 80006c6:	4770      	bx	lr
