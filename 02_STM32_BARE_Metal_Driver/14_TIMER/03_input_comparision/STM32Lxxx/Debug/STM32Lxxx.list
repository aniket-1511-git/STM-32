
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001d50  08001d50  00002d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d90  08001d90  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001d90  08001d90  00002d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d98  08001d98  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d98  08001d98  00002d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d9c  08001d9c  00002d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001da0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000194  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000024e1  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008c9  00000000  00000000  0000556d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00005e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000019f  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021d8  00000000  00000000  0000621f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000bc0  00000000  00000000  000083f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00008fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f88  00000000  00000000  00008ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00009f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001d38 	.word	0x08001d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001d38 	.word	0x08001d38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <USART_PeriClockControl>:
#include"STM32Lxx_USARTx_header.h"


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d136      	bne.n	80002f0 <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a38      	ldr	r2, [pc, #224]	@ (8000368 <USART_PeriClockControl+0xf8>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 800028a:	4b38      	ldr	r3, [pc, #224]	@ (800036c <USART_PeriClockControl+0xfc>)
 800028c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800028e:	4a37      	ldr	r2, [pc, #220]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000294:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000296:	e061      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a35      	ldr	r2, [pc, #212]	@ (8000370 <USART_PeriClockControl+0x100>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80002a0:	4b32      	ldr	r3, [pc, #200]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002a4:	4a31      	ldr	r2, [pc, #196]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002aa:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002ac:	e056      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a30      	ldr	r2, [pc, #192]	@ (8000374 <USART_PeriClockControl+0x104>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 80002b6:	4b2d      	ldr	r3, [pc, #180]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002ba:	4a2c      	ldr	r2, [pc, #176]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002c0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002c2:	e04b      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000378 <USART_PeriClockControl+0x108>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d106      	bne.n	80002da <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 80002cc:	4b27      	ldr	r3, [pc, #156]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002d0:	4a26      	ldr	r2, [pc, #152]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002d6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002d8:	e040      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a27      	ldr	r2, [pc, #156]	@ (800037c <USART_PeriClockControl+0x10c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d13c      	bne.n	800035c <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 80002e2:	4b22      	ldr	r3, [pc, #136]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002e6:	4a21      	ldr	r2, [pc, #132]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002ec:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002ee:	e035      	b.n	800035c <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000368 <USART_PeriClockControl+0xf8>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 80002f8:	4b1c      	ldr	r3, [pc, #112]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002fc:	4a1b      	ldr	r2, [pc, #108]	@ (800036c <USART_PeriClockControl+0xfc>)
 80002fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000302:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000304:	e02a      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a19      	ldr	r2, [pc, #100]	@ (8000370 <USART_PeriClockControl+0x100>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 800030e:	4b17      	ldr	r3, [pc, #92]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000312:	4a16      	ldr	r2, [pc, #88]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000314:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000318:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800031a:	e01f      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a15      	ldr	r2, [pc, #84]	@ (8000374 <USART_PeriClockControl+0x104>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000324:	4b11      	ldr	r3, [pc, #68]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000328:	4a10      	ldr	r2, [pc, #64]	@ (800036c <USART_PeriClockControl+0xfc>)
 800032a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800032e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000330:	e014      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <USART_PeriClockControl+0x108>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 800033a:	4b0c      	ldr	r3, [pc, #48]	@ (800036c <USART_PeriClockControl+0xfc>)
 800033c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800033e:	4a0b      	ldr	r2, [pc, #44]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000340:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8000344:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000346:	e009      	b.n	800035c <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a0c      	ldr	r2, [pc, #48]	@ (800037c <USART_PeriClockControl+0x10c>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d105      	bne.n	800035c <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000354:	4a05      	ldr	r2, [pc, #20]	@ (800036c <USART_PeriClockControl+0xfc>)
 8000356:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800035a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40013800 	.word	0x40013800
 800036c:	40021000 	.word	0x40021000
 8000370:	40004400 	.word	0x40004400
 8000374:	40004800 	.word	0x40004800
 8000378:	40004c00 	.word	0x40004c00
 800037c:	40005000 	.word	0x40005000

08000380 <USART_Init>:
}

*/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]

		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2101      	movs	r1, #1
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff6c 	bl	8000270 <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d104      	bne.n	80003aa <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	e010      	b.n	80003cc <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	791b      	ldrb	r3, [r3, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d104      	bne.n	80003bc <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	f043 0308 	orr.w	r3, r3, #8
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e007      	b.n	80003cc <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d103      	bne.n	80003cc <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f043 030c 	orr.w	r3, r3, #12
 80003ca:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	7b5b      	ldrb	r3, [r3, #13]
 80003d0:	031b      	lsls	r3, r3, #12
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	7b9b      	ldrb	r3, [r3, #14]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d104      	bne.n	80003ea <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	e00b      	b.n	8000402 <USART_Init+0x82>

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	7b9b      	ldrb	r3, [r3, #14]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d107      	bne.n	8000402 <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003f8:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000400:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	601a      	str	r2, [r3, #0]
		tempreg=0;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	7b1b      	ldrb	r3, [r3, #12]
 8000412:	031b      	lsls	r3, r3, #12
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	4313      	orrs	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	605a      	str	r2, [r3, #4]

		tempreg=0;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	7bdb      	ldrb	r3, [r3, #15]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d104      	bne.n	8000438 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	e014      	b.n	8000462 <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	7bdb      	ldrb	r3, [r3, #15]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d104      	bne.n	800044a <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	e00b      	b.n	8000462 <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	7bdb      	ldrb	r3, [r3, #15]
 800044e:	2b03      	cmp	r3, #3
 8000450:	d107      	bne.n	8000462 <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000458:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000460:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	2223      	movs	r2, #35	@ 0x23
 8000470:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e031      	b.n	80004f0 <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 800048c:	bf00      	nop
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2180      	movs	r1, #128	@ 0x80
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f85a 	bl	800054e <USART_GetFlagStatus>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f6      	beq.n	800048e <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	7b5b      	ldrb	r3, [r3, #13]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d118      	bne.n	80004da <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80004ba:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	7b9b      	ldrb	r3, [r3, #14]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d106      	bne.n	80004d2 <USART_SendData+0x58>
			{
				pTxBuffer++;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	e00b      	b.n	80004ea <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	e007      	b.n	80004ea <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d3c9      	bcc.n	800048c <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80004f8:	bf00      	nop
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2140      	movs	r1, #64	@ 0x40
 8000500:	4618      	mov	r0, r3
 8000502:	f000 f824 	bl	800054e <USART_GetFlagStatus>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f6      	beq.n	80004fa <USART_SendData+0x80>
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <USART_PeripheralControl>:
}



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000522:	78fb      	ldrb	r3, [r7, #3]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d106      	bne.n	8000536 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f043 0201 	orr.w	r2, r3, #1
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000534:	e005      	b.n	8000542 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f023 0201 	bic.w	r2, r3, #1
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	460b      	mov	r3, r1
 8000558:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	69da      	ldr	r2, [r3, #28]
 800055e:	78fb      	ldrb	r3, [r7, #3]
 8000560:	4013      	ands	r3, r2
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000566:	2301      	movs	r3, #1
 8000568:	e000      	b.n	800056c <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d157      	bne.n	800063a <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000590:	d106      	bne.n	80005a0 <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 8000592:	4b5a      	ldr	r3, [pc, #360]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	4a59      	ldr	r2, [pc, #356]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 800059e:	e0a6      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a57      	ldr	r2, [pc, #348]	@ (8000700 <GPIO_PeriClockControl+0x188>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d106      	bne.n	80005b6 <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 80005a8:	4b54      	ldr	r3, [pc, #336]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ac:	4a53      	ldr	r2, [pc, #332]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005b4:	e09b      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a52      	ldr	r2, [pc, #328]	@ (8000704 <GPIO_PeriClockControl+0x18c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d106      	bne.n	80005cc <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	4a4e      	ldr	r2, [pc, #312]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005ca:	e090      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a4e      	ldr	r2, [pc, #312]	@ (8000708 <GPIO_PeriClockControl+0x190>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d106      	bne.n	80005e2 <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 80005d4:	4b49      	ldr	r3, [pc, #292]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d8:	4a48      	ldr	r2, [pc, #288]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005da:	f043 0308 	orr.w	r3, r3, #8
 80005de:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005e0:	e085      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	4a49      	ldr	r2, [pc, #292]	@ (800070c <GPIO_PeriClockControl+0x194>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d106      	bne.n	80005f8 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 80005ea:	4b44      	ldr	r3, [pc, #272]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a43      	ldr	r2, [pc, #268]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80005f0:	f043 0310 	orr.w	r3, r3, #16
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005f6:	e07a      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a45      	ldr	r2, [pc, #276]	@ (8000710 <GPIO_PeriClockControl+0x198>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d106      	bne.n	800060e <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 8000600:	4b3e      	ldr	r3, [pc, #248]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000604:	4a3d      	ldr	r2, [pc, #244]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800060c:	e06f      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4a40      	ldr	r2, [pc, #256]	@ (8000714 <GPIO_PeriClockControl+0x19c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d106      	bne.n	8000624 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	4a38      	ldr	r2, [pc, #224]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 800061c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000620:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000622:	e064      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a3c      	ldr	r2, [pc, #240]	@ (8000718 <GPIO_PeriClockControl+0x1a0>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d160      	bne.n	80006ee <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 800062c:	4b33      	ldr	r3, [pc, #204]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 800062e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000630:	4a32      	ldr	r2, [pc, #200]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000636:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000638:	e059      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d156      	bne.n	80006ee <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000646:	d106      	bne.n	8000656 <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2b      	ldr	r2, [pc, #172]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 800064e:	f023 0301 	bic.w	r3, r3, #1
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000654:	e04b      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <GPIO_PeriClockControl+0x188>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	4a26      	ldr	r2, [pc, #152]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000664:	f023 0302 	bic.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800066a:	e040      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a25      	ldr	r2, [pc, #148]	@ (8000704 <GPIO_PeriClockControl+0x18c>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d106      	bne.n	8000682 <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000678:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 800067a:	f023 0304 	bic.w	r3, r3, #4
 800067e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000680:	e035      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a20      	ldr	r2, [pc, #128]	@ (8000708 <GPIO_PeriClockControl+0x190>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d106      	bne.n	8000698 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 8000690:	f023 0308 	bic.w	r3, r3, #8
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000696:	e02a      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <GPIO_PeriClockControl+0x194>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d106      	bne.n	80006ae <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a4:	4a15      	ldr	r2, [pc, #84]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006a6:	f023 0310 	bic.w	r3, r3, #16
 80006aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006ac:	e01f      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <GPIO_PeriClockControl+0x198>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006bc:	f023 0320 	bic.w	r3, r3, #32
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006c2:	e014      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <GPIO_PeriClockControl+0x19c>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 80006cc:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006d8:	e009      	b.n	80006ee <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000718 <GPIO_PeriClockControl+0x1a0>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d105      	bne.n	80006ee <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a05      	ldr	r2, [pc, #20]	@ (80006fc <GPIO_PeriClockControl+0x184>)
 80006e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400
 8000704:	48000800 	.word	0x48000800
 8000708:	48000c00 	.word	0x48000c00
 800070c:	48001000 	.word	0x48001000
 8000710:	48001400 	.word	0x48001400
 8000714:	48001800 	.word	0x48001800
 8000718:	48001c00 	.word	0x48001c00

0800071c <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff22 	bl	8000578 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	2b03      	cmp	r3, #3
 800073a:	d822      	bhi.n	8000782 <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	795b      	ldrb	r3, [r3, #5]
 8000740:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800074c:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	2103      	movs	r1, #3
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	43db      	mvns	r3, r3
 8000762:	4619      	mov	r1, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	400a      	ands	r2, r1
 800076a:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	430a      	orrs	r2, r1
 800077a:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e0e1      	b.n	8000946 <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	795b      	ldrb	r3, [r3, #5]
 8000786:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000792:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	2103      	movs	r1, #3
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6819      	ldr	r1, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	430a      	orrs	r2, r1
 80007c0:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d117      	bne.n	80007fe <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ce:	4b47      	ldr	r3, [pc, #284]	@ (80008ec <GPIO_Init+0x1d0>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	7912      	ldrb	r2, [r2, #4]
 80007d6:	4611      	mov	r1, r2
 80007d8:	2201      	movs	r2, #1
 80007da:	408a      	lsls	r2, r1
 80007dc:	4611      	mov	r1, r2
 80007de:	4a43      	ldr	r2, [pc, #268]	@ (80008ec <GPIO_Init+0x1d0>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007e4:	4b41      	ldr	r3, [pc, #260]	@ (80008ec <GPIO_Init+0x1d0>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	7912      	ldrb	r2, [r2, #4]
 80007ec:	4611      	mov	r1, r2
 80007ee:	2201      	movs	r2, #1
 80007f0:	408a      	lsls	r2, r1
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ec <GPIO_Init+0x1d0>)
 80007f8:	400b      	ands	r3, r1
 80007fa:	6093      	str	r3, [r2, #8]
 80007fc:	e035      	b.n	800086a <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	795b      	ldrb	r3, [r3, #5]
 8000802:	2b05      	cmp	r3, #5
 8000804:	d117      	bne.n	8000836 <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000806:	4b39      	ldr	r3, [pc, #228]	@ (80008ec <GPIO_Init+0x1d0>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	7912      	ldrb	r2, [r2, #4]
 800080e:	4611      	mov	r1, r2
 8000810:	2201      	movs	r2, #1
 8000812:	408a      	lsls	r2, r1
 8000814:	4611      	mov	r1, r2
 8000816:	4a35      	ldr	r2, [pc, #212]	@ (80008ec <GPIO_Init+0x1d0>)
 8000818:	430b      	orrs	r3, r1
 800081a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <GPIO_Init+0x1d0>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	7912      	ldrb	r2, [r2, #4]
 8000824:	4611      	mov	r1, r2
 8000826:	2201      	movs	r2, #1
 8000828:	408a      	lsls	r2, r1
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <GPIO_Init+0x1d0>)
 8000830:	400b      	ands	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
 8000834:	e019      	b.n	800086a <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	795b      	ldrb	r3, [r3, #5]
 800083a:	2b06      	cmp	r3, #6
 800083c:	d115      	bne.n	800086a <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <GPIO_Init+0x1d0>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	7912      	ldrb	r2, [r2, #4]
 8000846:	4611      	mov	r1, r2
 8000848:	2201      	movs	r2, #1
 800084a:	408a      	lsls	r2, r1
 800084c:	4611      	mov	r1, r2
 800084e:	4a27      	ldr	r2, [pc, #156]	@ (80008ec <GPIO_Init+0x1d0>)
 8000850:	430b      	orrs	r3, r1
 8000852:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000854:	4b25      	ldr	r3, [pc, #148]	@ (80008ec <GPIO_Init+0x1d0>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7912      	ldrb	r2, [r2, #4]
 800085c:	4611      	mov	r1, r2
 800085e:	2201      	movs	r2, #1
 8000860:	408a      	lsls	r2, r1
 8000862:	4611      	mov	r1, r2
 8000864:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <GPIO_Init+0x1d0>)
 8000866:	430b      	orrs	r3, r1
 8000868:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	089b      	lsrs	r3, r3, #2
 8000870:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000884:	d042      	beq.n	800090c <GPIO_Init+0x1f0>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <GPIO_Init+0x1d4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d02b      	beq.n	80008e8 <GPIO_Init+0x1cc>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <GPIO_Init+0x1d8>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d024      	beq.n	80008e4 <GPIO_Init+0x1c8>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <GPIO_Init+0x1dc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d01d      	beq.n	80008e0 <GPIO_Init+0x1c4>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <GPIO_Init+0x1e0>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d016      	beq.n	80008dc <GPIO_Init+0x1c0>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <GPIO_Init+0x1e4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d00f      	beq.n	80008d8 <GPIO_Init+0x1bc>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a11      	ldr	r2, [pc, #68]	@ (8000904 <GPIO_Init+0x1e8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d008      	beq.n	80008d4 <GPIO_Init+0x1b8>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <GPIO_Init+0x1ec>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d101      	bne.n	80008d0 <GPIO_Init+0x1b4>
 80008cc:	2307      	movs	r3, #7
 80008ce:	e01e      	b.n	800090e <GPIO_Init+0x1f2>
 80008d0:	2300      	movs	r3, #0
 80008d2:	e01c      	b.n	800090e <GPIO_Init+0x1f2>
 80008d4:	2306      	movs	r3, #6
 80008d6:	e01a      	b.n	800090e <GPIO_Init+0x1f2>
 80008d8:	2305      	movs	r3, #5
 80008da:	e018      	b.n	800090e <GPIO_Init+0x1f2>
 80008dc:	2304      	movs	r3, #4
 80008de:	e016      	b.n	800090e <GPIO_Init+0x1f2>
 80008e0:	2303      	movs	r3, #3
 80008e2:	e014      	b.n	800090e <GPIO_Init+0x1f2>
 80008e4:	2302      	movs	r3, #2
 80008e6:	e012      	b.n	800090e <GPIO_Init+0x1f2>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e010      	b.n	800090e <GPIO_Init+0x1f2>
 80008ec:	40010400 	.word	0x40010400
 80008f0:	48000400 	.word	0x48000400
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000c00 	.word	0x48000c00
 80008fc:	48001000 	.word	0x48001000
 8000900:	48001400 	.word	0x48001400
 8000904:	48001800 	.word	0x48001800
 8000908:	48001c00 	.word	0x48001c00
 800090c:	2300      	movs	r3, #0
 800090e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000910:	4b5d      	ldr	r3, [pc, #372]	@ (8000a88 <GPIO_Init+0x36c>)
 8000912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000914:	4a5c      	ldr	r2, [pc, #368]	@ (8000a88 <GPIO_Init+0x36c>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 800091c:	7c7a      	ldrb	r2, [r7, #17]
 800091e:	7cbb      	ldrb	r3, [r7, #18]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	fa02 f103 	lsl.w	r1, r2, r3
 8000926:	4a59      	ldr	r2, [pc, #356]	@ (8000a8c <GPIO_Init+0x370>)
 8000928:	7cfb      	ldrb	r3, [r7, #19]
 800092a:	3302      	adds	r3, #2
 800092c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000930:	4b57      	ldr	r3, [pc, #348]	@ (8000a90 <GPIO_Init+0x374>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7912      	ldrb	r2, [r2, #4]
 8000938:	4611      	mov	r1, r2
 800093a:	2201      	movs	r2, #1
 800093c:	408a      	lsls	r2, r1
 800093e:	4611      	mov	r1, r2
 8000940:	4a53      	ldr	r2, [pc, #332]	@ (8000a90 <GPIO_Init+0x374>)
 8000942:	430b      	orrs	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	799b      	ldrb	r3, [r3, #6]
 800094e:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800095a:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	689a      	ldr	r2, [r3, #8]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	2103      	movs	r1, #3
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	400a      	ands	r2, r1
 8000978:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	6899      	ldr	r1, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	430a      	orrs	r2, r1
 8000988:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	79db      	ldrb	r3, [r3, #7]
 8000992:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800099e:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	791b      	ldrb	r3, [r3, #4]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2103      	movs	r1, #3
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	4619      	mov	r1, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	400a      	ands	r2, r1
 80009bc:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68d9      	ldr	r1, [r3, #12]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	7a1b      	ldrb	r3, [r3, #8]
 80009d6:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80009e0:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	4619      	mov	r1, r3
 80009ee:	2301      	movs	r3, #1
 80009f0:	408b      	lsls	r3, r1
 80009f2:	43db      	mvns	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	400a      	ands	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6859      	ldr	r1, [r3, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	795b      	ldrb	r3, [r3, #5]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d132      	bne.n	8000a80 <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791b      	ldrb	r3, [r3, #4]
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	f003 0307 	and.w	r3, r3, #7
 8000a2c:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	3208      	adds	r2, #8
 8000a36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	210f      	movs	r1, #15
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4011      	ands	r1, r2
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	3208      	adds	r2, #8
 8000a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	3208      	adds	r2, #8
 8000a5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7a5b      	ldrb	r3, [r3, #9]
 8000a66:	4619      	mov	r1, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4311      	orrs	r1, r2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	3208      	adds	r2, #8
 8000a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	40010400 	.word	0x40010400

08000a94 <Timer_PA5OutputCompare>:
	TIM2->CNT = 0;
	TIM2->CR1 = CR1_CEN;
}

void Timer_PA5OutputCompare(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= GPIOA_EN;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <Timer_PA5OutputCompare+0xb4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8000b48 <Timer_PA5OutputCompare+0xb4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOA->MODER &=~(3U<<10);
 8000aa4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000aae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000ab2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(2U<<10);
 8000ab4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000abe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ac2:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(0xF << 20);
 8000ac4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ace:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000ad2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x1 << 20);
 8000ad4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ae2:	6213      	str	r3, [r2, #32]

	RCC->APB1ENR1 |= TIM2EN;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <Timer_PA5OutputCompare+0xb4>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae8:	4a17      	ldr	r2, [pc, #92]	@ (8000b48 <Timer_PA5OutputCompare+0xb4>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6593      	str	r3, [r2, #88]	@ 0x58

	TIM2->PSC = 4000-1;
 8000af0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000af4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000af8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000-1;
 8000afa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000afe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b02:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->CCMR1 &= ~(7U<< 4);
 8000b04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000b12:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (3U<< 4);
 8000b14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b1e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000b22:	6193      	str	r3, [r2, #24]

	TIM2->CCER = (1U<< 0);
 8000b24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b28:	2201      	movs	r2, #1
 8000b2a:	621a      	str	r2, [r3, #32]

	TIM2->CNT = 0;
 8000b2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 = CR1_CEN;
 8000b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]



}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <Timer_PA6InputCompare>:
void Timer_PA6InputCompare(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= GPIOA_EN;
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <Timer_PA6InputCompare+0xa4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <Timer_PA6InputCompare+0xa4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    GPIOA->MODER &= ~(3U << 12);
 8000b5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b6a:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER |=  (2U << 12);
 8000b6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b7a:	6013      	str	r3, [r2, #0]

	    GPIOA->AFR[0] &= ~(0xF << 24);
 8000b7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b86:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000b8a:	6213      	str	r3, [r2, #32]
	    GPIOA->AFR[0] |=  (2U << 24);
 8000b8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b9a:	6213      	str	r3, [r2, #32]

	    RCC->APB1ENR1 |= TIM3EN;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <Timer_PA6InputCompare+0xa4>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba0:	4a13      	ldr	r2, [pc, #76]	@ (8000bf0 <Timer_PA6InputCompare+0xa4>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	6593      	str	r3, [r2, #88]	@ 0x58

	    TIM3->PSC = 4 - 1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000baa:	2203      	movs	r2, #3
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28

	    TIM3->CCMR1 &= ~(3U << 0);
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bb4:	f023 0303 	bic.w	r3, r3, #3
 8000bb8:	6193      	str	r3, [r2, #24]
	    TIM3->CCMR1 |=  (1U << 0);
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]

	    TIM3->CCER &= ~(1U << 1);
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bcc:	f023 0302 	bic.w	r3, r3, #2
 8000bd0:	6213      	str	r3, [r2, #32]
	    TIM3->CCER |=  (1U << 0);
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bd4:	6a1b      	ldr	r3, [r3, #32]
 8000bd6:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6213      	str	r3, [r2, #32]

	    TIM3->CR1 = CR1_CEN;
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <Timer_PA6InputCompare+0xa8>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	601a      	str	r2, [r3, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <USART2_Init>:

USART_Handle_t usart2_handle;


void USART2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <USART2_Init+0x3c>)
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <USART2_Init+0x40>)
 8000c00:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <USART2_Init+0x3c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c08:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <USART2_Init+0x3c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <USART2_Init+0x3c>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <USART2_Init+0x3c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <USART2_Init+0x3c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <USART2_Init+0x3c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <USART2_Init+0x3c>)
 8000c2a:	f7ff fba9 	bl	8000380 <USART_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000078 	.word	0x20000078
 8000c38:	40004400 	.word	0x40004400

08000c3c <USART2_GPIOInit>:


void USART2_GPIOInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	220c      	movs	r2, #12
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fb0c 	bl	8001266 <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000c4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c52:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c54:	2302      	movs	r3, #2
 8000c56:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c60:	2302      	movs	r3, #2
 8000c62:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000c64:	2307      	movs	r3, #7
 8000c66:	737b      	strb	r3, [r7, #13]

    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN();
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <USART2_GPIOInit+0x58>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c70:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <USART2_GPIOInit+0x58>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fd4e 	bl	800071c <GPIO_Init>
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000c80:	2303      	movs	r3, #3
 8000c82:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fd48 	bl	800071c <GPIO_Init>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <delay>:


void delay()
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
    for(uint32_t i=0; i<500000; i++);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	e002      	b.n	8000caa <delay+0x12>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <delay+0x28>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d9f8      	bls.n	8000ca4 <delay+0xc>
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	0007a11f 	.word	0x0007a11f

08000cc4 <__io_putchar>:


int __io_putchar(int ch)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    USART_SendData(&usart2_handle, (uint8_t*)&ch, 1);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4804      	ldr	r0, [pc, #16]	@ (8000ce4 <__io_putchar+0x20>)
 8000cd4:	f7ff fbd1 	bl	800047a <USART_SendData>
    return ch;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000078 	.word	0x20000078

08000ce8 <main>:

int val;

int main()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0


    USART2_GPIOInit();
 8000cec:	f7ff ffa6 	bl	8000c3c <USART2_GPIOInit>
    USART2_Init();
 8000cf0:	f7ff ff82 	bl	8000bf8 <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	480e      	ldr	r0, [pc, #56]	@ (8000d30 <main+0x48>)
 8000cf8:	f7ff fc0d 	bl	8000516 <USART_PeripheralControl>

    Timer_PA5OutputCompare();
 8000cfc:	f7ff feca 	bl	8000a94 <Timer_PA5OutputCompare>
    Timer_PA6InputCompare();
 8000d00:	f7ff ff24 	bl	8000b4c <Timer_PA6InputCompare>

    while(1)
    {
        while(!(TIM2->SR & SR_CC1IF));
 8000d04:	bf00      	nop
 8000d06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f8      	beq.n	8000d06 <main+0x1e>

        val = TIM3->CCR1;
 8000d14:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <main+0x4c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <main+0x50>)
 8000d1c:	601a      	str	r2, [r3, #0]

        printf("Time : %d\r\n", val);
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <main+0x50>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <main+0x54>)
 8000d26:	f000 fa49 	bl	80011bc <iprintf>

        delay();
 8000d2a:	f7ff ffb5 	bl	8000c98 <delay>
        while(!(TIM2->SR & SR_CC1IF));
 8000d2e:	e7e9      	b.n	8000d04 <main+0x1c>
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40000400 	.word	0x40000400
 8000d38:	2000009c 	.word	0x2000009c
 8000d3c:	08001d50 	.word	0x08001d50

08000d40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
  }

  return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff95 	bl	8000cc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
  }
  return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f000 fa6a 	bl	8001324 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20018000 	.word	0x20018000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	200000a0 	.word	0x200000a0
 8000e84:	200001f0 	.word	0x200001f0

08000e88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000eb6:	f000 fa3b 	bl	8001330 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000eba:	f7ff ff15 	bl	8000ce8 <main>

08000ebe <LoopForever>:

LoopForever:
  b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   r0, =_estack
 8000ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ecc:	08001da0 	.word	0x08001da0
  ldr r2, =_sbss
 8000ed0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ed4:	200001f0 	.word	0x200001f0

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <sbrk_aligned>:
 8000edc:	b570      	push	{r4, r5, r6, lr}
 8000ede:	4e0f      	ldr	r6, [pc, #60]	@ (8000f1c <sbrk_aligned+0x40>)
 8000ee0:	460c      	mov	r4, r1
 8000ee2:	6831      	ldr	r1, [r6, #0]
 8000ee4:	4605      	mov	r5, r0
 8000ee6:	b911      	cbnz	r1, 8000eee <sbrk_aligned+0x12>
 8000ee8:	f000 f9fa 	bl	80012e0 <_sbrk_r>
 8000eec:	6030      	str	r0, [r6, #0]
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	f000 f9f5 	bl	80012e0 <_sbrk_r>
 8000ef6:	1c43      	adds	r3, r0, #1
 8000ef8:	d103      	bne.n	8000f02 <sbrk_aligned+0x26>
 8000efa:	f04f 34ff 	mov.w	r4, #4294967295
 8000efe:	4620      	mov	r0, r4
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
 8000f02:	1cc4      	adds	r4, r0, #3
 8000f04:	f024 0403 	bic.w	r4, r4, #3
 8000f08:	42a0      	cmp	r0, r4
 8000f0a:	d0f8      	beq.n	8000efe <sbrk_aligned+0x22>
 8000f0c:	1a21      	subs	r1, r4, r0
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f000 f9e6 	bl	80012e0 <_sbrk_r>
 8000f14:	3001      	adds	r0, #1
 8000f16:	d1f2      	bne.n	8000efe <sbrk_aligned+0x22>
 8000f18:	e7ef      	b.n	8000efa <sbrk_aligned+0x1e>
 8000f1a:	bf00      	nop
 8000f1c:	200000a4 	.word	0x200000a4

08000f20 <_malloc_r>:
 8000f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f24:	1ccd      	adds	r5, r1, #3
 8000f26:	f025 0503 	bic.w	r5, r5, #3
 8000f2a:	3508      	adds	r5, #8
 8000f2c:	2d0c      	cmp	r5, #12
 8000f2e:	bf38      	it	cc
 8000f30:	250c      	movcc	r5, #12
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	4606      	mov	r6, r0
 8000f36:	db01      	blt.n	8000f3c <_malloc_r+0x1c>
 8000f38:	42a9      	cmp	r1, r5
 8000f3a:	d904      	bls.n	8000f46 <_malloc_r+0x26>
 8000f3c:	230c      	movs	r3, #12
 8000f3e:	6033      	str	r3, [r6, #0]
 8000f40:	2000      	movs	r0, #0
 8000f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800101c <_malloc_r+0xfc>
 8000f4a:	f000 f869 	bl	8001020 <__malloc_lock>
 8000f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f52:	461c      	mov	r4, r3
 8000f54:	bb44      	cbnz	r4, 8000fa8 <_malloc_r+0x88>
 8000f56:	4629      	mov	r1, r5
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f7ff ffbf 	bl	8000edc <sbrk_aligned>
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	4604      	mov	r4, r0
 8000f62:	d158      	bne.n	8001016 <_malloc_r+0xf6>
 8000f64:	f8d8 4000 	ldr.w	r4, [r8]
 8000f68:	4627      	mov	r7, r4
 8000f6a:	2f00      	cmp	r7, #0
 8000f6c:	d143      	bne.n	8000ff6 <_malloc_r+0xd6>
 8000f6e:	2c00      	cmp	r4, #0
 8000f70:	d04b      	beq.n	800100a <_malloc_r+0xea>
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	4639      	mov	r1, r7
 8000f76:	4630      	mov	r0, r6
 8000f78:	eb04 0903 	add.w	r9, r4, r3
 8000f7c:	f000 f9b0 	bl	80012e0 <_sbrk_r>
 8000f80:	4581      	cmp	r9, r0
 8000f82:	d142      	bne.n	800100a <_malloc_r+0xea>
 8000f84:	6821      	ldr	r1, [r4, #0]
 8000f86:	1a6d      	subs	r5, r5, r1
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff ffa6 	bl	8000edc <sbrk_aligned>
 8000f90:	3001      	adds	r0, #1
 8000f92:	d03a      	beq.n	800100a <_malloc_r+0xea>
 8000f94:	6823      	ldr	r3, [r4, #0]
 8000f96:	442b      	add	r3, r5
 8000f98:	6023      	str	r3, [r4, #0]
 8000f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	bb62      	cbnz	r2, 8000ffc <_malloc_r+0xdc>
 8000fa2:	f8c8 7000 	str.w	r7, [r8]
 8000fa6:	e00f      	b.n	8000fc8 <_malloc_r+0xa8>
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	1b52      	subs	r2, r2, r5
 8000fac:	d420      	bmi.n	8000ff0 <_malloc_r+0xd0>
 8000fae:	2a0b      	cmp	r2, #11
 8000fb0:	d917      	bls.n	8000fe2 <_malloc_r+0xc2>
 8000fb2:	1961      	adds	r1, r4, r5
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	6025      	str	r5, [r4, #0]
 8000fb8:	bf18      	it	ne
 8000fba:	6059      	strne	r1, [r3, #4]
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	bf08      	it	eq
 8000fc0:	f8c8 1000 	streq.w	r1, [r8]
 8000fc4:	5162      	str	r2, [r4, r5]
 8000fc6:	604b      	str	r3, [r1, #4]
 8000fc8:	4630      	mov	r0, r6
 8000fca:	f000 f82f 	bl	800102c <__malloc_unlock>
 8000fce:	f104 000b 	add.w	r0, r4, #11
 8000fd2:	1d23      	adds	r3, r4, #4
 8000fd4:	f020 0007 	bic.w	r0, r0, #7
 8000fd8:	1ac2      	subs	r2, r0, r3
 8000fda:	bf1c      	itt	ne
 8000fdc:	1a1b      	subne	r3, r3, r0
 8000fde:	50a3      	strne	r3, [r4, r2]
 8000fe0:	e7af      	b.n	8000f42 <_malloc_r+0x22>
 8000fe2:	6862      	ldr	r2, [r4, #4]
 8000fe4:	42a3      	cmp	r3, r4
 8000fe6:	bf0c      	ite	eq
 8000fe8:	f8c8 2000 	streq.w	r2, [r8]
 8000fec:	605a      	strne	r2, [r3, #4]
 8000fee:	e7eb      	b.n	8000fc8 <_malloc_r+0xa8>
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	6864      	ldr	r4, [r4, #4]
 8000ff4:	e7ae      	b.n	8000f54 <_malloc_r+0x34>
 8000ff6:	463c      	mov	r4, r7
 8000ff8:	687f      	ldr	r7, [r7, #4]
 8000ffa:	e7b6      	b.n	8000f6a <_malloc_r+0x4a>
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	42a3      	cmp	r3, r4
 8001002:	d1fb      	bne.n	8000ffc <_malloc_r+0xdc>
 8001004:	2300      	movs	r3, #0
 8001006:	6053      	str	r3, [r2, #4]
 8001008:	e7de      	b.n	8000fc8 <_malloc_r+0xa8>
 800100a:	230c      	movs	r3, #12
 800100c:	6033      	str	r3, [r6, #0]
 800100e:	4630      	mov	r0, r6
 8001010:	f000 f80c 	bl	800102c <__malloc_unlock>
 8001014:	e794      	b.n	8000f40 <_malloc_r+0x20>
 8001016:	6005      	str	r5, [r0, #0]
 8001018:	e7d6      	b.n	8000fc8 <_malloc_r+0xa8>
 800101a:	bf00      	nop
 800101c:	200000a8 	.word	0x200000a8

08001020 <__malloc_lock>:
 8001020:	4801      	ldr	r0, [pc, #4]	@ (8001028 <__malloc_lock+0x8>)
 8001022:	f000 b9aa 	b.w	800137a <__retarget_lock_acquire_recursive>
 8001026:	bf00      	nop
 8001028:	200001ec 	.word	0x200001ec

0800102c <__malloc_unlock>:
 800102c:	4801      	ldr	r0, [pc, #4]	@ (8001034 <__malloc_unlock+0x8>)
 800102e:	f000 b9a5 	b.w	800137c <__retarget_lock_release_recursive>
 8001032:	bf00      	nop
 8001034:	200001ec 	.word	0x200001ec

08001038 <std>:
 8001038:	2300      	movs	r3, #0
 800103a:	b510      	push	{r4, lr}
 800103c:	4604      	mov	r4, r0
 800103e:	e9c0 3300 	strd	r3, r3, [r0]
 8001042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001046:	6083      	str	r3, [r0, #8]
 8001048:	8181      	strh	r1, [r0, #12]
 800104a:	6643      	str	r3, [r0, #100]	@ 0x64
 800104c:	81c2      	strh	r2, [r0, #14]
 800104e:	6183      	str	r3, [r0, #24]
 8001050:	4619      	mov	r1, r3
 8001052:	2208      	movs	r2, #8
 8001054:	305c      	adds	r0, #92	@ 0x5c
 8001056:	f000 f906 	bl	8001266 <memset>
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <std+0x58>)
 800105c:	6263      	str	r3, [r4, #36]	@ 0x24
 800105e:	4b0d      	ldr	r3, [pc, #52]	@ (8001094 <std+0x5c>)
 8001060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <std+0x60>)
 8001064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <std+0x64>)
 8001068:	6323      	str	r3, [r4, #48]	@ 0x30
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <std+0x68>)
 800106c:	6224      	str	r4, [r4, #32]
 800106e:	429c      	cmp	r4, r3
 8001070:	d006      	beq.n	8001080 <std+0x48>
 8001072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001076:	4294      	cmp	r4, r2
 8001078:	d002      	beq.n	8001080 <std+0x48>
 800107a:	33d0      	adds	r3, #208	@ 0xd0
 800107c:	429c      	cmp	r4, r3
 800107e:	d105      	bne.n	800108c <std+0x54>
 8001080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001088:	f000 b976 	b.w	8001378 <__retarget_lock_init_recursive>
 800108c:	bd10      	pop	{r4, pc}
 800108e:	bf00      	nop
 8001090:	080011e1 	.word	0x080011e1
 8001094:	08001203 	.word	0x08001203
 8001098:	0800123b 	.word	0x0800123b
 800109c:	0800125f 	.word	0x0800125f
 80010a0:	200000ac 	.word	0x200000ac

080010a4 <stdio_exit_handler>:
 80010a4:	4a02      	ldr	r2, [pc, #8]	@ (80010b0 <stdio_exit_handler+0xc>)
 80010a6:	4903      	ldr	r1, [pc, #12]	@ (80010b4 <stdio_exit_handler+0x10>)
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <stdio_exit_handler+0x14>)
 80010aa:	f000 b869 	b.w	8001180 <_fwalk_sglue>
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000
 80010b4:	08001ab9 	.word	0x08001ab9
 80010b8:	20000010 	.word	0x20000010

080010bc <cleanup_stdio>:
 80010bc:	6841      	ldr	r1, [r0, #4]
 80010be:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <cleanup_stdio+0x34>)
 80010c0:	4299      	cmp	r1, r3
 80010c2:	b510      	push	{r4, lr}
 80010c4:	4604      	mov	r4, r0
 80010c6:	d001      	beq.n	80010cc <cleanup_stdio+0x10>
 80010c8:	f000 fcf6 	bl	8001ab8 <_fflush_r>
 80010cc:	68a1      	ldr	r1, [r4, #8]
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <cleanup_stdio+0x38>)
 80010d0:	4299      	cmp	r1, r3
 80010d2:	d002      	beq.n	80010da <cleanup_stdio+0x1e>
 80010d4:	4620      	mov	r0, r4
 80010d6:	f000 fcef 	bl	8001ab8 <_fflush_r>
 80010da:	68e1      	ldr	r1, [r4, #12]
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <cleanup_stdio+0x3c>)
 80010de:	4299      	cmp	r1, r3
 80010e0:	d004      	beq.n	80010ec <cleanup_stdio+0x30>
 80010e2:	4620      	mov	r0, r4
 80010e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010e8:	f000 bce6 	b.w	8001ab8 <_fflush_r>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	bf00      	nop
 80010f0:	200000ac 	.word	0x200000ac
 80010f4:	20000114 	.word	0x20000114
 80010f8:	2000017c 	.word	0x2000017c

080010fc <global_stdio_init.part.0>:
 80010fc:	b510      	push	{r4, lr}
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <global_stdio_init.part.0+0x30>)
 8001100:	4c0b      	ldr	r4, [pc, #44]	@ (8001130 <global_stdio_init.part.0+0x34>)
 8001102:	4a0c      	ldr	r2, [pc, #48]	@ (8001134 <global_stdio_init.part.0+0x38>)
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	4620      	mov	r0, r4
 8001108:	2200      	movs	r2, #0
 800110a:	2104      	movs	r1, #4
 800110c:	f7ff ff94 	bl	8001038 <std>
 8001110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001114:	2201      	movs	r2, #1
 8001116:	2109      	movs	r1, #9
 8001118:	f7ff ff8e 	bl	8001038 <std>
 800111c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001120:	2202      	movs	r2, #2
 8001122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001126:	2112      	movs	r1, #18
 8001128:	f7ff bf86 	b.w	8001038 <std>
 800112c:	200001e4 	.word	0x200001e4
 8001130:	200000ac 	.word	0x200000ac
 8001134:	080010a5 	.word	0x080010a5

08001138 <__sfp_lock_acquire>:
 8001138:	4801      	ldr	r0, [pc, #4]	@ (8001140 <__sfp_lock_acquire+0x8>)
 800113a:	f000 b91e 	b.w	800137a <__retarget_lock_acquire_recursive>
 800113e:	bf00      	nop
 8001140:	200001ed 	.word	0x200001ed

08001144 <__sfp_lock_release>:
 8001144:	4801      	ldr	r0, [pc, #4]	@ (800114c <__sfp_lock_release+0x8>)
 8001146:	f000 b919 	b.w	800137c <__retarget_lock_release_recursive>
 800114a:	bf00      	nop
 800114c:	200001ed 	.word	0x200001ed

08001150 <__sinit>:
 8001150:	b510      	push	{r4, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff fff0 	bl	8001138 <__sfp_lock_acquire>
 8001158:	6a23      	ldr	r3, [r4, #32]
 800115a:	b11b      	cbz	r3, 8001164 <__sinit+0x14>
 800115c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001160:	f7ff bff0 	b.w	8001144 <__sfp_lock_release>
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__sinit+0x28>)
 8001166:	6223      	str	r3, [r4, #32]
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__sinit+0x2c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f5      	bne.n	800115c <__sinit+0xc>
 8001170:	f7ff ffc4 	bl	80010fc <global_stdio_init.part.0>
 8001174:	e7f2      	b.n	800115c <__sinit+0xc>
 8001176:	bf00      	nop
 8001178:	080010bd 	.word	0x080010bd
 800117c:	200001e4 	.word	0x200001e4

08001180 <_fwalk_sglue>:
 8001180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001184:	4607      	mov	r7, r0
 8001186:	4688      	mov	r8, r1
 8001188:	4614      	mov	r4, r2
 800118a:	2600      	movs	r6, #0
 800118c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001190:	f1b9 0901 	subs.w	r9, r9, #1
 8001194:	d505      	bpl.n	80011a2 <_fwalk_sglue+0x22>
 8001196:	6824      	ldr	r4, [r4, #0]
 8001198:	2c00      	cmp	r4, #0
 800119a:	d1f7      	bne.n	800118c <_fwalk_sglue+0xc>
 800119c:	4630      	mov	r0, r6
 800119e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011a2:	89ab      	ldrh	r3, [r5, #12]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d907      	bls.n	80011b8 <_fwalk_sglue+0x38>
 80011a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80011ac:	3301      	adds	r3, #1
 80011ae:	d003      	beq.n	80011b8 <_fwalk_sglue+0x38>
 80011b0:	4629      	mov	r1, r5
 80011b2:	4638      	mov	r0, r7
 80011b4:	47c0      	blx	r8
 80011b6:	4306      	orrs	r6, r0
 80011b8:	3568      	adds	r5, #104	@ 0x68
 80011ba:	e7e9      	b.n	8001190 <_fwalk_sglue+0x10>

080011bc <iprintf>:
 80011bc:	b40f      	push	{r0, r1, r2, r3}
 80011be:	b507      	push	{r0, r1, r2, lr}
 80011c0:	4906      	ldr	r1, [pc, #24]	@ (80011dc <iprintf+0x20>)
 80011c2:	ab04      	add	r3, sp, #16
 80011c4:	6808      	ldr	r0, [r1, #0]
 80011c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80011ca:	6881      	ldr	r1, [r0, #8]
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	f000 f94b 	bl	8001468 <_vfiprintf_r>
 80011d2:	b003      	add	sp, #12
 80011d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80011d8:	b004      	add	sp, #16
 80011da:	4770      	bx	lr
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <__sread>:
 80011e0:	b510      	push	{r4, lr}
 80011e2:	460c      	mov	r4, r1
 80011e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011e8:	f000 f868 	bl	80012bc <_read_r>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	bfab      	itete	ge
 80011f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80011f2:	89a3      	ldrhlt	r3, [r4, #12]
 80011f4:	181b      	addge	r3, r3, r0
 80011f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80011fa:	bfac      	ite	ge
 80011fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80011fe:	81a3      	strhlt	r3, [r4, #12]
 8001200:	bd10      	pop	{r4, pc}

08001202 <__swrite>:
 8001202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001206:	461f      	mov	r7, r3
 8001208:	898b      	ldrh	r3, [r1, #12]
 800120a:	05db      	lsls	r3, r3, #23
 800120c:	4605      	mov	r5, r0
 800120e:	460c      	mov	r4, r1
 8001210:	4616      	mov	r6, r2
 8001212:	d505      	bpl.n	8001220 <__swrite+0x1e>
 8001214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001218:	2302      	movs	r3, #2
 800121a:	2200      	movs	r2, #0
 800121c:	f000 f83c 	bl	8001298 <_lseek_r>
 8001220:	89a3      	ldrh	r3, [r4, #12]
 8001222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	4632      	mov	r2, r6
 800122e:	463b      	mov	r3, r7
 8001230:	4628      	mov	r0, r5
 8001232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001236:	f000 b863 	b.w	8001300 <_write_r>

0800123a <__sseek>:
 800123a:	b510      	push	{r4, lr}
 800123c:	460c      	mov	r4, r1
 800123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001242:	f000 f829 	bl	8001298 <_lseek_r>
 8001246:	1c43      	adds	r3, r0, #1
 8001248:	89a3      	ldrh	r3, [r4, #12]
 800124a:	bf15      	itete	ne
 800124c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800124e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001252:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001256:	81a3      	strheq	r3, [r4, #12]
 8001258:	bf18      	it	ne
 800125a:	81a3      	strhne	r3, [r4, #12]
 800125c:	bd10      	pop	{r4, pc}

0800125e <__sclose>:
 800125e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001262:	f000 b809 	b.w	8001278 <_close_r>

08001266 <memset>:
 8001266:	4402      	add	r2, r0
 8001268:	4603      	mov	r3, r0
 800126a:	4293      	cmp	r3, r2
 800126c:	d100      	bne.n	8001270 <memset+0xa>
 800126e:	4770      	bx	lr
 8001270:	f803 1b01 	strb.w	r1, [r3], #1
 8001274:	e7f9      	b.n	800126a <memset+0x4>
	...

08001278 <_close_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	4d06      	ldr	r5, [pc, #24]	@ (8001294 <_close_r+0x1c>)
 800127c:	2300      	movs	r3, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	f7ff fd95 	bl	8000db2 <_close>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d102      	bne.n	8001292 <_close_r+0x1a>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	b103      	cbz	r3, 8001292 <_close_r+0x1a>
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	200001e8 	.word	0x200001e8

08001298 <_lseek_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d07      	ldr	r5, [pc, #28]	@ (80012b8 <_lseek_r+0x20>)
 800129c:	4604      	mov	r4, r0
 800129e:	4608      	mov	r0, r1
 80012a0:	4611      	mov	r1, r2
 80012a2:	2200      	movs	r2, #0
 80012a4:	602a      	str	r2, [r5, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f7ff fdaa 	bl	8000e00 <_lseek>
 80012ac:	1c43      	adds	r3, r0, #1
 80012ae:	d102      	bne.n	80012b6 <_lseek_r+0x1e>
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	b103      	cbz	r3, 80012b6 <_lseek_r+0x1e>
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	200001e8 	.word	0x200001e8

080012bc <_read_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4d07      	ldr	r5, [pc, #28]	@ (80012dc <_read_r+0x20>)
 80012c0:	4604      	mov	r4, r0
 80012c2:	4608      	mov	r0, r1
 80012c4:	4611      	mov	r1, r2
 80012c6:	2200      	movs	r2, #0
 80012c8:	602a      	str	r2, [r5, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	f7ff fd38 	bl	8000d40 <_read>
 80012d0:	1c43      	adds	r3, r0, #1
 80012d2:	d102      	bne.n	80012da <_read_r+0x1e>
 80012d4:	682b      	ldr	r3, [r5, #0]
 80012d6:	b103      	cbz	r3, 80012da <_read_r+0x1e>
 80012d8:	6023      	str	r3, [r4, #0]
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	200001e8 	.word	0x200001e8

080012e0 <_sbrk_r>:
 80012e0:	b538      	push	{r3, r4, r5, lr}
 80012e2:	4d06      	ldr	r5, [pc, #24]	@ (80012fc <_sbrk_r+0x1c>)
 80012e4:	2300      	movs	r3, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	602b      	str	r3, [r5, #0]
 80012ec:	f7ff fd96 	bl	8000e1c <_sbrk>
 80012f0:	1c43      	adds	r3, r0, #1
 80012f2:	d102      	bne.n	80012fa <_sbrk_r+0x1a>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	b103      	cbz	r3, 80012fa <_sbrk_r+0x1a>
 80012f8:	6023      	str	r3, [r4, #0]
 80012fa:	bd38      	pop	{r3, r4, r5, pc}
 80012fc:	200001e8 	.word	0x200001e8

08001300 <_write_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d07      	ldr	r5, [pc, #28]	@ (8001320 <_write_r+0x20>)
 8001304:	4604      	mov	r4, r0
 8001306:	4608      	mov	r0, r1
 8001308:	4611      	mov	r1, r2
 800130a:	2200      	movs	r2, #0
 800130c:	602a      	str	r2, [r5, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f7ff fd33 	bl	8000d7a <_write>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_write_r+0x1e>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_write_r+0x1e>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	200001e8 	.word	0x200001e8

08001324 <__errno>:
 8001324:	4b01      	ldr	r3, [pc, #4]	@ (800132c <__errno+0x8>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c

08001330 <__libc_init_array>:
 8001330:	b570      	push	{r4, r5, r6, lr}
 8001332:	4d0d      	ldr	r5, [pc, #52]	@ (8001368 <__libc_init_array+0x38>)
 8001334:	4c0d      	ldr	r4, [pc, #52]	@ (800136c <__libc_init_array+0x3c>)
 8001336:	1b64      	subs	r4, r4, r5
 8001338:	10a4      	asrs	r4, r4, #2
 800133a:	2600      	movs	r6, #0
 800133c:	42a6      	cmp	r6, r4
 800133e:	d109      	bne.n	8001354 <__libc_init_array+0x24>
 8001340:	4d0b      	ldr	r5, [pc, #44]	@ (8001370 <__libc_init_array+0x40>)
 8001342:	4c0c      	ldr	r4, [pc, #48]	@ (8001374 <__libc_init_array+0x44>)
 8001344:	f000 fcf8 	bl	8001d38 <_init>
 8001348:	1b64      	subs	r4, r4, r5
 800134a:	10a4      	asrs	r4, r4, #2
 800134c:	2600      	movs	r6, #0
 800134e:	42a6      	cmp	r6, r4
 8001350:	d105      	bne.n	800135e <__libc_init_array+0x2e>
 8001352:	bd70      	pop	{r4, r5, r6, pc}
 8001354:	f855 3b04 	ldr.w	r3, [r5], #4
 8001358:	4798      	blx	r3
 800135a:	3601      	adds	r6, #1
 800135c:	e7ee      	b.n	800133c <__libc_init_array+0xc>
 800135e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001362:	4798      	blx	r3
 8001364:	3601      	adds	r6, #1
 8001366:	e7f2      	b.n	800134e <__libc_init_array+0x1e>
 8001368:	08001d98 	.word	0x08001d98
 800136c:	08001d98 	.word	0x08001d98
 8001370:	08001d98 	.word	0x08001d98
 8001374:	08001d9c 	.word	0x08001d9c

08001378 <__retarget_lock_init_recursive>:
 8001378:	4770      	bx	lr

0800137a <__retarget_lock_acquire_recursive>:
 800137a:	4770      	bx	lr

0800137c <__retarget_lock_release_recursive>:
 800137c:	4770      	bx	lr
	...

08001380 <_free_r>:
 8001380:	b538      	push	{r3, r4, r5, lr}
 8001382:	4605      	mov	r5, r0
 8001384:	2900      	cmp	r1, #0
 8001386:	d041      	beq.n	800140c <_free_r+0x8c>
 8001388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800138c:	1f0c      	subs	r4, r1, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	bfb8      	it	lt
 8001392:	18e4      	addlt	r4, r4, r3
 8001394:	f7ff fe44 	bl	8001020 <__malloc_lock>
 8001398:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <_free_r+0x90>)
 800139a:	6813      	ldr	r3, [r2, #0]
 800139c:	b933      	cbnz	r3, 80013ac <_free_r+0x2c>
 800139e:	6063      	str	r3, [r4, #4]
 80013a0:	6014      	str	r4, [r2, #0]
 80013a2:	4628      	mov	r0, r5
 80013a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013a8:	f7ff be40 	b.w	800102c <__malloc_unlock>
 80013ac:	42a3      	cmp	r3, r4
 80013ae:	d908      	bls.n	80013c2 <_free_r+0x42>
 80013b0:	6820      	ldr	r0, [r4, #0]
 80013b2:	1821      	adds	r1, r4, r0
 80013b4:	428b      	cmp	r3, r1
 80013b6:	bf01      	itttt	eq
 80013b8:	6819      	ldreq	r1, [r3, #0]
 80013ba:	685b      	ldreq	r3, [r3, #4]
 80013bc:	1809      	addeq	r1, r1, r0
 80013be:	6021      	streq	r1, [r4, #0]
 80013c0:	e7ed      	b.n	800139e <_free_r+0x1e>
 80013c2:	461a      	mov	r2, r3
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	b10b      	cbz	r3, 80013cc <_free_r+0x4c>
 80013c8:	42a3      	cmp	r3, r4
 80013ca:	d9fa      	bls.n	80013c2 <_free_r+0x42>
 80013cc:	6811      	ldr	r1, [r2, #0]
 80013ce:	1850      	adds	r0, r2, r1
 80013d0:	42a0      	cmp	r0, r4
 80013d2:	d10b      	bne.n	80013ec <_free_r+0x6c>
 80013d4:	6820      	ldr	r0, [r4, #0]
 80013d6:	4401      	add	r1, r0
 80013d8:	1850      	adds	r0, r2, r1
 80013da:	4283      	cmp	r3, r0
 80013dc:	6011      	str	r1, [r2, #0]
 80013de:	d1e0      	bne.n	80013a2 <_free_r+0x22>
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	6053      	str	r3, [r2, #4]
 80013e6:	4408      	add	r0, r1
 80013e8:	6010      	str	r0, [r2, #0]
 80013ea:	e7da      	b.n	80013a2 <_free_r+0x22>
 80013ec:	d902      	bls.n	80013f4 <_free_r+0x74>
 80013ee:	230c      	movs	r3, #12
 80013f0:	602b      	str	r3, [r5, #0]
 80013f2:	e7d6      	b.n	80013a2 <_free_r+0x22>
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	1821      	adds	r1, r4, r0
 80013f8:	428b      	cmp	r3, r1
 80013fa:	bf04      	itt	eq
 80013fc:	6819      	ldreq	r1, [r3, #0]
 80013fe:	685b      	ldreq	r3, [r3, #4]
 8001400:	6063      	str	r3, [r4, #4]
 8001402:	bf04      	itt	eq
 8001404:	1809      	addeq	r1, r1, r0
 8001406:	6021      	streq	r1, [r4, #0]
 8001408:	6054      	str	r4, [r2, #4]
 800140a:	e7ca      	b.n	80013a2 <_free_r+0x22>
 800140c:	bd38      	pop	{r3, r4, r5, pc}
 800140e:	bf00      	nop
 8001410:	200000a8 	.word	0x200000a8

08001414 <__sfputc_r>:
 8001414:	6893      	ldr	r3, [r2, #8]
 8001416:	3b01      	subs	r3, #1
 8001418:	2b00      	cmp	r3, #0
 800141a:	b410      	push	{r4}
 800141c:	6093      	str	r3, [r2, #8]
 800141e:	da08      	bge.n	8001432 <__sfputc_r+0x1e>
 8001420:	6994      	ldr	r4, [r2, #24]
 8001422:	42a3      	cmp	r3, r4
 8001424:	db01      	blt.n	800142a <__sfputc_r+0x16>
 8001426:	290a      	cmp	r1, #10
 8001428:	d103      	bne.n	8001432 <__sfputc_r+0x1e>
 800142a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800142e:	f000 bb6b 	b.w	8001b08 <__swbuf_r>
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	1c58      	adds	r0, r3, #1
 8001436:	6010      	str	r0, [r2, #0]
 8001438:	7019      	strb	r1, [r3, #0]
 800143a:	4608      	mov	r0, r1
 800143c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001440:	4770      	bx	lr

08001442 <__sfputs_r>:
 8001442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001444:	4606      	mov	r6, r0
 8001446:	460f      	mov	r7, r1
 8001448:	4614      	mov	r4, r2
 800144a:	18d5      	adds	r5, r2, r3
 800144c:	42ac      	cmp	r4, r5
 800144e:	d101      	bne.n	8001454 <__sfputs_r+0x12>
 8001450:	2000      	movs	r0, #0
 8001452:	e007      	b.n	8001464 <__sfputs_r+0x22>
 8001454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001458:	463a      	mov	r2, r7
 800145a:	4630      	mov	r0, r6
 800145c:	f7ff ffda 	bl	8001414 <__sfputc_r>
 8001460:	1c43      	adds	r3, r0, #1
 8001462:	d1f3      	bne.n	800144c <__sfputs_r+0xa>
 8001464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001468 <_vfiprintf_r>:
 8001468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800146c:	460d      	mov	r5, r1
 800146e:	b09d      	sub	sp, #116	@ 0x74
 8001470:	4614      	mov	r4, r2
 8001472:	4698      	mov	r8, r3
 8001474:	4606      	mov	r6, r0
 8001476:	b118      	cbz	r0, 8001480 <_vfiprintf_r+0x18>
 8001478:	6a03      	ldr	r3, [r0, #32]
 800147a:	b90b      	cbnz	r3, 8001480 <_vfiprintf_r+0x18>
 800147c:	f7ff fe68 	bl	8001150 <__sinit>
 8001480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001482:	07d9      	lsls	r1, r3, #31
 8001484:	d405      	bmi.n	8001492 <_vfiprintf_r+0x2a>
 8001486:	89ab      	ldrh	r3, [r5, #12]
 8001488:	059a      	lsls	r2, r3, #22
 800148a:	d402      	bmi.n	8001492 <_vfiprintf_r+0x2a>
 800148c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800148e:	f7ff ff74 	bl	800137a <__retarget_lock_acquire_recursive>
 8001492:	89ab      	ldrh	r3, [r5, #12]
 8001494:	071b      	lsls	r3, r3, #28
 8001496:	d501      	bpl.n	800149c <_vfiprintf_r+0x34>
 8001498:	692b      	ldr	r3, [r5, #16]
 800149a:	b99b      	cbnz	r3, 80014c4 <_vfiprintf_r+0x5c>
 800149c:	4629      	mov	r1, r5
 800149e:	4630      	mov	r0, r6
 80014a0:	f000 fb70 	bl	8001b84 <__swsetup_r>
 80014a4:	b170      	cbz	r0, 80014c4 <_vfiprintf_r+0x5c>
 80014a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014a8:	07dc      	lsls	r4, r3, #31
 80014aa:	d504      	bpl.n	80014b6 <_vfiprintf_r+0x4e>
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	b01d      	add	sp, #116	@ 0x74
 80014b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b6:	89ab      	ldrh	r3, [r5, #12]
 80014b8:	0598      	lsls	r0, r3, #22
 80014ba:	d4f7      	bmi.n	80014ac <_vfiprintf_r+0x44>
 80014bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014be:	f7ff ff5d 	bl	800137c <__retarget_lock_release_recursive>
 80014c2:	e7f3      	b.n	80014ac <_vfiprintf_r+0x44>
 80014c4:	2300      	movs	r3, #0
 80014c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80014c8:	2320      	movs	r3, #32
 80014ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80014d2:	2330      	movs	r3, #48	@ 0x30
 80014d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001684 <_vfiprintf_r+0x21c>
 80014d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014dc:	f04f 0901 	mov.w	r9, #1
 80014e0:	4623      	mov	r3, r4
 80014e2:	469a      	mov	sl, r3
 80014e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014e8:	b10a      	cbz	r2, 80014ee <_vfiprintf_r+0x86>
 80014ea:	2a25      	cmp	r2, #37	@ 0x25
 80014ec:	d1f9      	bne.n	80014e2 <_vfiprintf_r+0x7a>
 80014ee:	ebba 0b04 	subs.w	fp, sl, r4
 80014f2:	d00b      	beq.n	800150c <_vfiprintf_r+0xa4>
 80014f4:	465b      	mov	r3, fp
 80014f6:	4622      	mov	r2, r4
 80014f8:	4629      	mov	r1, r5
 80014fa:	4630      	mov	r0, r6
 80014fc:	f7ff ffa1 	bl	8001442 <__sfputs_r>
 8001500:	3001      	adds	r0, #1
 8001502:	f000 80a7 	beq.w	8001654 <_vfiprintf_r+0x1ec>
 8001506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001508:	445a      	add	r2, fp
 800150a:	9209      	str	r2, [sp, #36]	@ 0x24
 800150c:	f89a 3000 	ldrb.w	r3, [sl]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 809f 	beq.w	8001654 <_vfiprintf_r+0x1ec>
 8001516:	2300      	movs	r3, #0
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001520:	f10a 0a01 	add.w	sl, sl, #1
 8001524:	9304      	str	r3, [sp, #16]
 8001526:	9307      	str	r3, [sp, #28]
 8001528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800152c:	931a      	str	r3, [sp, #104]	@ 0x68
 800152e:	4654      	mov	r4, sl
 8001530:	2205      	movs	r2, #5
 8001532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001536:	4853      	ldr	r0, [pc, #332]	@ (8001684 <_vfiprintf_r+0x21c>)
 8001538:	f7fe fe4a 	bl	80001d0 <memchr>
 800153c:	9a04      	ldr	r2, [sp, #16]
 800153e:	b9d8      	cbnz	r0, 8001578 <_vfiprintf_r+0x110>
 8001540:	06d1      	lsls	r1, r2, #27
 8001542:	bf44      	itt	mi
 8001544:	2320      	movmi	r3, #32
 8001546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800154a:	0713      	lsls	r3, r2, #28
 800154c:	bf44      	itt	mi
 800154e:	232b      	movmi	r3, #43	@ 0x2b
 8001550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001554:	f89a 3000 	ldrb.w	r3, [sl]
 8001558:	2b2a      	cmp	r3, #42	@ 0x2a
 800155a:	d015      	beq.n	8001588 <_vfiprintf_r+0x120>
 800155c:	9a07      	ldr	r2, [sp, #28]
 800155e:	4654      	mov	r4, sl
 8001560:	2000      	movs	r0, #0
 8001562:	f04f 0c0a 	mov.w	ip, #10
 8001566:	4621      	mov	r1, r4
 8001568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800156c:	3b30      	subs	r3, #48	@ 0x30
 800156e:	2b09      	cmp	r3, #9
 8001570:	d94b      	bls.n	800160a <_vfiprintf_r+0x1a2>
 8001572:	b1b0      	cbz	r0, 80015a2 <_vfiprintf_r+0x13a>
 8001574:	9207      	str	r2, [sp, #28]
 8001576:	e014      	b.n	80015a2 <_vfiprintf_r+0x13a>
 8001578:	eba0 0308 	sub.w	r3, r0, r8
 800157c:	fa09 f303 	lsl.w	r3, r9, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	9304      	str	r3, [sp, #16]
 8001584:	46a2      	mov	sl, r4
 8001586:	e7d2      	b.n	800152e <_vfiprintf_r+0xc6>
 8001588:	9b03      	ldr	r3, [sp, #12]
 800158a:	1d19      	adds	r1, r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	9103      	str	r1, [sp, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	bfbb      	ittet	lt
 8001594:	425b      	neglt	r3, r3
 8001596:	f042 0202 	orrlt.w	r2, r2, #2
 800159a:	9307      	strge	r3, [sp, #28]
 800159c:	9307      	strlt	r3, [sp, #28]
 800159e:	bfb8      	it	lt
 80015a0:	9204      	strlt	r2, [sp, #16]
 80015a2:	7823      	ldrb	r3, [r4, #0]
 80015a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80015a6:	d10a      	bne.n	80015be <_vfiprintf_r+0x156>
 80015a8:	7863      	ldrb	r3, [r4, #1]
 80015aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80015ac:	d132      	bne.n	8001614 <_vfiprintf_r+0x1ac>
 80015ae:	9b03      	ldr	r3, [sp, #12]
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	9203      	str	r2, [sp, #12]
 80015b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80015ba:	3402      	adds	r4, #2
 80015bc:	9305      	str	r3, [sp, #20]
 80015be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001694 <_vfiprintf_r+0x22c>
 80015c2:	7821      	ldrb	r1, [r4, #0]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4650      	mov	r0, sl
 80015c8:	f7fe fe02 	bl	80001d0 <memchr>
 80015cc:	b138      	cbz	r0, 80015de <_vfiprintf_r+0x176>
 80015ce:	9b04      	ldr	r3, [sp, #16]
 80015d0:	eba0 000a 	sub.w	r0, r0, sl
 80015d4:	2240      	movs	r2, #64	@ 0x40
 80015d6:	4082      	lsls	r2, r0
 80015d8:	4313      	orrs	r3, r2
 80015da:	3401      	adds	r4, #1
 80015dc:	9304      	str	r3, [sp, #16]
 80015de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015e2:	4829      	ldr	r0, [pc, #164]	@ (8001688 <_vfiprintf_r+0x220>)
 80015e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015e8:	2206      	movs	r2, #6
 80015ea:	f7fe fdf1 	bl	80001d0 <memchr>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	d03f      	beq.n	8001672 <_vfiprintf_r+0x20a>
 80015f2:	4b26      	ldr	r3, [pc, #152]	@ (800168c <_vfiprintf_r+0x224>)
 80015f4:	bb1b      	cbnz	r3, 800163e <_vfiprintf_r+0x1d6>
 80015f6:	9b03      	ldr	r3, [sp, #12]
 80015f8:	3307      	adds	r3, #7
 80015fa:	f023 0307 	bic.w	r3, r3, #7
 80015fe:	3308      	adds	r3, #8
 8001600:	9303      	str	r3, [sp, #12]
 8001602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001604:	443b      	add	r3, r7
 8001606:	9309      	str	r3, [sp, #36]	@ 0x24
 8001608:	e76a      	b.n	80014e0 <_vfiprintf_r+0x78>
 800160a:	fb0c 3202 	mla	r2, ip, r2, r3
 800160e:	460c      	mov	r4, r1
 8001610:	2001      	movs	r0, #1
 8001612:	e7a8      	b.n	8001566 <_vfiprintf_r+0xfe>
 8001614:	2300      	movs	r3, #0
 8001616:	3401      	adds	r4, #1
 8001618:	9305      	str	r3, [sp, #20]
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 0c0a 	mov.w	ip, #10
 8001620:	4620      	mov	r0, r4
 8001622:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001626:	3a30      	subs	r2, #48	@ 0x30
 8001628:	2a09      	cmp	r2, #9
 800162a:	d903      	bls.n	8001634 <_vfiprintf_r+0x1cc>
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0c6      	beq.n	80015be <_vfiprintf_r+0x156>
 8001630:	9105      	str	r1, [sp, #20]
 8001632:	e7c4      	b.n	80015be <_vfiprintf_r+0x156>
 8001634:	fb0c 2101 	mla	r1, ip, r1, r2
 8001638:	4604      	mov	r4, r0
 800163a:	2301      	movs	r3, #1
 800163c:	e7f0      	b.n	8001620 <_vfiprintf_r+0x1b8>
 800163e:	ab03      	add	r3, sp, #12
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	462a      	mov	r2, r5
 8001644:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <_vfiprintf_r+0x228>)
 8001646:	a904      	add	r1, sp, #16
 8001648:	4630      	mov	r0, r6
 800164a:	f3af 8000 	nop.w
 800164e:	4607      	mov	r7, r0
 8001650:	1c78      	adds	r0, r7, #1
 8001652:	d1d6      	bne.n	8001602 <_vfiprintf_r+0x19a>
 8001654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001656:	07d9      	lsls	r1, r3, #31
 8001658:	d405      	bmi.n	8001666 <_vfiprintf_r+0x1fe>
 800165a:	89ab      	ldrh	r3, [r5, #12]
 800165c:	059a      	lsls	r2, r3, #22
 800165e:	d402      	bmi.n	8001666 <_vfiprintf_r+0x1fe>
 8001660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001662:	f7ff fe8b 	bl	800137c <__retarget_lock_release_recursive>
 8001666:	89ab      	ldrh	r3, [r5, #12]
 8001668:	065b      	lsls	r3, r3, #25
 800166a:	f53f af1f 	bmi.w	80014ac <_vfiprintf_r+0x44>
 800166e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001670:	e71e      	b.n	80014b0 <_vfiprintf_r+0x48>
 8001672:	ab03      	add	r3, sp, #12
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	462a      	mov	r2, r5
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <_vfiprintf_r+0x228>)
 800167a:	a904      	add	r1, sp, #16
 800167c:	4630      	mov	r0, r6
 800167e:	f000 f879 	bl	8001774 <_printf_i>
 8001682:	e7e4      	b.n	800164e <_vfiprintf_r+0x1e6>
 8001684:	08001d5c 	.word	0x08001d5c
 8001688:	08001d66 	.word	0x08001d66
 800168c:	00000000 	.word	0x00000000
 8001690:	08001443 	.word	0x08001443
 8001694:	08001d62 	.word	0x08001d62

08001698 <_printf_common>:
 8001698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800169c:	4616      	mov	r6, r2
 800169e:	4698      	mov	r8, r3
 80016a0:	688a      	ldr	r2, [r1, #8]
 80016a2:	690b      	ldr	r3, [r1, #16]
 80016a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	bfb8      	it	lt
 80016ac:	4613      	movlt	r3, r2
 80016ae:	6033      	str	r3, [r6, #0]
 80016b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80016b4:	4607      	mov	r7, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	b10a      	cbz	r2, 80016be <_printf_common+0x26>
 80016ba:	3301      	adds	r3, #1
 80016bc:	6033      	str	r3, [r6, #0]
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	0699      	lsls	r1, r3, #26
 80016c2:	bf42      	ittt	mi
 80016c4:	6833      	ldrmi	r3, [r6, #0]
 80016c6:	3302      	addmi	r3, #2
 80016c8:	6033      	strmi	r3, [r6, #0]
 80016ca:	6825      	ldr	r5, [r4, #0]
 80016cc:	f015 0506 	ands.w	r5, r5, #6
 80016d0:	d106      	bne.n	80016e0 <_printf_common+0x48>
 80016d2:	f104 0a19 	add.w	sl, r4, #25
 80016d6:	68e3      	ldr	r3, [r4, #12]
 80016d8:	6832      	ldr	r2, [r6, #0]
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	42ab      	cmp	r3, r5
 80016de:	dc26      	bgt.n	800172e <_printf_common+0x96>
 80016e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	3b00      	subs	r3, #0
 80016e8:	bf18      	it	ne
 80016ea:	2301      	movne	r3, #1
 80016ec:	0692      	lsls	r2, r2, #26
 80016ee:	d42b      	bmi.n	8001748 <_printf_common+0xb0>
 80016f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016f4:	4641      	mov	r1, r8
 80016f6:	4638      	mov	r0, r7
 80016f8:	47c8      	blx	r9
 80016fa:	3001      	adds	r0, #1
 80016fc:	d01e      	beq.n	800173c <_printf_common+0xa4>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	6922      	ldr	r2, [r4, #16]
 8001702:	f003 0306 	and.w	r3, r3, #6
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf02      	ittt	eq
 800170a:	68e5      	ldreq	r5, [r4, #12]
 800170c:	6833      	ldreq	r3, [r6, #0]
 800170e:	1aed      	subeq	r5, r5, r3
 8001710:	68a3      	ldr	r3, [r4, #8]
 8001712:	bf0c      	ite	eq
 8001714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001718:	2500      	movne	r5, #0
 800171a:	4293      	cmp	r3, r2
 800171c:	bfc4      	itt	gt
 800171e:	1a9b      	subgt	r3, r3, r2
 8001720:	18ed      	addgt	r5, r5, r3
 8001722:	2600      	movs	r6, #0
 8001724:	341a      	adds	r4, #26
 8001726:	42b5      	cmp	r5, r6
 8001728:	d11a      	bne.n	8001760 <_printf_common+0xc8>
 800172a:	2000      	movs	r0, #0
 800172c:	e008      	b.n	8001740 <_printf_common+0xa8>
 800172e:	2301      	movs	r3, #1
 8001730:	4652      	mov	r2, sl
 8001732:	4641      	mov	r1, r8
 8001734:	4638      	mov	r0, r7
 8001736:	47c8      	blx	r9
 8001738:	3001      	adds	r0, #1
 800173a:	d103      	bne.n	8001744 <_printf_common+0xac>
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001744:	3501      	adds	r5, #1
 8001746:	e7c6      	b.n	80016d6 <_printf_common+0x3e>
 8001748:	18e1      	adds	r1, r4, r3
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	2030      	movs	r0, #48	@ 0x30
 800174e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001752:	4422      	add	r2, r4
 8001754:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001758:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800175c:	3302      	adds	r3, #2
 800175e:	e7c7      	b.n	80016f0 <_printf_common+0x58>
 8001760:	2301      	movs	r3, #1
 8001762:	4622      	mov	r2, r4
 8001764:	4641      	mov	r1, r8
 8001766:	4638      	mov	r0, r7
 8001768:	47c8      	blx	r9
 800176a:	3001      	adds	r0, #1
 800176c:	d0e6      	beq.n	800173c <_printf_common+0xa4>
 800176e:	3601      	adds	r6, #1
 8001770:	e7d9      	b.n	8001726 <_printf_common+0x8e>
	...

08001774 <_printf_i>:
 8001774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001778:	7e0f      	ldrb	r7, [r1, #24]
 800177a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800177c:	2f78      	cmp	r7, #120	@ 0x78
 800177e:	4691      	mov	r9, r2
 8001780:	4680      	mov	r8, r0
 8001782:	460c      	mov	r4, r1
 8001784:	469a      	mov	sl, r3
 8001786:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800178a:	d807      	bhi.n	800179c <_printf_i+0x28>
 800178c:	2f62      	cmp	r7, #98	@ 0x62
 800178e:	d80a      	bhi.n	80017a6 <_printf_i+0x32>
 8001790:	2f00      	cmp	r7, #0
 8001792:	f000 80d1 	beq.w	8001938 <_printf_i+0x1c4>
 8001796:	2f58      	cmp	r7, #88	@ 0x58
 8001798:	f000 80b8 	beq.w	800190c <_printf_i+0x198>
 800179c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80017a4:	e03a      	b.n	800181c <_printf_i+0xa8>
 80017a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80017aa:	2b15      	cmp	r3, #21
 80017ac:	d8f6      	bhi.n	800179c <_printf_i+0x28>
 80017ae:	a101      	add	r1, pc, #4	@ (adr r1, 80017b4 <_printf_i+0x40>)
 80017b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017b4:	0800180d 	.word	0x0800180d
 80017b8:	08001821 	.word	0x08001821
 80017bc:	0800179d 	.word	0x0800179d
 80017c0:	0800179d 	.word	0x0800179d
 80017c4:	0800179d 	.word	0x0800179d
 80017c8:	0800179d 	.word	0x0800179d
 80017cc:	08001821 	.word	0x08001821
 80017d0:	0800179d 	.word	0x0800179d
 80017d4:	0800179d 	.word	0x0800179d
 80017d8:	0800179d 	.word	0x0800179d
 80017dc:	0800179d 	.word	0x0800179d
 80017e0:	0800191f 	.word	0x0800191f
 80017e4:	0800184b 	.word	0x0800184b
 80017e8:	080018d9 	.word	0x080018d9
 80017ec:	0800179d 	.word	0x0800179d
 80017f0:	0800179d 	.word	0x0800179d
 80017f4:	08001941 	.word	0x08001941
 80017f8:	0800179d 	.word	0x0800179d
 80017fc:	0800184b 	.word	0x0800184b
 8001800:	0800179d 	.word	0x0800179d
 8001804:	0800179d 	.word	0x0800179d
 8001808:	080018e1 	.word	0x080018e1
 800180c:	6833      	ldr	r3, [r6, #0]
 800180e:	1d1a      	adds	r2, r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6032      	str	r2, [r6, #0]
 8001814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001818:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800181c:	2301      	movs	r3, #1
 800181e:	e09c      	b.n	800195a <_printf_i+0x1e6>
 8001820:	6833      	ldr	r3, [r6, #0]
 8001822:	6820      	ldr	r0, [r4, #0]
 8001824:	1d19      	adds	r1, r3, #4
 8001826:	6031      	str	r1, [r6, #0]
 8001828:	0606      	lsls	r6, r0, #24
 800182a:	d501      	bpl.n	8001830 <_printf_i+0xbc>
 800182c:	681d      	ldr	r5, [r3, #0]
 800182e:	e003      	b.n	8001838 <_printf_i+0xc4>
 8001830:	0645      	lsls	r5, r0, #25
 8001832:	d5fb      	bpl.n	800182c <_printf_i+0xb8>
 8001834:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001838:	2d00      	cmp	r5, #0
 800183a:	da03      	bge.n	8001844 <_printf_i+0xd0>
 800183c:	232d      	movs	r3, #45	@ 0x2d
 800183e:	426d      	negs	r5, r5
 8001840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001844:	4858      	ldr	r0, [pc, #352]	@ (80019a8 <_printf_i+0x234>)
 8001846:	230a      	movs	r3, #10
 8001848:	e011      	b.n	800186e <_printf_i+0xfa>
 800184a:	6821      	ldr	r1, [r4, #0]
 800184c:	6833      	ldr	r3, [r6, #0]
 800184e:	0608      	lsls	r0, r1, #24
 8001850:	f853 5b04 	ldr.w	r5, [r3], #4
 8001854:	d402      	bmi.n	800185c <_printf_i+0xe8>
 8001856:	0649      	lsls	r1, r1, #25
 8001858:	bf48      	it	mi
 800185a:	b2ad      	uxthmi	r5, r5
 800185c:	2f6f      	cmp	r7, #111	@ 0x6f
 800185e:	4852      	ldr	r0, [pc, #328]	@ (80019a8 <_printf_i+0x234>)
 8001860:	6033      	str	r3, [r6, #0]
 8001862:	bf14      	ite	ne
 8001864:	230a      	movne	r3, #10
 8001866:	2308      	moveq	r3, #8
 8001868:	2100      	movs	r1, #0
 800186a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800186e:	6866      	ldr	r6, [r4, #4]
 8001870:	60a6      	str	r6, [r4, #8]
 8001872:	2e00      	cmp	r6, #0
 8001874:	db05      	blt.n	8001882 <_printf_i+0x10e>
 8001876:	6821      	ldr	r1, [r4, #0]
 8001878:	432e      	orrs	r6, r5
 800187a:	f021 0104 	bic.w	r1, r1, #4
 800187e:	6021      	str	r1, [r4, #0]
 8001880:	d04b      	beq.n	800191a <_printf_i+0x1a6>
 8001882:	4616      	mov	r6, r2
 8001884:	fbb5 f1f3 	udiv	r1, r5, r3
 8001888:	fb03 5711 	mls	r7, r3, r1, r5
 800188c:	5dc7      	ldrb	r7, [r0, r7]
 800188e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001892:	462f      	mov	r7, r5
 8001894:	42bb      	cmp	r3, r7
 8001896:	460d      	mov	r5, r1
 8001898:	d9f4      	bls.n	8001884 <_printf_i+0x110>
 800189a:	2b08      	cmp	r3, #8
 800189c:	d10b      	bne.n	80018b6 <_printf_i+0x142>
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	07df      	lsls	r7, r3, #31
 80018a2:	d508      	bpl.n	80018b6 <_printf_i+0x142>
 80018a4:	6923      	ldr	r3, [r4, #16]
 80018a6:	6861      	ldr	r1, [r4, #4]
 80018a8:	4299      	cmp	r1, r3
 80018aa:	bfde      	ittt	le
 80018ac:	2330      	movle	r3, #48	@ 0x30
 80018ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80018b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80018b6:	1b92      	subs	r2, r2, r6
 80018b8:	6122      	str	r2, [r4, #16]
 80018ba:	f8cd a000 	str.w	sl, [sp]
 80018be:	464b      	mov	r3, r9
 80018c0:	aa03      	add	r2, sp, #12
 80018c2:	4621      	mov	r1, r4
 80018c4:	4640      	mov	r0, r8
 80018c6:	f7ff fee7 	bl	8001698 <_printf_common>
 80018ca:	3001      	adds	r0, #1
 80018cc:	d14a      	bne.n	8001964 <_printf_i+0x1f0>
 80018ce:	f04f 30ff 	mov.w	r0, #4294967295
 80018d2:	b004      	add	sp, #16
 80018d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	f043 0320 	orr.w	r3, r3, #32
 80018de:	6023      	str	r3, [r4, #0]
 80018e0:	4832      	ldr	r0, [pc, #200]	@ (80019ac <_printf_i+0x238>)
 80018e2:	2778      	movs	r7, #120	@ 0x78
 80018e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	6831      	ldr	r1, [r6, #0]
 80018ec:	061f      	lsls	r7, r3, #24
 80018ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80018f2:	d402      	bmi.n	80018fa <_printf_i+0x186>
 80018f4:	065f      	lsls	r7, r3, #25
 80018f6:	bf48      	it	mi
 80018f8:	b2ad      	uxthmi	r5, r5
 80018fa:	6031      	str	r1, [r6, #0]
 80018fc:	07d9      	lsls	r1, r3, #31
 80018fe:	bf44      	itt	mi
 8001900:	f043 0320 	orrmi.w	r3, r3, #32
 8001904:	6023      	strmi	r3, [r4, #0]
 8001906:	b11d      	cbz	r5, 8001910 <_printf_i+0x19c>
 8001908:	2310      	movs	r3, #16
 800190a:	e7ad      	b.n	8001868 <_printf_i+0xf4>
 800190c:	4826      	ldr	r0, [pc, #152]	@ (80019a8 <_printf_i+0x234>)
 800190e:	e7e9      	b.n	80018e4 <_printf_i+0x170>
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	f023 0320 	bic.w	r3, r3, #32
 8001916:	6023      	str	r3, [r4, #0]
 8001918:	e7f6      	b.n	8001908 <_printf_i+0x194>
 800191a:	4616      	mov	r6, r2
 800191c:	e7bd      	b.n	800189a <_printf_i+0x126>
 800191e:	6833      	ldr	r3, [r6, #0]
 8001920:	6825      	ldr	r5, [r4, #0]
 8001922:	6961      	ldr	r1, [r4, #20]
 8001924:	1d18      	adds	r0, r3, #4
 8001926:	6030      	str	r0, [r6, #0]
 8001928:	062e      	lsls	r6, r5, #24
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	d501      	bpl.n	8001932 <_printf_i+0x1be>
 800192e:	6019      	str	r1, [r3, #0]
 8001930:	e002      	b.n	8001938 <_printf_i+0x1c4>
 8001932:	0668      	lsls	r0, r5, #25
 8001934:	d5fb      	bpl.n	800192e <_printf_i+0x1ba>
 8001936:	8019      	strh	r1, [r3, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	6123      	str	r3, [r4, #16]
 800193c:	4616      	mov	r6, r2
 800193e:	e7bc      	b.n	80018ba <_printf_i+0x146>
 8001940:	6833      	ldr	r3, [r6, #0]
 8001942:	1d1a      	adds	r2, r3, #4
 8001944:	6032      	str	r2, [r6, #0]
 8001946:	681e      	ldr	r6, [r3, #0]
 8001948:	6862      	ldr	r2, [r4, #4]
 800194a:	2100      	movs	r1, #0
 800194c:	4630      	mov	r0, r6
 800194e:	f7fe fc3f 	bl	80001d0 <memchr>
 8001952:	b108      	cbz	r0, 8001958 <_printf_i+0x1e4>
 8001954:	1b80      	subs	r0, r0, r6
 8001956:	6060      	str	r0, [r4, #4]
 8001958:	6863      	ldr	r3, [r4, #4]
 800195a:	6123      	str	r3, [r4, #16]
 800195c:	2300      	movs	r3, #0
 800195e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001962:	e7aa      	b.n	80018ba <_printf_i+0x146>
 8001964:	6923      	ldr	r3, [r4, #16]
 8001966:	4632      	mov	r2, r6
 8001968:	4649      	mov	r1, r9
 800196a:	4640      	mov	r0, r8
 800196c:	47d0      	blx	sl
 800196e:	3001      	adds	r0, #1
 8001970:	d0ad      	beq.n	80018ce <_printf_i+0x15a>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	079b      	lsls	r3, r3, #30
 8001976:	d413      	bmi.n	80019a0 <_printf_i+0x22c>
 8001978:	68e0      	ldr	r0, [r4, #12]
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	4298      	cmp	r0, r3
 800197e:	bfb8      	it	lt
 8001980:	4618      	movlt	r0, r3
 8001982:	e7a6      	b.n	80018d2 <_printf_i+0x15e>
 8001984:	2301      	movs	r3, #1
 8001986:	4632      	mov	r2, r6
 8001988:	4649      	mov	r1, r9
 800198a:	4640      	mov	r0, r8
 800198c:	47d0      	blx	sl
 800198e:	3001      	adds	r0, #1
 8001990:	d09d      	beq.n	80018ce <_printf_i+0x15a>
 8001992:	3501      	adds	r5, #1
 8001994:	68e3      	ldr	r3, [r4, #12]
 8001996:	9903      	ldr	r1, [sp, #12]
 8001998:	1a5b      	subs	r3, r3, r1
 800199a:	42ab      	cmp	r3, r5
 800199c:	dcf2      	bgt.n	8001984 <_printf_i+0x210>
 800199e:	e7eb      	b.n	8001978 <_printf_i+0x204>
 80019a0:	2500      	movs	r5, #0
 80019a2:	f104 0619 	add.w	r6, r4, #25
 80019a6:	e7f5      	b.n	8001994 <_printf_i+0x220>
 80019a8:	08001d6d 	.word	0x08001d6d
 80019ac:	08001d7e 	.word	0x08001d7e

080019b0 <__sflush_r>:
 80019b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019b8:	0716      	lsls	r6, r2, #28
 80019ba:	4605      	mov	r5, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	d454      	bmi.n	8001a6a <__sflush_r+0xba>
 80019c0:	684b      	ldr	r3, [r1, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc02      	bgt.n	80019cc <__sflush_r+0x1c>
 80019c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dd48      	ble.n	8001a5e <__sflush_r+0xae>
 80019cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019ce:	2e00      	cmp	r6, #0
 80019d0:	d045      	beq.n	8001a5e <__sflush_r+0xae>
 80019d2:	2300      	movs	r3, #0
 80019d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80019d8:	682f      	ldr	r7, [r5, #0]
 80019da:	6a21      	ldr	r1, [r4, #32]
 80019dc:	602b      	str	r3, [r5, #0]
 80019de:	d030      	beq.n	8001a42 <__sflush_r+0x92>
 80019e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80019e2:	89a3      	ldrh	r3, [r4, #12]
 80019e4:	0759      	lsls	r1, r3, #29
 80019e6:	d505      	bpl.n	80019f4 <__sflush_r+0x44>
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	1ad2      	subs	r2, r2, r3
 80019ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80019ee:	b10b      	cbz	r3, 80019f4 <__sflush_r+0x44>
 80019f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019f2:	1ad2      	subs	r2, r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019f8:	6a21      	ldr	r1, [r4, #32]
 80019fa:	4628      	mov	r0, r5
 80019fc:	47b0      	blx	r6
 80019fe:	1c43      	adds	r3, r0, #1
 8001a00:	89a3      	ldrh	r3, [r4, #12]
 8001a02:	d106      	bne.n	8001a12 <__sflush_r+0x62>
 8001a04:	6829      	ldr	r1, [r5, #0]
 8001a06:	291d      	cmp	r1, #29
 8001a08:	d82b      	bhi.n	8001a62 <__sflush_r+0xb2>
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab4 <__sflush_r+0x104>)
 8001a0c:	40ca      	lsrs	r2, r1
 8001a0e:	07d6      	lsls	r6, r2, #31
 8001a10:	d527      	bpl.n	8001a62 <__sflush_r+0xb2>
 8001a12:	2200      	movs	r2, #0
 8001a14:	6062      	str	r2, [r4, #4]
 8001a16:	04d9      	lsls	r1, r3, #19
 8001a18:	6922      	ldr	r2, [r4, #16]
 8001a1a:	6022      	str	r2, [r4, #0]
 8001a1c:	d504      	bpl.n	8001a28 <__sflush_r+0x78>
 8001a1e:	1c42      	adds	r2, r0, #1
 8001a20:	d101      	bne.n	8001a26 <__sflush_r+0x76>
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	b903      	cbnz	r3, 8001a28 <__sflush_r+0x78>
 8001a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8001a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a2a:	602f      	str	r7, [r5, #0]
 8001a2c:	b1b9      	cbz	r1, 8001a5e <__sflush_r+0xae>
 8001a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a32:	4299      	cmp	r1, r3
 8001a34:	d002      	beq.n	8001a3c <__sflush_r+0x8c>
 8001a36:	4628      	mov	r0, r5
 8001a38:	f7ff fca2 	bl	8001380 <_free_r>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a40:	e00d      	b.n	8001a5e <__sflush_r+0xae>
 8001a42:	2301      	movs	r3, #1
 8001a44:	4628      	mov	r0, r5
 8001a46:	47b0      	blx	r6
 8001a48:	4602      	mov	r2, r0
 8001a4a:	1c50      	adds	r0, r2, #1
 8001a4c:	d1c9      	bne.n	80019e2 <__sflush_r+0x32>
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0c6      	beq.n	80019e2 <__sflush_r+0x32>
 8001a54:	2b1d      	cmp	r3, #29
 8001a56:	d001      	beq.n	8001a5c <__sflush_r+0xac>
 8001a58:	2b16      	cmp	r3, #22
 8001a5a:	d11e      	bne.n	8001a9a <__sflush_r+0xea>
 8001a5c:	602f      	str	r7, [r5, #0]
 8001a5e:	2000      	movs	r0, #0
 8001a60:	e022      	b.n	8001aa8 <__sflush_r+0xf8>
 8001a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a66:	b21b      	sxth	r3, r3
 8001a68:	e01b      	b.n	8001aa2 <__sflush_r+0xf2>
 8001a6a:	690f      	ldr	r7, [r1, #16]
 8001a6c:	2f00      	cmp	r7, #0
 8001a6e:	d0f6      	beq.n	8001a5e <__sflush_r+0xae>
 8001a70:	0793      	lsls	r3, r2, #30
 8001a72:	680e      	ldr	r6, [r1, #0]
 8001a74:	bf08      	it	eq
 8001a76:	694b      	ldreq	r3, [r1, #20]
 8001a78:	600f      	str	r7, [r1, #0]
 8001a7a:	bf18      	it	ne
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	eba6 0807 	sub.w	r8, r6, r7
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	f1b8 0f00 	cmp.w	r8, #0
 8001a88:	dde9      	ble.n	8001a5e <__sflush_r+0xae>
 8001a8a:	6a21      	ldr	r1, [r4, #32]
 8001a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001a8e:	4643      	mov	r3, r8
 8001a90:	463a      	mov	r2, r7
 8001a92:	4628      	mov	r0, r5
 8001a94:	47b0      	blx	r6
 8001a96:	2800      	cmp	r0, #0
 8001a98:	dc08      	bgt.n	8001aac <__sflush_r+0xfc>
 8001a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aa2:	81a3      	strh	r3, [r4, #12]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aac:	4407      	add	r7, r0
 8001aae:	eba8 0800 	sub.w	r8, r8, r0
 8001ab2:	e7e7      	b.n	8001a84 <__sflush_r+0xd4>
 8001ab4:	20400001 	.word	0x20400001

08001ab8 <_fflush_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	690b      	ldr	r3, [r1, #16]
 8001abc:	4605      	mov	r5, r0
 8001abe:	460c      	mov	r4, r1
 8001ac0:	b913      	cbnz	r3, 8001ac8 <_fflush_r+0x10>
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	b118      	cbz	r0, 8001ad2 <_fflush_r+0x1a>
 8001aca:	6a03      	ldr	r3, [r0, #32]
 8001acc:	b90b      	cbnz	r3, 8001ad2 <_fflush_r+0x1a>
 8001ace:	f7ff fb3f 	bl	8001150 <__sinit>
 8001ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f3      	beq.n	8001ac2 <_fflush_r+0xa>
 8001ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001adc:	07d0      	lsls	r0, r2, #31
 8001ade:	d404      	bmi.n	8001aea <_fflush_r+0x32>
 8001ae0:	0599      	lsls	r1, r3, #22
 8001ae2:	d402      	bmi.n	8001aea <_fflush_r+0x32>
 8001ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ae6:	f7ff fc48 	bl	800137a <__retarget_lock_acquire_recursive>
 8001aea:	4628      	mov	r0, r5
 8001aec:	4621      	mov	r1, r4
 8001aee:	f7ff ff5f 	bl	80019b0 <__sflush_r>
 8001af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001af4:	07da      	lsls	r2, r3, #31
 8001af6:	4605      	mov	r5, r0
 8001af8:	d4e4      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001afa:	89a3      	ldrh	r3, [r4, #12]
 8001afc:	059b      	lsls	r3, r3, #22
 8001afe:	d4e1      	bmi.n	8001ac4 <_fflush_r+0xc>
 8001b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b02:	f7ff fc3b 	bl	800137c <__retarget_lock_release_recursive>
 8001b06:	e7dd      	b.n	8001ac4 <_fflush_r+0xc>

08001b08 <__swbuf_r>:
 8001b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0a:	460e      	mov	r6, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	4605      	mov	r5, r0
 8001b10:	b118      	cbz	r0, 8001b1a <__swbuf_r+0x12>
 8001b12:	6a03      	ldr	r3, [r0, #32]
 8001b14:	b90b      	cbnz	r3, 8001b1a <__swbuf_r+0x12>
 8001b16:	f7ff fb1b 	bl	8001150 <__sinit>
 8001b1a:	69a3      	ldr	r3, [r4, #24]
 8001b1c:	60a3      	str	r3, [r4, #8]
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	071a      	lsls	r2, r3, #28
 8001b22:	d501      	bpl.n	8001b28 <__swbuf_r+0x20>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	b943      	cbnz	r3, 8001b3a <__swbuf_r+0x32>
 8001b28:	4621      	mov	r1, r4
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f000 f82a 	bl	8001b84 <__swsetup_r>
 8001b30:	b118      	cbz	r0, 8001b3a <__swbuf_r+0x32>
 8001b32:	f04f 37ff 	mov.w	r7, #4294967295
 8001b36:	4638      	mov	r0, r7
 8001b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	6922      	ldr	r2, [r4, #16]
 8001b3e:	1a98      	subs	r0, r3, r2
 8001b40:	6963      	ldr	r3, [r4, #20]
 8001b42:	b2f6      	uxtb	r6, r6
 8001b44:	4283      	cmp	r3, r0
 8001b46:	4637      	mov	r7, r6
 8001b48:	dc05      	bgt.n	8001b56 <__swbuf_r+0x4e>
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	f7ff ffb3 	bl	8001ab8 <_fflush_r>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d1ed      	bne.n	8001b32 <__swbuf_r+0x2a>
 8001b56:	68a3      	ldr	r3, [r4, #8]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	60a3      	str	r3, [r4, #8]
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	6022      	str	r2, [r4, #0]
 8001b62:	701e      	strb	r6, [r3, #0]
 8001b64:	6962      	ldr	r2, [r4, #20]
 8001b66:	1c43      	adds	r3, r0, #1
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d004      	beq.n	8001b76 <__swbuf_r+0x6e>
 8001b6c:	89a3      	ldrh	r3, [r4, #12]
 8001b6e:	07db      	lsls	r3, r3, #31
 8001b70:	d5e1      	bpl.n	8001b36 <__swbuf_r+0x2e>
 8001b72:	2e0a      	cmp	r6, #10
 8001b74:	d1df      	bne.n	8001b36 <__swbuf_r+0x2e>
 8001b76:	4621      	mov	r1, r4
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f7ff ff9d 	bl	8001ab8 <_fflush_r>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d0d9      	beq.n	8001b36 <__swbuf_r+0x2e>
 8001b82:	e7d6      	b.n	8001b32 <__swbuf_r+0x2a>

08001b84 <__swsetup_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <__swsetup_r+0xa8>)
 8001b88:	4605      	mov	r5, r0
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	460c      	mov	r4, r1
 8001b8e:	b118      	cbz	r0, 8001b98 <__swsetup_r+0x14>
 8001b90:	6a03      	ldr	r3, [r0, #32]
 8001b92:	b90b      	cbnz	r3, 8001b98 <__swsetup_r+0x14>
 8001b94:	f7ff fadc 	bl	8001150 <__sinit>
 8001b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b9c:	0719      	lsls	r1, r3, #28
 8001b9e:	d422      	bmi.n	8001be6 <__swsetup_r+0x62>
 8001ba0:	06da      	lsls	r2, r3, #27
 8001ba2:	d407      	bmi.n	8001bb4 <__swsetup_r+0x30>
 8001ba4:	2209      	movs	r2, #9
 8001ba6:	602a      	str	r2, [r5, #0]
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bac:	81a3      	strh	r3, [r4, #12]
 8001bae:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb2:	e033      	b.n	8001c1c <__swsetup_r+0x98>
 8001bb4:	0758      	lsls	r0, r3, #29
 8001bb6:	d512      	bpl.n	8001bde <__swsetup_r+0x5a>
 8001bb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001bba:	b141      	cbz	r1, 8001bce <__swsetup_r+0x4a>
 8001bbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001bc0:	4299      	cmp	r1, r3
 8001bc2:	d002      	beq.n	8001bca <__swsetup_r+0x46>
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	f7ff fbdb 	bl	8001380 <_free_r>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8001bce:	89a3      	ldrh	r3, [r4, #12]
 8001bd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001bd4:	81a3      	strh	r3, [r4, #12]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	6063      	str	r3, [r4, #4]
 8001bda:	6923      	ldr	r3, [r4, #16]
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	89a3      	ldrh	r3, [r4, #12]
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	81a3      	strh	r3, [r4, #12]
 8001be6:	6923      	ldr	r3, [r4, #16]
 8001be8:	b94b      	cbnz	r3, 8001bfe <__swsetup_r+0x7a>
 8001bea:	89a3      	ldrh	r3, [r4, #12]
 8001bec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bf4:	d003      	beq.n	8001bfe <__swsetup_r+0x7a>
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	4628      	mov	r0, r5
 8001bfa:	f000 f83f 	bl	8001c7c <__smakebuf_r>
 8001bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c02:	f013 0201 	ands.w	r2, r3, #1
 8001c06:	d00a      	beq.n	8001c1e <__swsetup_r+0x9a>
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60a2      	str	r2, [r4, #8]
 8001c0c:	6962      	ldr	r2, [r4, #20]
 8001c0e:	4252      	negs	r2, r2
 8001c10:	61a2      	str	r2, [r4, #24]
 8001c12:	6922      	ldr	r2, [r4, #16]
 8001c14:	b942      	cbnz	r2, 8001c28 <__swsetup_r+0xa4>
 8001c16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001c1a:	d1c5      	bne.n	8001ba8 <__swsetup_r+0x24>
 8001c1c:	bd38      	pop	{r3, r4, r5, pc}
 8001c1e:	0799      	lsls	r1, r3, #30
 8001c20:	bf58      	it	pl
 8001c22:	6962      	ldrpl	r2, [r4, #20]
 8001c24:	60a2      	str	r2, [r4, #8]
 8001c26:	e7f4      	b.n	8001c12 <__swsetup_r+0x8e>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	e7f7      	b.n	8001c1c <__swsetup_r+0x98>
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <__swhatbuf_r>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	460c      	mov	r4, r1
 8001c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c38:	2900      	cmp	r1, #0
 8001c3a:	b096      	sub	sp, #88	@ 0x58
 8001c3c:	4615      	mov	r5, r2
 8001c3e:	461e      	mov	r6, r3
 8001c40:	da0d      	bge.n	8001c5e <__swhatbuf_r+0x2e>
 8001c42:	89a3      	ldrh	r3, [r4, #12]
 8001c44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2340      	movne	r3, #64	@ 0x40
 8001c50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c54:	2000      	movs	r0, #0
 8001c56:	6031      	str	r1, [r6, #0]
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	b016      	add	sp, #88	@ 0x58
 8001c5c:	bd70      	pop	{r4, r5, r6, pc}
 8001c5e:	466a      	mov	r2, sp
 8001c60:	f000 f848 	bl	8001cf4 <_fstat_r>
 8001c64:	2800      	cmp	r0, #0
 8001c66:	dbec      	blt.n	8001c42 <__swhatbuf_r+0x12>
 8001c68:	9901      	ldr	r1, [sp, #4]
 8001c6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c72:	4259      	negs	r1, r3
 8001c74:	4159      	adcs	r1, r3
 8001c76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c7a:	e7eb      	b.n	8001c54 <__swhatbuf_r+0x24>

08001c7c <__smakebuf_r>:
 8001c7c:	898b      	ldrh	r3, [r1, #12]
 8001c7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c80:	079d      	lsls	r5, r3, #30
 8001c82:	4606      	mov	r6, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	d507      	bpl.n	8001c98 <__smakebuf_r+0x1c>
 8001c88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c8c:	6023      	str	r3, [r4, #0]
 8001c8e:	6123      	str	r3, [r4, #16]
 8001c90:	2301      	movs	r3, #1
 8001c92:	6163      	str	r3, [r4, #20]
 8001c94:	b003      	add	sp, #12
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c98:	ab01      	add	r3, sp, #4
 8001c9a:	466a      	mov	r2, sp
 8001c9c:	f7ff ffc8 	bl	8001c30 <__swhatbuf_r>
 8001ca0:	9f00      	ldr	r7, [sp, #0]
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	4639      	mov	r1, r7
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f7ff f93a 	bl	8000f20 <_malloc_r>
 8001cac:	b948      	cbnz	r0, 8001cc2 <__smakebuf_r+0x46>
 8001cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cb2:	059a      	lsls	r2, r3, #22
 8001cb4:	d4ee      	bmi.n	8001c94 <__smakebuf_r+0x18>
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	81a3      	strh	r3, [r4, #12]
 8001cc0:	e7e2      	b.n	8001c88 <__smakebuf_r+0xc>
 8001cc2:	89a3      	ldrh	r3, [r4, #12]
 8001cc4:	6020      	str	r0, [r4, #0]
 8001cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cca:	81a3      	strh	r3, [r4, #12]
 8001ccc:	9b01      	ldr	r3, [sp, #4]
 8001cce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cd2:	b15b      	cbz	r3, 8001cec <__smakebuf_r+0x70>
 8001cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cd8:	4630      	mov	r0, r6
 8001cda:	f000 f81d 	bl	8001d18 <_isatty_r>
 8001cde:	b128      	cbz	r0, 8001cec <__smakebuf_r+0x70>
 8001ce0:	89a3      	ldrh	r3, [r4, #12]
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	81a3      	strh	r3, [r4, #12]
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	431d      	orrs	r5, r3
 8001cf0:	81a5      	strh	r5, [r4, #12]
 8001cf2:	e7cf      	b.n	8001c94 <__smakebuf_r+0x18>

08001cf4 <_fstat_r>:
 8001cf4:	b538      	push	{r3, r4, r5, lr}
 8001cf6:	4d07      	ldr	r5, [pc, #28]	@ (8001d14 <_fstat_r+0x20>)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	602b      	str	r3, [r5, #0]
 8001d02:	f7ff f862 	bl	8000dca <_fstat>
 8001d06:	1c43      	adds	r3, r0, #1
 8001d08:	d102      	bne.n	8001d10 <_fstat_r+0x1c>
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	b103      	cbz	r3, 8001d10 <_fstat_r+0x1c>
 8001d0e:	6023      	str	r3, [r4, #0]
 8001d10:	bd38      	pop	{r3, r4, r5, pc}
 8001d12:	bf00      	nop
 8001d14:	200001e8 	.word	0x200001e8

08001d18 <_isatty_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	4d06      	ldr	r5, [pc, #24]	@ (8001d34 <_isatty_r+0x1c>)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4604      	mov	r4, r0
 8001d20:	4608      	mov	r0, r1
 8001d22:	602b      	str	r3, [r5, #0]
 8001d24:	f7ff f861 	bl	8000dea <_isatty>
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	d102      	bne.n	8001d32 <_isatty_r+0x1a>
 8001d2c:	682b      	ldr	r3, [r5, #0]
 8001d2e:	b103      	cbz	r3, 8001d32 <_isatty_r+0x1a>
 8001d30:	6023      	str	r3, [r4, #0]
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	200001e8 	.word	0x200001e8

08001d38 <_init>:
 8001d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3a:	bf00      	nop
 8001d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3e:	bc08      	pop	{r3}
 8001d40:	469e      	mov	lr, r3
 8001d42:	4770      	bx	lr

08001d44 <_fini>:
 8001d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d46:	bf00      	nop
 8001d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4a:	bc08      	pop	{r3}
 8001d4c:	469e      	mov	lr, r3
 8001d4e:	4770      	bx	lr
