
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000cd0  08000cd0  00001cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ce4  08000ce4  00002034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000ce4  08000ce4  00001ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000cec  08000cec  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cec  08000cec  00001cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000cf0  08000cf0  00001cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08000cf4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00002034  2**0
                  CONTENTS
 10 .bss          00000040  20000034  20000034  00002034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00002034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017a7  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000568  00000000  00000000  0000380b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00003d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ed  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001688  00000000  00000000  00003fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000008a0  00000000  00000000  00005635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005ed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000490  00000000  00000000  00005f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000063a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000034 	.word	0x20000034
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000cb8 	.word	0x08000cb8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000038 	.word	0x20000038
 80001c8:	08000cb8 	.word	0x08000cb8

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <USART_PeriClockControl>:
#include"STM32Lxx_USARTx_header.h"


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d136      	bne.n	800025c <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a38      	ldr	r2, [pc, #224]	@ (80002d4 <USART_PeriClockControl+0xf8>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d106      	bne.n	8000204 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80001f6:	4b38      	ldr	r3, [pc, #224]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80001f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80001fa:	4a37      	ldr	r2, [pc, #220]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80001fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000200:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000202:	e061      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a35      	ldr	r2, [pc, #212]	@ (80002dc <USART_PeriClockControl+0x100>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800020c:	4b32      	ldr	r3, [pc, #200]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800020e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000210:	4a31      	ldr	r2, [pc, #196]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000216:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000218:	e056      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a30      	ldr	r2, [pc, #192]	@ (80002e0 <USART_PeriClockControl+0x104>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000222:	4b2d      	ldr	r3, [pc, #180]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000226:	4a2c      	ldr	r2, [pc, #176]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800022c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800022e:	e04b      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a2c      	ldr	r2, [pc, #176]	@ (80002e4 <USART_PeriClockControl+0x108>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000238:	4b27      	ldr	r3, [pc, #156]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800023a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800023c:	4a26      	ldr	r2, [pc, #152]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800023e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000242:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000244:	e040      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a27      	ldr	r2, [pc, #156]	@ (80002e8 <USART_PeriClockControl+0x10c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d13c      	bne.n	80002c8 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 800024e:	4b22      	ldr	r3, [pc, #136]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000252:	4a21      	ldr	r2, [pc, #132]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800025a:	e035      	b.n	80002c8 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <USART_PeriClockControl+0xf8>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000264:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000268:	4a1b      	ldr	r2, [pc, #108]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800026a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800026e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000270:	e02a      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <USART_PeriClockControl+0x100>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 800027a:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800027c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800027e:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000280:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000284:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000286:	e01f      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <USART_PeriClockControl+0x104>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d106      	bne.n	800029e <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800029a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800029c:	e014      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <USART_PeriClockControl+0x108>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002aa:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002ac:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002b0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002b2:	e009      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <USART_PeriClockControl+0x10c>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d105      	bne.n	80002c8 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80002c6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40013800 	.word	0x40013800
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40004400 	.word	0x40004400
 80002e0:	40004800 	.word	0x40004800
 80002e4:	40004c00 	.word	0x40004c00
 80002e8:	40005000 	.word	0x40005000

080002ec <USART_Init>:
}

*/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]

		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff6c 	bl	80001dc <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d104      	bne.n	8000316 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e010      	b.n	8000338 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d104      	bne.n	8000328 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e007      	b.n	8000338 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	791b      	ldrb	r3, [r3, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d103      	bne.n	8000338 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 030c 	orr.w	r3, r3, #12
 8000336:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7b5b      	ldrb	r3, [r3, #13]
 800033c:	031b      	lsls	r3, r3, #12
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b9b      	ldrb	r3, [r3, #14]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d104      	bne.n	8000356 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00b      	b.n	800036e <USART_Init+0x82>

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	7b9b      	ldrb	r3, [r3, #14]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d107      	bne.n	800036e <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000364:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800036c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7b1b      	ldrb	r3, [r3, #12]
 800037e:	031b      	lsls	r3, r3, #12
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	4313      	orrs	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	605a      	str	r2, [r3, #4]

		tempreg=0;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	7bdb      	ldrb	r3, [r3, #15]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d104      	bne.n	80003a4 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e014      	b.n	80003ce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7bdb      	ldrb	r3, [r3, #15]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d104      	bne.n	80003b6 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00b      	b.n	80003ce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	7bdb      	ldrb	r3, [r3, #15]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d107      	bne.n	80003ce <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003c4:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003cc:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2223      	movs	r2, #35	@ 0x23
 80003dc:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e031      	b.n	800045c <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80003f8:	bf00      	nop
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2180      	movs	r1, #128	@ 0x80
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f8b2 	bl	800056a <USART_GetFlagStatus>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f6      	beq.n	80003fa <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	7b5b      	ldrb	r3, [r3, #13]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d118      	bne.n	8000446 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	7b9b      	ldrb	r3, [r3, #14]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d106      	bne.n	800043e <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	3301      	adds	r3, #1
 8000434:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	e00b      	b.n	8000456 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3301      	adds	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	e007      	b.n	8000456 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3301      	adds	r3, #1
 8000454:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	d3c9      	bcc.n	80003f8 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000464:	bf00      	nop
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2140      	movs	r1, #64	@ 0x40
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f87c 	bl	800056a <USART_GetFlagStatus>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f6      	beq.n	8000466 <USART_SendData+0x80>
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <USART_ReceiveData>:


void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]

	for(uint32_t i = 0 ; i < Len; i++)
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e045      	b.n	8000520 <USART_ReceiveData+0x9e>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8000494:	bf00      	nop
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2120      	movs	r1, #32
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f864 	bl	800056a <USART_GetFlagStatus>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0f6      	beq.n	8000496 <USART_ReceiveData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	7b5b      	ldrb	r3, [r3, #13]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d11d      	bne.n	80004ec <USART_ReceiveData+0x6a>
		{
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	7b9b      	ldrb	r3, [r3, #14]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10f      	bne.n	80004d8 <USART_ReceiveData+0x56>
			{
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->RDR  & (uint16_t)0x01FF);
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004be:	b29b      	uxth	r3, r3
 80004c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	801a      	strh	r2, [r3, #0]
				pRxBuffer++;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	e020      	b.n	800051a <USART_ReceiveData+0x98>
			}
			else
			{
				 *pRxBuffer = (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	e016      	b.n	800051a <USART_ReceiveData+0x98>
			}
		}
		else
		{
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	7b9b      	ldrb	r3, [r3, #14]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d106      	bne.n	8000502 <USART_ReceiveData+0x80>
			{
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	701a      	strb	r2, [r3, #0]
 8000500:	e008      	b.n	8000514 <USART_ReceiveData+0x92>
			}

			else
			{
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800050e:	b2da      	uxtb	r2, r3
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	701a      	strb	r2, [r3, #0]
			}
			pRxBuffer++;
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	3301      	adds	r3, #1
 8000518:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	d3b5      	bcc.n	8000494 <USART_ReceiveData+0x12>
		}
	}

}
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <USART_PeripheralControl>:
}



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	460b      	mov	r3, r1
 800053c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d106      	bne.n	8000552 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f043 0201 	orr.w	r2, r3, #1
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000550:	e005      	b.n	800055e <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f023 0201 	bic.w	r2, r3, #1
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	460b      	mov	r3, r1
 8000574:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	69da      	ldr	r2, [r3, #28]
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	4013      	ands	r3, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000582:	2301      	movs	r3, #1
 8000584:	e000      	b.n	8000588 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d157      	bne.n	8000656 <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005ac:	d106      	bne.n	80005bc <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	4a59      	ldr	r2, [pc, #356]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 80005ba:	e0a6      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a57      	ldr	r2, [pc, #348]	@ (800071c <GPIO_PeriClockControl+0x188>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d106      	bne.n	80005d2 <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 80005c4:	4b54      	ldr	r3, [pc, #336]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c8:	4a53      	ldr	r2, [pc, #332]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005ca:	f043 0302 	orr.w	r3, r3, #2
 80005ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005d0:	e09b      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a52      	ldr	r2, [pc, #328]	@ (8000720 <GPIO_PeriClockControl+0x18c>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 80005da:	4b4f      	ldr	r3, [pc, #316]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a4e      	ldr	r2, [pc, #312]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005e6:	e090      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a4e      	ldr	r2, [pc, #312]	@ (8000724 <GPIO_PeriClockControl+0x190>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d106      	bne.n	80005fe <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 80005f0:	4b49      	ldr	r3, [pc, #292]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f4:	4a48      	ldr	r2, [pc, #288]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80005f6:	f043 0308 	orr.w	r3, r3, #8
 80005fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005fc:	e085      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a49      	ldr	r2, [pc, #292]	@ (8000728 <GPIO_PeriClockControl+0x194>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d106      	bne.n	8000614 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 8000606:	4b44      	ldr	r3, [pc, #272]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a43      	ldr	r2, [pc, #268]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000612:	e07a      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a45      	ldr	r2, [pc, #276]	@ (800072c <GPIO_PeriClockControl+0x198>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d106      	bne.n	800062a <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 800061c:	4b3e      	ldr	r3, [pc, #248]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 800061e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000620:	4a3d      	ldr	r2, [pc, #244]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000628:	e06f      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a40      	ldr	r2, [pc, #256]	@ (8000730 <GPIO_PeriClockControl+0x19c>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 8000632:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a38      	ldr	r2, [pc, #224]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800063e:	e064      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a3c      	ldr	r2, [pc, #240]	@ (8000734 <GPIO_PeriClockControl+0x1a0>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d160      	bne.n	800070a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 8000648:	4b33      	ldr	r3, [pc, #204]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 800064e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000654:	e059      	b.n	800070a <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 8000656:	78fb      	ldrb	r3, [r7, #3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d156      	bne.n	800070a <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000662:	d106      	bne.n	8000672 <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 8000664:	4b2c      	ldr	r3, [pc, #176]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000668:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 800066a:	f023 0301 	bic.w	r3, r3, #1
 800066e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000670:	e04b      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a29      	ldr	r2, [pc, #164]	@ (800071c <GPIO_PeriClockControl+0x188>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a26      	ldr	r2, [pc, #152]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000680:	f023 0302 	bic.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000686:	e040      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a25      	ldr	r2, [pc, #148]	@ (8000720 <GPIO_PeriClockControl+0x18c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000694:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000696:	f023 0304 	bic.w	r3, r3, #4
 800069a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800069c:	e035      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <GPIO_PeriClockControl+0x190>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006ac:	f023 0308 	bic.w	r3, r3, #8
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006b2:	e02a      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000728 <GPIO_PeriClockControl+0x194>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 80006bc:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c0:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006c2:	f023 0310 	bic.w	r3, r3, #16
 80006c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006c8:	e01f      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a17      	ldr	r2, [pc, #92]	@ (800072c <GPIO_PeriClockControl+0x198>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006d8:	f023 0320 	bic.w	r3, r3, #32
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006de:	e014      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <GPIO_PeriClockControl+0x19c>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d106      	bne.n	80006f6 <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 80006ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80006f4:	e009      	b.n	800070a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000734 <GPIO_PeriClockControl+0x1a0>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d105      	bne.n	800070a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <GPIO_PeriClockControl+0x184>)
 8000704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	48000400 	.word	0x48000400
 8000720:	48000800 	.word	0x48000800
 8000724:	48000c00 	.word	0x48000c00
 8000728:	48001000 	.word	0x48001000
 800072c:	48001400 	.word	0x48001400
 8000730:	48001800 	.word	0x48001800
 8000734:	48001c00 	.word	0x48001c00

08000738 <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff22 	bl	8000594 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d822      	bhi.n	800079e <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000768:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2103      	movs	r1, #3
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	e0e1      	b.n	8000962 <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80007ae:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	2103      	movs	r1, #3
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	4619      	mov	r1, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	400a      	ands	r2, r1
 80007cc:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	430a      	orrs	r2, r1
 80007dc:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	795b      	ldrb	r3, [r3, #5]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d117      	bne.n	800081a <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007ea:	4b47      	ldr	r3, [pc, #284]	@ (8000908 <GPIO_Init+0x1d0>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	7912      	ldrb	r2, [r2, #4]
 80007f2:	4611      	mov	r1, r2
 80007f4:	2201      	movs	r2, #1
 80007f6:	408a      	lsls	r2, r1
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a43      	ldr	r2, [pc, #268]	@ (8000908 <GPIO_Init+0x1d0>)
 80007fc:	430b      	orrs	r3, r1
 80007fe:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000800:	4b41      	ldr	r3, [pc, #260]	@ (8000908 <GPIO_Init+0x1d0>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	7912      	ldrb	r2, [r2, #4]
 8000808:	4611      	mov	r1, r2
 800080a:	2201      	movs	r2, #1
 800080c:	408a      	lsls	r2, r1
 800080e:	43d2      	mvns	r2, r2
 8000810:	4611      	mov	r1, r2
 8000812:	4a3d      	ldr	r2, [pc, #244]	@ (8000908 <GPIO_Init+0x1d0>)
 8000814:	400b      	ands	r3, r1
 8000816:	6093      	str	r3, [r2, #8]
 8000818:	e035      	b.n	8000886 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	2b05      	cmp	r3, #5
 8000820:	d117      	bne.n	8000852 <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000822:	4b39      	ldr	r3, [pc, #228]	@ (8000908 <GPIO_Init+0x1d0>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	7912      	ldrb	r2, [r2, #4]
 800082a:	4611      	mov	r1, r2
 800082c:	2201      	movs	r2, #1
 800082e:	408a      	lsls	r2, r1
 8000830:	4611      	mov	r1, r2
 8000832:	4a35      	ldr	r2, [pc, #212]	@ (8000908 <GPIO_Init+0x1d0>)
 8000834:	430b      	orrs	r3, r1
 8000836:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000838:	4b33      	ldr	r3, [pc, #204]	@ (8000908 <GPIO_Init+0x1d0>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	7912      	ldrb	r2, [r2, #4]
 8000840:	4611      	mov	r1, r2
 8000842:	2201      	movs	r2, #1
 8000844:	408a      	lsls	r2, r1
 8000846:	43d2      	mvns	r2, r2
 8000848:	4611      	mov	r1, r2
 800084a:	4a2f      	ldr	r2, [pc, #188]	@ (8000908 <GPIO_Init+0x1d0>)
 800084c:	400b      	ands	r3, r1
 800084e:	60d3      	str	r3, [r2, #12]
 8000850:	e019      	b.n	8000886 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	795b      	ldrb	r3, [r3, #5]
 8000856:	2b06      	cmp	r3, #6
 8000858:	d115      	bne.n	8000886 <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800085a:	4b2b      	ldr	r3, [pc, #172]	@ (8000908 <GPIO_Init+0x1d0>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	7912      	ldrb	r2, [r2, #4]
 8000862:	4611      	mov	r1, r2
 8000864:	2201      	movs	r2, #1
 8000866:	408a      	lsls	r2, r1
 8000868:	4611      	mov	r1, r2
 800086a:	4a27      	ldr	r2, [pc, #156]	@ (8000908 <GPIO_Init+0x1d0>)
 800086c:	430b      	orrs	r3, r1
 800086e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000870:	4b25      	ldr	r3, [pc, #148]	@ (8000908 <GPIO_Init+0x1d0>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	7912      	ldrb	r2, [r2, #4]
 8000878:	4611      	mov	r1, r2
 800087a:	2201      	movs	r2, #1
 800087c:	408a      	lsls	r2, r1
 800087e:	4611      	mov	r1, r2
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <GPIO_Init+0x1d0>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	791b      	ldrb	r3, [r3, #4]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80008a0:	d042      	beq.n	8000928 <GPIO_Init+0x1f0>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a19      	ldr	r2, [pc, #100]	@ (800090c <GPIO_Init+0x1d4>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d02b      	beq.n	8000904 <GPIO_Init+0x1cc>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <GPIO_Init+0x1d8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d024      	beq.n	8000900 <GPIO_Init+0x1c8>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a16      	ldr	r2, [pc, #88]	@ (8000914 <GPIO_Init+0x1dc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d01d      	beq.n	80008fc <GPIO_Init+0x1c4>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a14      	ldr	r2, [pc, #80]	@ (8000918 <GPIO_Init+0x1e0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d016      	beq.n	80008f8 <GPIO_Init+0x1c0>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a13      	ldr	r2, [pc, #76]	@ (800091c <GPIO_Init+0x1e4>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d00f      	beq.n	80008f4 <GPIO_Init+0x1bc>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a11      	ldr	r2, [pc, #68]	@ (8000920 <GPIO_Init+0x1e8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d008      	beq.n	80008f0 <GPIO_Init+0x1b8>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a10      	ldr	r2, [pc, #64]	@ (8000924 <GPIO_Init+0x1ec>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d101      	bne.n	80008ec <GPIO_Init+0x1b4>
 80008e8:	2307      	movs	r3, #7
 80008ea:	e01e      	b.n	800092a <GPIO_Init+0x1f2>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e01c      	b.n	800092a <GPIO_Init+0x1f2>
 80008f0:	2306      	movs	r3, #6
 80008f2:	e01a      	b.n	800092a <GPIO_Init+0x1f2>
 80008f4:	2305      	movs	r3, #5
 80008f6:	e018      	b.n	800092a <GPIO_Init+0x1f2>
 80008f8:	2304      	movs	r3, #4
 80008fa:	e016      	b.n	800092a <GPIO_Init+0x1f2>
 80008fc:	2303      	movs	r3, #3
 80008fe:	e014      	b.n	800092a <GPIO_Init+0x1f2>
 8000900:	2302      	movs	r3, #2
 8000902:	e012      	b.n	800092a <GPIO_Init+0x1f2>
 8000904:	2301      	movs	r3, #1
 8000906:	e010      	b.n	800092a <GPIO_Init+0x1f2>
 8000908:	40010400 	.word	0x40010400
 800090c:	48000400 	.word	0x48000400
 8000910:	48000800 	.word	0x48000800
 8000914:	48000c00 	.word	0x48000c00
 8000918:	48001000 	.word	0x48001000
 800091c:	48001400 	.word	0x48001400
 8000920:	48001800 	.word	0x48001800
 8000924:	48001c00 	.word	0x48001c00
 8000928:	2300      	movs	r3, #0
 800092a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800092c:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa4 <GPIO_Init+0x36c>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000930:	4a5c      	ldr	r2, [pc, #368]	@ (8000aa4 <GPIO_Init+0x36c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000938:	7c7a      	ldrb	r2, [r7, #17]
 800093a:	7cbb      	ldrb	r3, [r7, #18]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	fa02 f103 	lsl.w	r1, r2, r3
 8000942:	4a59      	ldr	r2, [pc, #356]	@ (8000aa8 <GPIO_Init+0x370>)
 8000944:	7cfb      	ldrb	r3, [r7, #19]
 8000946:	3302      	adds	r3, #2
 8000948:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800094c:	4b57      	ldr	r3, [pc, #348]	@ (8000aac <GPIO_Init+0x374>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	7912      	ldrb	r2, [r2, #4]
 8000954:	4611      	mov	r1, r2
 8000956:	2201      	movs	r2, #1
 8000958:	408a      	lsls	r2, r1
 800095a:	4611      	mov	r1, r2
 800095c:	4a53      	ldr	r2, [pc, #332]	@ (8000aac <GPIO_Init+0x374>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	799b      	ldrb	r3, [r3, #6]
 800096a:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000976:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	791b      	ldrb	r3, [r3, #4]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	2103      	movs	r1, #3
 8000986:	fa01 f303 	lsl.w	r3, r1, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	4619      	mov	r1, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	400a      	ands	r2, r1
 8000994:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6899      	ldr	r1, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	430a      	orrs	r2, r1
 80009a4:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	79db      	ldrb	r3, [r3, #7]
 80009ae:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80009ba:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2103      	movs	r1, #3
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	400a      	ands	r2, r1
 80009d8:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68d9      	ldr	r1, [r3, #12]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	430a      	orrs	r2, r1
 80009e8:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7a1b      	ldrb	r3, [r3, #8]
 80009f2:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	791b      	ldrb	r3, [r3, #4]
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80009fc:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	791b      	ldrb	r3, [r3, #4]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	400a      	ands	r2, r1
 8000a18:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6859      	ldr	r1, [r3, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	697a      	ldr	r2, [r7, #20]
 8000a26:	430a      	orrs	r2, r1
 8000a28:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	795b      	ldrb	r3, [r3, #5]
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d132      	bne.n	8000a9c <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	791b      	ldrb	r3, [r3, #4]
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	3208      	adds	r2, #8
 8000a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4011      	ands	r1, r2
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	3208      	adds	r2, #8
 8000a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7a5b      	ldrb	r3, [r3, #9]
 8000a82:	4619      	mov	r1, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4311      	orrs	r1, r2
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	3208      	adds	r2, #8
 8000a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40010400 	.word	0x40010400

08000ab0 <delay>:

USART_Handle_t usart2_handle;


void delay(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
    for(uint32_t i = 0 ; i < 250000 ; i++);
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	e002      	b.n	8000ac2 <delay+0x12>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <delay+0x28>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d9f8      	bls.n	8000abc <delay+0xc>
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	0003d08f 	.word	0x0003d08f

08000adc <USART2_Init>:


void USART2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <USART2_Init+0x3c>)
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <USART2_Init+0x40>)
 8000ae4:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <USART2_Init+0x3c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aec:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <USART2_Init+0x3c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <USART2_Init+0x3c>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <USART2_Init+0x3c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <USART2_Init+0x3c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <USART2_Init+0x3c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 8000b0c:	4802      	ldr	r0, [pc, #8]	@ (8000b18 <USART2_Init+0x3c>)
 8000b0e:	f7ff fbed 	bl	80002ec <USART_Init>
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000050 	.word	0x20000050
 8000b1c:	40004400 	.word	0x40004400

08000b20 <USART2_GPIOInit>:


void USART2_GPIOInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	220c      	movs	r2, #12
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f896 	bl	8000c5e <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000b32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b36:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000b40:	2301      	movs	r3, #1
 8000b42:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b44:	2302      	movs	r3, #2
 8000b46:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	737b      	strb	r3, [r7, #13]

    // TX pin (PA2)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN(); // enable clock for GPIOA
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <USART2_GPIOInit+0x58>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <USART2_GPIOInit+0x58>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fdea 	bl	8000738 <GPIO_Init>

    // RX pin (PA3)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000b64:	2303      	movs	r3, #3
 8000b66:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fde4 	bl	8000738 <GPIO_Init>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000

08000b7c <main>:

int main(void)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0


    USART2_GPIOInit();
 8000b82:	f7ff ffcd 	bl	8000b20 <USART2_GPIOInit>
    USART2_Init();
 8000b86:	f7ff ffa9 	bl	8000adc <USART2_Init>
    USART_PeripheralControl(USART2, ENABLE);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <main+0x7c>)
 8000b8e:	f7ff fcd0 	bl	8000532 <USART_PeripheralControl>
    USART_SendData(&usart2_handle, msg, strlen((char*)msg));
 8000b92:	481a      	ldr	r0, [pc, #104]	@ (8000bfc <main+0x80>)
 8000b94:	f7ff fb1a 	bl	80001cc <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4917      	ldr	r1, [pc, #92]	@ (8000bfc <main+0x80>)
 8000b9e:	4818      	ldr	r0, [pc, #96]	@ (8000c00 <main+0x84>)
 8000ba0:	f7ff fc21 	bl	80003e6 <USART_SendData>
    uint8_t msg[] = "ENTER CHAR:\r\n",rxData[5];
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <main+0x88>)
 8000ba6:	f107 0408 	add.w	r4, r7, #8
 8000baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bac:	c407      	stmia	r4!, {r0, r1, r2}
 8000bae:	8023      	strh	r3, [r4, #0]
    USART_SendData(&usart2_handle, msg, strlen((char*)msg));
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fb09 	bl	80001cc <strlen>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	@ (8000c00 <main+0x84>)
 8000bc4:	f7ff fc0f 	bl	80003e6 <USART_SendData>
    delay();
 8000bc8:	f7ff ff72 	bl	8000ab0 <delay>

    uint8_t c = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	75fb      	strb	r3, [r7, #23]
    while(1)
    {
		USART_ReceiveData(&usart2_handle,rxData , 5);
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2205      	movs	r2, #5
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480a      	ldr	r0, [pc, #40]	@ (8000c00 <main+0x84>)
 8000bd8:	f7ff fc53 	bl	8000482 <USART_ReceiveData>
		//char buffer[20];
		//int len = snprintf(buffer, sizeof(buffer), "UART RECEIVED : %s\r\n", rxData);

		//USART_SendData(&usart2_handle, (uint8_t*)buffer, len);
		USART_SendData(&usart2_handle, (uint8_t*)rxData, 5);
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2205      	movs	r2, #5
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	@ (8000c00 <main+0x84>)
 8000be4:	f7ff fbff 	bl	80003e6 <USART_SendData>
		USART_SendData(&usart2_handle, (uint8_t*)"\r\n", 2);
 8000be8:	2202      	movs	r2, #2
 8000bea:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <main+0x8c>)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <main+0x84>)
 8000bee:	f7ff fbfa 	bl	80003e6 <USART_SendData>
		USART_ReceiveData(&usart2_handle,rxData , 5);
 8000bf2:	bf00      	nop
 8000bf4:	e7ec      	b.n	8000bd0 <main+0x54>
 8000bf6:	bf00      	nop
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000050 	.word	0x20000050
 8000c04:	08000cd4 	.word	0x08000cd4
 8000c08:	08000cd0 	.word	0x08000cd0

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f000 f819 	bl	8000c70 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000c3e:	f7ff ff9d 	bl	8000b7c <main>

08000c42 <LoopForever>:

LoopForever:
  b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000c50:	08000cf4 	.word	0x08000cf4
  ldr r2, =_sbss
 8000c54:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000c58:	20000074 	.word	0x20000074

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>

08000c5e <memset>:
 8000c5e:	4402      	add	r2, r0
 8000c60:	4603      	mov	r3, r0
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d100      	bne.n	8000c68 <memset+0xa>
 8000c66:	4770      	bx	lr
 8000c68:	f803 1b01 	strb.w	r1, [r3], #1
 8000c6c:	e7f9      	b.n	8000c62 <memset+0x4>
	...

08000c70 <__libc_init_array>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4d0d      	ldr	r5, [pc, #52]	@ (8000ca8 <__libc_init_array+0x38>)
 8000c74:	4c0d      	ldr	r4, [pc, #52]	@ (8000cac <__libc_init_array+0x3c>)
 8000c76:	1b64      	subs	r4, r4, r5
 8000c78:	10a4      	asrs	r4, r4, #2
 8000c7a:	2600      	movs	r6, #0
 8000c7c:	42a6      	cmp	r6, r4
 8000c7e:	d109      	bne.n	8000c94 <__libc_init_array+0x24>
 8000c80:	4d0b      	ldr	r5, [pc, #44]	@ (8000cb0 <__libc_init_array+0x40>)
 8000c82:	4c0c      	ldr	r4, [pc, #48]	@ (8000cb4 <__libc_init_array+0x44>)
 8000c84:	f000 f818 	bl	8000cb8 <_init>
 8000c88:	1b64      	subs	r4, r4, r5
 8000c8a:	10a4      	asrs	r4, r4, #2
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	42a6      	cmp	r6, r4
 8000c90:	d105      	bne.n	8000c9e <__libc_init_array+0x2e>
 8000c92:	bd70      	pop	{r4, r5, r6, pc}
 8000c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c98:	4798      	blx	r3
 8000c9a:	3601      	adds	r6, #1
 8000c9c:	e7ee      	b.n	8000c7c <__libc_init_array+0xc>
 8000c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca2:	4798      	blx	r3
 8000ca4:	3601      	adds	r6, #1
 8000ca6:	e7f2      	b.n	8000c8e <__libc_init_array+0x1e>
 8000ca8:	08000cec 	.word	0x08000cec
 8000cac:	08000cec 	.word	0x08000cec
 8000cb0:	08000cec 	.word	0x08000cec
 8000cb4:	08000cf0 	.word	0x08000cf0

08000cb8 <_init>:
 8000cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cba:	bf00      	nop
 8000cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cbe:	bc08      	pop	{r3}
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	4770      	bx	lr

08000cc4 <_fini>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr
