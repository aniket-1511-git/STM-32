
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800212c  0800212c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800219c  0800219c  00004064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080021a4  080021a4  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a4  080021a4  000031a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a8  080021a8  000031a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080021ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004064  2**0
                  CONTENTS
 10 .bss          00000218  20000064  20000064  00004064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00004064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001796  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005f6  00000000  00000000  0000582a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00005e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000134  00000000  00000000  00005fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001894  00000000  00000000  00006104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000009a4  00000000  00000000  00007998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000833c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001188  00000000  00000000  00008380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00009508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002114 	.word	0x08002114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08002114 	.word	0x08002114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <SPI_PeriClockControl>:
/*
 *  Peripheral Clock configuration
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx , uint8_t EnorDi)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d120      	bne.n	80002d4 <SPI_PeriClockControl+0x54>
			{
				if(pSPIx == SPI1)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a22      	ldr	r2, [pc, #136]	@ (8000320 <SPI_PeriClockControl+0xa0>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <SPI_PeriClockControl+0x28>
				{
					SPI1_PCLK_EN();
 800029a:	4b22      	ldr	r3, [pc, #136]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 800029c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800029e:	4a21      	ldr	r2, [pc, #132]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002a4:	6613      	str	r3, [r2, #96]	@ 0x60
							SPI3_PCLK_DI();
						}

			}

}
 80002a6:	e035      	b.n	8000314 <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI2)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000328 <SPI_PeriClockControl+0xa8>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <SPI_PeriClockControl+0x3e>
					SPI2_PCLK_EN();
 80002b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002ba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002bc:	e02a      	b.n	8000314 <SPI_PeriClockControl+0x94>
				else if(pSPIx==SPI3)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a1a      	ldr	r2, [pc, #104]	@ (800032c <SPI_PeriClockControl+0xac>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d126      	bne.n	8000314 <SPI_PeriClockControl+0x94>
					SPI3_PCLK_EN();
 80002c6:	4b17      	ldr	r3, [pc, #92]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002ca:	4a16      	ldr	r2, [pc, #88]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002d0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002d2:	e01f      	b.n	8000314 <SPI_PeriClockControl+0x94>
				if(pSPIx == SPI1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <SPI_PeriClockControl+0xa0>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d106      	bne.n	80002ea <SPI_PeriClockControl+0x6a>
							SPI1_PCLK_DI();
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002e0:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002e6:	6613      	str	r3, [r2, #96]	@ 0x60
}
 80002e8:	e014      	b.n	8000314 <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI2)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <SPI_PeriClockControl+0xa8>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <SPI_PeriClockControl+0x80>
							SPI2_PCLK_DI();
 80002f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 80002f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002fc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002fe:	e009      	b.n	8000314 <SPI_PeriClockControl+0x94>
						else if(pSPIx==SPI3)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <SPI_PeriClockControl+0xac>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d105      	bne.n	8000314 <SPI_PeriClockControl+0x94>
							SPI3_PCLK_DI();
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 800030a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800030c:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <SPI_PeriClockControl+0xa4>)
 800030e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000312:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40013000 	.word	0x40013000
 8000324:	40021000 	.word	0x40021000
 8000328:	40003800 	.word	0x40003800
 800032c:	40003c00 	.word	0x40003c00

08000330 <SPI_Init>:
/*
 *  Init and De-init
 */

void SPI_Init(SPI_Handle_t *pSPIHANDLE)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	// Configure the SPI_CR1 Register
	uint32_t tempreg=0;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]

			SPI_PeriClockControl(pSPIHANDLE->pSPIx, ENABLE);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff9c 	bl	8000280 <SPI_PeriClockControl>

			// Configure the device mode
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DeviceMode<<2;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	4313      	orrs	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]

			//Configure the Bus config
			if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_FD)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	795b      	ldrb	r3, [r3, #5]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d104      	bne.n	8000366 <SPI_Init+0x36>
			{
				//  BIDI mode should be cleared
				tempreg &=~(1<<15);
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e014      	b.n	8000390 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_HD)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	795b      	ldrb	r3, [r3, #5]
 800036a:	2b02      	cmp	r3, #2
 800036c:	d104      	bne.n	8000378 <SPI_Init+0x48>
			{
				//  BIDI mode should be set
				tempreg |=(1<<15);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	e00b      	b.n	8000390 <SPI_Init+0x60>
			}
			else if(pSPIHANDLE->SPIConfig.SPI_BusConfig==SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	795b      	ldrb	r3, [r3, #5]
 800037c:	2b03      	cmp	r3, #3
 800037e:	d107      	bne.n	8000390 <SPI_Init+0x60>
			{
				// BIDI mode should be cleared
				tempreg &=~(1<<15);
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000386:	60fb      	str	r3, [r7, #12]

				// RXONLY bit must be set
				tempreg |=(1<<10);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800038e:	60fb      	str	r3, [r7, #12]
			}

			// Configure the SPI Serial Clock Speed(baud rate)
			tempreg |=pSPIHANDLE->SPIConfig.SPI_SclkSpeed<<3;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	799b      	ldrb	r3, [r3, #6]
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	4313      	orrs	r3, r2
 800039a:	60fb      	str	r3, [r7, #12]

			// Configure the CPOL
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPOL<<1;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7a1b      	ldrb	r3, [r3, #8]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	60fb      	str	r3, [r7, #12]

			// Configure the CPHA
			tempreg |=pSPIHANDLE->SPIConfig.SPI_CPHA<<0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	7a5b      	ldrb	r3, [r3, #9]
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR1 |=tempreg;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	6819      	ldr	r1, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	430a      	orrs	r2, r1
 80003c2:	601a      	str	r2, [r3, #0]

			tempreg=0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]

			//// Configure the DFF
			tempreg |=pSPIHANDLE->SPIConfig.SPI_DFF<<8;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	79db      	ldrb	r3, [r3, #7]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]

			pSPIHANDLE->pSPIx->CR2 |=tempreg;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6859      	ldr	r1, [r3, #4]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	605a      	str	r2, [r3, #4]


}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <SPI_GetFlagStatus>:


void SPI_DeInit(SPI_RegDef_t *pSPIx);

uint8_t SPI_GetFlagStatus(SPI_RegDef_t*pSPIx, uint32_t FlagName)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
	if(pSPIx -> SR &FlagName){
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	4013      	ands	r3, r2
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SPI_GetFlagStatus+0x1a>
		return SPI_FLAG_SET;
 8000402:	2301      	movs	r3, #1
 8000404:	e000      	b.n	8000408 <SPI_GetFlagStatus+0x1c>
	}
	return SPI_FLAG_RESET;
 8000406:	2300      	movs	r3, #0
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <SPI_SendData>:
 *   Data Send and Receive
 */

// Blocking (polling) send data function
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer,uint32_t Len)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000420:	e012      	b.n	8000448 <SPI_SendData+0x34>
	{
		// Wait until TXE (Transmit buffer empty) flag is set
		while(((pSPIx->SR >> 1) & 1) == 0);
 8000422:	bf00      	nop
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	085b      	lsrs	r3, r3, #1
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0f8      	beq.n	8000424 <SPI_SendData+0x10>

		// Load data into Data Register (DR)
		pSPIx->DR = *pTxBuffer;
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	461a      	mov	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	60da      	str	r2, [r3, #12]

		Len--;          // Decrement length
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	3b01      	subs	r3, #1
 8000440:	607b      	str	r3, [r7, #4]
		pTxBuffer++;    // Move buffer pointer
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	3301      	adds	r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1e9      	bne.n	8000422 <SPI_SendData+0xe>
	}
}
 800044e:	bf00      	nop
 8000450:	bf00      	nop
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <SPI_ReceiveData>:

// Blocking (polling) receive data function
void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRxBuffer,uint32_t Len)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000468:	e011      	b.n	800048e <SPI_ReceiveData+0x32>
	{
		// Wait until RXNE (Receive buffer not empty) flag is set
		while(((pSPIx->SR >> 0) & 1) == 0);
 800046a:	bf00      	nop
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f9      	beq.n	800046c <SPI_ReceiveData+0x10>

		// Read data from Data Register into buffer
		*(pRxBuffer) = pSPIx->DR;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	b2da      	uxtb	r2, r3
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	701a      	strb	r2, [r3, #0]

		Len--;         // Decrement length
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3b01      	subs	r3, #1
 8000486:	607b      	str	r3, [r7, #4]
		pRxBuffer++;   // Move buffer pointer
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	3301      	adds	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1ea      	bne.n	800046a <SPI_ReceiveData+0xe>
	}
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <SPI_PeripheralControl>:

// Enable or disable SPI peripheral
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b083      	sub	sp, #12
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
 80004aa:	460b      	mov	r3, r1
 80004ac:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d106      	bne.n	80004c2 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << 6);  // Set SPE bit
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << 6);  // Clear SPE bit
	}
}
 80004c0:	e005      	b.n	80004ce <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << 6);  // Clear SPE bit
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <SPI_SSOEConfig>:
	}
}

// Configure SSOE (Slave Select Output Enable)
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	460b      	mov	r3, r1
 80004e4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d106      	bne.n	80004fa <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << 2);  // Set SSOE bit
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	f043 0204 	orr.w	r2, r3, #4
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << 2);  // Clear SSOE bit
	}
}
 80004f8:	e005      	b.n	8000506 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << 2);  // Clear SSOE bit
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f023 0204 	bic.w	r2, r3, #4
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d157      	bne.n	80005d6 <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800052c:	d106      	bne.n	800053c <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 800052e:	4b5a      	ldr	r3, [pc, #360]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	4a59      	ldr	r2, [pc, #356]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 800053a:	e0a6      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4a57      	ldr	r2, [pc, #348]	@ (800069c <GPIO_PeriClockControl+0x188>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d106      	bne.n	8000552 <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 8000544:	4b54      	ldr	r3, [pc, #336]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000548:	4a53      	ldr	r2, [pc, #332]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000550:	e09b      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a52      	ldr	r2, [pc, #328]	@ (80006a0 <GPIO_PeriClockControl+0x18c>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 800055a:	4b4f      	ldr	r3, [pc, #316]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	4a4e      	ldr	r2, [pc, #312]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000566:	e090      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a4e      	ldr	r2, [pc, #312]	@ (80006a4 <GPIO_PeriClockControl+0x190>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 8000570:	4b49      	ldr	r3, [pc, #292]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000574:	4a48      	ldr	r2, [pc, #288]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800057c:	e085      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a49      	ldr	r2, [pc, #292]	@ (80006a8 <GPIO_PeriClockControl+0x194>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 8000586:	4b44      	ldr	r3, [pc, #272]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a43      	ldr	r2, [pc, #268]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000592:	e07a      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a45      	ldr	r2, [pc, #276]	@ (80006ac <GPIO_PeriClockControl+0x198>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 800059c:	4b3e      	ldr	r3, [pc, #248]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800059e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a0:	4a3d      	ldr	r2, [pc, #244]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005a8:	e06f      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a40      	ldr	r2, [pc, #256]	@ (80006b0 <GPIO_PeriClockControl+0x19c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 80005b2:	4b39      	ldr	r3, [pc, #228]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a38      	ldr	r2, [pc, #224]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005be:	e064      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a3c      	ldr	r2, [pc, #240]	@ (80006b4 <GPIO_PeriClockControl+0x1a0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d160      	bne.n	800068a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 80005c8:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005cc:	4a32      	ldr	r2, [pc, #200]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005d4:	e059      	b.n	800068a <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d156      	bne.n	800068a <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80005e2:	d106      	bne.n	80005f2 <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005ea:	f023 0301 	bic.w	r3, r3, #1
 80005ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80005f0:	e04b      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a29      	ldr	r2, [pc, #164]	@ (800069c <GPIO_PeriClockControl+0x188>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 80005fa:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a26      	ldr	r2, [pc, #152]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000600:	f023 0302 	bic.w	r3, r3, #2
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000606:	e040      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a25      	ldr	r2, [pc, #148]	@ (80006a0 <GPIO_PeriClockControl+0x18c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000614:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000616:	f023 0304 	bic.w	r3, r3, #4
 800061a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800061c:	e035      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <GPIO_PeriClockControl+0x190>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800062c:	f023 0308 	bic.w	r3, r3, #8
 8000630:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000632:	e02a      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <GPIO_PeriClockControl+0x194>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000640:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000642:	f023 0310 	bic.w	r3, r3, #16
 8000646:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000648:	e01f      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <GPIO_PeriClockControl+0x198>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a10      	ldr	r2, [pc, #64]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000658:	f023 0320 	bic.w	r3, r3, #32
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800065e:	e014      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <GPIO_PeriClockControl+0x19c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d106      	bne.n	8000676 <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000668:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066c:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 800066e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000672:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000674:	e009      	b.n	800068a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <GPIO_PeriClockControl+0x1a0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d105      	bne.n	800068a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <GPIO_PeriClockControl+0x184>)
 8000684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	48000400 	.word	0x48000400
 80006a0:	48000800 	.word	0x48000800
 80006a4:	48000c00 	.word	0x48000c00
 80006a8:	48001000 	.word	0x48001000
 80006ac:	48001400 	.word	0x48001400
 80006b0:	48001800 	.word	0x48001800
 80006b4:	48001c00 	.word	0x48001c00

080006b8 <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ff22 	bl	8000514 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d822      	bhi.n	800071e <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80006e8:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	2103      	movs	r1, #3
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	400a      	ands	r2, r1
 8000706:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	430a      	orrs	r2, r1
 8000716:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
 800071c:	e0e1      	b.n	80008e2 <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	795b      	ldrb	r3, [r3, #5]
 8000722:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800072e:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	2103      	movs	r1, #3
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	6819      	ldr	r1, [r3, #0]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	430a      	orrs	r2, r1
 800075c:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	795b      	ldrb	r3, [r3, #5]
 8000766:	2b04      	cmp	r3, #4
 8000768:	d117      	bne.n	800079a <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800076a:	4b47      	ldr	r3, [pc, #284]	@ (8000888 <GPIO_Init+0x1d0>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	7912      	ldrb	r2, [r2, #4]
 8000772:	4611      	mov	r1, r2
 8000774:	2201      	movs	r2, #1
 8000776:	408a      	lsls	r2, r1
 8000778:	4611      	mov	r1, r2
 800077a:	4a43      	ldr	r2, [pc, #268]	@ (8000888 <GPIO_Init+0x1d0>)
 800077c:	430b      	orrs	r3, r1
 800077e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000780:	4b41      	ldr	r3, [pc, #260]	@ (8000888 <GPIO_Init+0x1d0>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	7912      	ldrb	r2, [r2, #4]
 8000788:	4611      	mov	r1, r2
 800078a:	2201      	movs	r2, #1
 800078c:	408a      	lsls	r2, r1
 800078e:	43d2      	mvns	r2, r2
 8000790:	4611      	mov	r1, r2
 8000792:	4a3d      	ldr	r2, [pc, #244]	@ (8000888 <GPIO_Init+0x1d0>)
 8000794:	400b      	ands	r3, r1
 8000796:	6093      	str	r3, [r2, #8]
 8000798:	e035      	b.n	8000806 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b05      	cmp	r3, #5
 80007a0:	d117      	bne.n	80007d2 <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <GPIO_Init+0x1d0>)
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7912      	ldrb	r2, [r2, #4]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a35      	ldr	r2, [pc, #212]	@ (8000888 <GPIO_Init+0x1d0>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007b8:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <GPIO_Init+0x1d0>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	7912      	ldrb	r2, [r2, #4]
 80007c0:	4611      	mov	r1, r2
 80007c2:	2201      	movs	r2, #1
 80007c4:	408a      	lsls	r2, r1
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a2f      	ldr	r2, [pc, #188]	@ (8000888 <GPIO_Init+0x1d0>)
 80007cc:	400b      	ands	r3, r1
 80007ce:	60d3      	str	r3, [r2, #12]
 80007d0:	e019      	b.n	8000806 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	795b      	ldrb	r3, [r3, #5]
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d115      	bne.n	8000806 <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <GPIO_Init+0x1d0>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7912      	ldrb	r2, [r2, #4]
 80007e2:	4611      	mov	r1, r2
 80007e4:	2201      	movs	r2, #1
 80007e6:	408a      	lsls	r2, r1
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a27      	ldr	r2, [pc, #156]	@ (8000888 <GPIO_Init+0x1d0>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <GPIO_Init+0x1d0>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	7912      	ldrb	r2, [r2, #4]
 80007f8:	4611      	mov	r1, r2
 80007fa:	2201      	movs	r2, #1
 80007fc:	408a      	lsls	r2, r1
 80007fe:	4611      	mov	r1, r2
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <GPIO_Init+0x1d0>)
 8000802:	430b      	orrs	r3, r1
 8000804:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	f003 0303 	and.w	r3, r3, #3
 8000816:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000820:	d042      	beq.n	80008a8 <GPIO_Init+0x1f0>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a19      	ldr	r2, [pc, #100]	@ (800088c <GPIO_Init+0x1d4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d02b      	beq.n	8000884 <GPIO_Init+0x1cc>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <GPIO_Init+0x1d8>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d024      	beq.n	8000880 <GPIO_Init+0x1c8>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a16      	ldr	r2, [pc, #88]	@ (8000894 <GPIO_Init+0x1dc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d01d      	beq.n	800087c <GPIO_Init+0x1c4>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a14      	ldr	r2, [pc, #80]	@ (8000898 <GPIO_Init+0x1e0>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d016      	beq.n	8000878 <GPIO_Init+0x1c0>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a13      	ldr	r2, [pc, #76]	@ (800089c <GPIO_Init+0x1e4>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d00f      	beq.n	8000874 <GPIO_Init+0x1bc>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a11      	ldr	r2, [pc, #68]	@ (80008a0 <GPIO_Init+0x1e8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d008      	beq.n	8000870 <GPIO_Init+0x1b8>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <GPIO_Init+0x1ec>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d101      	bne.n	800086c <GPIO_Init+0x1b4>
 8000868:	2307      	movs	r3, #7
 800086a:	e01e      	b.n	80008aa <GPIO_Init+0x1f2>
 800086c:	2300      	movs	r3, #0
 800086e:	e01c      	b.n	80008aa <GPIO_Init+0x1f2>
 8000870:	2306      	movs	r3, #6
 8000872:	e01a      	b.n	80008aa <GPIO_Init+0x1f2>
 8000874:	2305      	movs	r3, #5
 8000876:	e018      	b.n	80008aa <GPIO_Init+0x1f2>
 8000878:	2304      	movs	r3, #4
 800087a:	e016      	b.n	80008aa <GPIO_Init+0x1f2>
 800087c:	2303      	movs	r3, #3
 800087e:	e014      	b.n	80008aa <GPIO_Init+0x1f2>
 8000880:	2302      	movs	r3, #2
 8000882:	e012      	b.n	80008aa <GPIO_Init+0x1f2>
 8000884:	2301      	movs	r3, #1
 8000886:	e010      	b.n	80008aa <GPIO_Init+0x1f2>
 8000888:	40010400 	.word	0x40010400
 800088c:	48000400 	.word	0x48000400
 8000890:	48000800 	.word	0x48000800
 8000894:	48000c00 	.word	0x48000c00
 8000898:	48001000 	.word	0x48001000
 800089c:	48001400 	.word	0x48001400
 80008a0:	48001800 	.word	0x48001800
 80008a4:	48001c00 	.word	0x48001c00
 80008a8:	2300      	movs	r3, #0
 80008aa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008ac:	4b5d      	ldr	r3, [pc, #372]	@ (8000a24 <GPIO_Init+0x36c>)
 80008ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b0:	4a5c      	ldr	r2, [pc, #368]	@ (8000a24 <GPIO_Init+0x36c>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 80008b8:	7c7a      	ldrb	r2, [r7, #17]
 80008ba:	7cbb      	ldrb	r3, [r7, #18]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	fa02 f103 	lsl.w	r1, r2, r3
 80008c2:	4a59      	ldr	r2, [pc, #356]	@ (8000a28 <GPIO_Init+0x370>)
 80008c4:	7cfb      	ldrb	r3, [r7, #19]
 80008c6:	3302      	adds	r3, #2
 80008c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008cc:	4b57      	ldr	r3, [pc, #348]	@ (8000a2c <GPIO_Init+0x374>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	7912      	ldrb	r2, [r2, #4]
 80008d4:	4611      	mov	r1, r2
 80008d6:	2201      	movs	r2, #1
 80008d8:	408a      	lsls	r2, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	4a53      	ldr	r2, [pc, #332]	@ (8000a2c <GPIO_Init+0x374>)
 80008de:	430b      	orrs	r3, r1
 80008e0:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	799b      	ldrb	r3, [r3, #6]
 80008ea:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	791b      	ldrb	r3, [r3, #4]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80008f6:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2103      	movs	r1, #3
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	400a      	ands	r2, r1
 8000914:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6899      	ldr	r1, [r3, #8]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	430a      	orrs	r2, r1
 8000924:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	79db      	ldrb	r3, [r3, #7]
 800092e:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 800093a:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68da      	ldr	r2, [r3, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	791b      	ldrb	r3, [r3, #4]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2103      	movs	r1, #3
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	400a      	ands	r2, r1
 8000958:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68d9      	ldr	r1, [r3, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	430a      	orrs	r2, r1
 8000968:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7a1b      	ldrb	r3, [r3, #8]
 8000972:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800097c:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	791b      	ldrb	r3, [r3, #4]
 8000988:	4619      	mov	r1, r3
 800098a:	2301      	movs	r3, #1
 800098c:	408b      	lsls	r3, r1
 800098e:	43db      	mvns	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	400a      	ands	r2, r1
 8000998:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	6859      	ldr	r1, [r3, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	430a      	orrs	r2, r1
 80009a8:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	795b      	ldrb	r3, [r3, #5]
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d132      	bne.n	8000a1c <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	791b      	ldrb	r3, [r3, #4]
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	791b      	ldrb	r3, [r3, #4]
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	3208      	adds	r2, #8
 80009d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	210f      	movs	r1, #15
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	4619      	mov	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4011      	ands	r1, r2
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	3208      	adds	r2, #8
 80009ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	3208      	adds	r2, #8
 80009fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a5b      	ldrb	r3, [r3, #9]
 8000a02:	4619      	mov	r1, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4311      	orrs	r1, r2
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	3208      	adds	r2, #8
 8000a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000
 8000a2c:	40010400 	.word	0x40010400

08000a30 <SPI2_GPIOInits>:
void SPI2_GPIOInits(void);            // Function prototype for SPI2 GPIO setup
extern  void initialise_monitor_handles(void);

// Function to configure GPIO pins for SPI2
void SPI2_GPIOInits(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPIPins;                              // Handle for GPIO config
    SPIPins.pGPIOx = GPIOB;                             // Use GPIOB port
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <SPI2_GPIOInits+0x60>)
 8000a38:	607b      	str	r3, [r7, #4]
    SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;     // Alternate function mode
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	727b      	strb	r3, [r7, #9]
    SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;             // AF5 = SPI2
 8000a3e:	2305      	movs	r3, #5
 8000a40:	737b      	strb	r3, [r7, #13]
    SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;   // Push-pull output
 8000a42:	2300      	movs	r3, #0
 8000a44:	733b      	strb	r3, [r7, #12]
    SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // No pull-up/pull-down
 8000a46:	2300      	movs	r3, #0
 8000a48:	72fb      	strb	r3, [r7, #11]
    SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;    // High speed output
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	72bb      	strb	r3, [r7, #10]
    GPIO_PeriClockControl(GPIOB, ENABLE);                      // Enable GPIOB clock
 8000a4e:	2101      	movs	r1, #1
 8000a50:	480f      	ldr	r0, [pc, #60]	@ (8000a90 <SPI2_GPIOInits+0x60>)
 8000a52:	f7ff fd5f 	bl	8000514 <GPIO_PeriClockControl>

    // Configure NSS pin (PB12)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000a56:	230c      	movs	r3, #12
 8000a58:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe2b 	bl	80006b8 <GPIO_Init>

    // Configure SCK pin (PB13)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000a62:	230d      	movs	r3, #13
 8000a64:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe25 	bl	80006b8 <GPIO_Init>

    // Configure MISO pin (PB14)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000a6e:	230e      	movs	r3, #14
 8000a70:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fe1f 	bl	80006b8 <GPIO_Init>

    // Configure MOSI pin (PB15)
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPIPins);
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe19 	bl	80006b8 <GPIO_Init>
}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	48000400 	.word	0x48000400

08000a94 <SPI2_Inits_master>:


// Function to configure SPI2 peripheral
void SPI2_Inits_master(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle;                         // Handle for SPI config
    SPI2Handle.pSPIx = SPI2;                         // Use SPI2 peripheral
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <SPI2_Inits_master+0x38>)
 8000a9c:	603b      	str	r3, [r7, #0]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER; // Set as master
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	713b      	strb	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;       // Full-duplex
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	717b      	strb	r3, [r7, #5]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;    // Clock speed = PCLK/32
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	71bb      	strb	r3, [r7, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;                 // 8-bit data frame
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;                 // Clock polarity = 0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;                 // Clock phase = 0
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;                    // Hardware NSS management
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	72bb      	strb	r3, [r7, #10]

    SPI_Init(&SPI2Handle);  // Initialize SPI2 with this configuration
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fc37 	bl	8000330 <SPI_Init>
}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40003800 	.word	0x40003800

08000ad0 <SPI2_Inits_Slave>:
void SPI2_Inits_Slave(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2Handle;                         // Handle for SPI config
    SPI2Handle.pSPIx = SPI2;                         // Use SPI2 peripheral
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <SPI2_Inits_Slave+0x38>)
 8000ad8:	603b      	str	r3, [r7, #0]
    SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_SLAVE; // Set as master
 8000ada:	2300      	movs	r3, #0
 8000adc:	713b      	strb	r3, [r7, #4]
    SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;       // Full-duplex
 8000ade:	2301      	movs	r3, #1
 8000ae0:	717b      	strb	r3, [r7, #5]
    SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;    // Clock speed = PCLK/32
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	71bb      	strb	r3, [r7, #6]
    SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;                 // 8-bit data frame
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	71fb      	strb	r3, [r7, #7]
    SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;                 // Clock polarity = 0
 8000aea:	2300      	movs	r3, #0
 8000aec:	723b      	strb	r3, [r7, #8]
    SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;                 // Clock phase = 0
 8000aee:	2300      	movs	r3, #0
 8000af0:	727b      	strb	r3, [r7, #9]
    SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;                    // Hardware NSS management
 8000af2:	2300      	movs	r3, #0
 8000af4:	72bb      	strb	r3, [r7, #10]

    SPI_Init(&SPI2Handle);
 8000af6:	463b      	mov	r3, r7
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fc19 	bl	8000330 <SPI_Init>
}
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40003800 	.word	0x40003800

08000b0c <main>:

int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
	 GPIO_Handle_t GPIOBtn;
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	220c      	movs	r2, #12
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fadd 	bl	80010d8 <memset>
	GPIOBtn.pGPIOx = GPIOC;
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <main+0xbc>)
 8000b20:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000b22:	230d      	movs	r3, #13
 8000b24:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000b26:	2300      	movs	r3, #0
 8000b28:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdbf 	bl	80006b8 <GPIO_Init>
    uint8_t data=15,rData;
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	70fb      	strb	r3, [r7, #3]

    SPI2_GPIOInits();
 8000b3e:	f7ff ff77 	bl	8000a30 <SPI2_GPIOInits>
    SPI2_Inits_master();
 8000b42:	f7ff ffa7 	bl	8000a94 <SPI2_Inits_master>

    SPI_SSOEConfig(SPI2, ENABLE);
 8000b46:	2101      	movs	r1, #1
 8000b48:	4820      	ldr	r0, [pc, #128]	@ (8000bcc <main+0xc0>)
 8000b4a:	f7ff fcc6 	bl	80004da <SPI_SSOEConfig>
    SPI_PeripheralControl(SPI2, ENABLE);
 8000b4e:	2101      	movs	r1, #1
 8000b50:	481e      	ldr	r0, [pc, #120]	@ (8000bcc <main+0xc0>)
 8000b52:	f7ff fca6 	bl	80004a2 <SPI_PeripheralControl>
    initialise_monitor_handles();
 8000b56:	f001 fa5f 	bl	8002018 <initialise_monitor_handles>
    printf("SPI DRIVER \n");
 8000b5a:	481d      	ldr	r0, [pc, #116]	@ (8000bd0 <main+0xc4>)
 8000b5c:	f000 f9dc 	bl	8000f18 <puts>
	SPI_SendData(SPI2, &data, 1);
 8000b60:	1cfb      	adds	r3, r7, #3
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	4819      	ldr	r0, [pc, #100]	@ (8000bcc <main+0xc0>)
 8000b68:	f7ff fc54 	bl	8000414 <SPI_SendData>
	while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000b6c:	bf00      	nop
 8000b6e:	2180      	movs	r1, #128	@ 0x80
 8000b70:	4816      	ldr	r0, [pc, #88]	@ (8000bcc <main+0xc0>)
 8000b72:	f7ff fc3b 	bl	80003ec <SPI_GetFlagStatus>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1f8      	bne.n	8000b6e <main+0x62>
	delay();
 8000b7c:	f000 f82c 	bl	8000bd8 <delay>
	SPI_PeripheralControl(SPI2, DISABLE);
 8000b80:	2100      	movs	r1, #0
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <main+0xc0>)
 8000b84:	f7ff fc8d 	bl	80004a2 <SPI_PeripheralControl>

	SPI2_Inits_Slave();
 8000b88:	f7ff ffa2 	bl	8000ad0 <SPI2_Inits_Slave>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	480f      	ldr	r0, [pc, #60]	@ (8000bcc <main+0xc0>)
 8000b90:	f7ff fca3 	bl	80004da <SPI_SSOEConfig>
	SPI_PeripheralControl(SPI2, ENABLE);
 8000b94:	2101      	movs	r1, #1
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <main+0xc0>)
 8000b98:	f7ff fc83 	bl	80004a2 <SPI_PeripheralControl>
	SPI_ReceiveData(SPI2, &rData, 1);
 8000b9c:	1cbb      	adds	r3, r7, #2
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <main+0xc0>)
 8000ba4:	f7ff fc5a 	bl	800045c <SPI_ReceiveData>
	while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 8000ba8:	bf00      	nop
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <main+0xc0>)
 8000bae:	f7ff fc1d 	bl	80003ec <SPI_GetFlagStatus>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f8      	bne.n	8000baa <main+0x9e>
	printf("Received Data : %d\n",rData);
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <main+0xc8>)
 8000bbe:	f000 f943 	bl	8000e48 <iprintf>
        while(1)
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <main+0xb6>
 8000bc6:	bf00      	nop
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	40003800 	.word	0x40003800
 8000bd0:	0800212c 	.word	0x0800212c
 8000bd4:	08002138 	.word	0x08002138

08000bd8 <delay>:
}


// Simple delay function
void delay()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
    for(volatile int i = 0; i < 500000/2; i++);
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	e002      	b.n	8000bea <delay+0x12>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3301      	adds	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <delay+0x28>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	ddf8      	ble.n	8000be4 <delay+0xc>
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	0003d08f 	.word	0x0003d08f

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	@ (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f000 fa9e 	bl	8001174 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	@ (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20018000 	.word	0x20018000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	20000080 	.word	0x20000080
 8000c6c:	20000280 	.word	0x20000280

08000c70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c70:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480c      	ldr	r0, [pc, #48]	@ (8000cac <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490d      	ldr	r1, [pc, #52]	@ (8000cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0a      	ldr	r4, [pc, #40]	@ (8000cbc <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c9e:	f000 fa6f 	bl	8001180 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000ca2:	f7ff ff33 	bl	8000b0c <main>

08000ca6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ca6:	e7fe      	b.n	8000ca6 <LoopForever>
  ldr   r0, =_estack
 8000ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cb4:	080021ac 	.word	0x080021ac
  ldr r2, =_sbss
 8000cb8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000cbc:	2000027c 	.word	0x2000027c

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <std>:
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	b510      	push	{r4, lr}
 8000cc8:	4604      	mov	r4, r0
 8000cca:	e9c0 3300 	strd	r3, r3, [r0]
 8000cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000cd2:	6083      	str	r3, [r0, #8]
 8000cd4:	8181      	strh	r1, [r0, #12]
 8000cd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000cd8:	81c2      	strh	r2, [r0, #14]
 8000cda:	6183      	str	r3, [r0, #24]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	2208      	movs	r2, #8
 8000ce0:	305c      	adds	r0, #92	@ 0x5c
 8000ce2:	f000 f9f9 	bl	80010d8 <memset>
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d1c <std+0x58>)
 8000ce8:	6263      	str	r3, [r4, #36]	@ 0x24
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <std+0x5c>)
 8000cec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <std+0x60>)
 8000cf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <std+0x64>)
 8000cf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <std+0x68>)
 8000cf8:	6224      	str	r4, [r4, #32]
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	d006      	beq.n	8000d0c <std+0x48>
 8000cfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000d02:	4294      	cmp	r4, r2
 8000d04:	d002      	beq.n	8000d0c <std+0x48>
 8000d06:	33d0      	adds	r3, #208	@ 0xd0
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d105      	bne.n	8000d18 <std+0x54>
 8000d0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d14:	f000 ba58 	b.w	80011c8 <__retarget_lock_init_recursive>
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	bf00      	nop
 8000d1c:	08000f29 	.word	0x08000f29
 8000d20:	08000f4b 	.word	0x08000f4b
 8000d24:	08000f83 	.word	0x08000f83
 8000d28:	08000fa7 	.word	0x08000fa7
 8000d2c:	20000084 	.word	0x20000084

08000d30 <stdio_exit_handler>:
 8000d30:	4a02      	ldr	r2, [pc, #8]	@ (8000d3c <stdio_exit_handler+0xc>)
 8000d32:	4903      	ldr	r1, [pc, #12]	@ (8000d40 <stdio_exit_handler+0x10>)
 8000d34:	4803      	ldr	r0, [pc, #12]	@ (8000d44 <stdio_exit_handler+0x14>)
 8000d36:	f000 b869 	b.w	8000e0c <_fwalk_sglue>
 8000d3a:	bf00      	nop
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	08001a65 	.word	0x08001a65
 8000d44:	20000010 	.word	0x20000010

08000d48 <cleanup_stdio>:
 8000d48:	6841      	ldr	r1, [r0, #4]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <cleanup_stdio+0x34>)
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	4604      	mov	r4, r0
 8000d52:	d001      	beq.n	8000d58 <cleanup_stdio+0x10>
 8000d54:	f000 fe86 	bl	8001a64 <_fflush_r>
 8000d58:	68a1      	ldr	r1, [r4, #8]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <cleanup_stdio+0x38>)
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d002      	beq.n	8000d66 <cleanup_stdio+0x1e>
 8000d60:	4620      	mov	r0, r4
 8000d62:	f000 fe7f 	bl	8001a64 <_fflush_r>
 8000d66:	68e1      	ldr	r1, [r4, #12]
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <cleanup_stdio+0x3c>)
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d004      	beq.n	8000d78 <cleanup_stdio+0x30>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d74:	f000 be76 	b.w	8001a64 <_fflush_r>
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000084 	.word	0x20000084
 8000d80:	200000ec 	.word	0x200000ec
 8000d84:	20000154 	.word	0x20000154

08000d88 <global_stdio_init.part.0>:
 8000d88:	b510      	push	{r4, lr}
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000db8 <global_stdio_init.part.0+0x30>)
 8000d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8000dbc <global_stdio_init.part.0+0x34>)
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc0 <global_stdio_init.part.0+0x38>)
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	4620      	mov	r0, r4
 8000d94:	2200      	movs	r2, #0
 8000d96:	2104      	movs	r1, #4
 8000d98:	f7ff ff94 	bl	8000cc4 <std>
 8000d9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000da0:	2201      	movs	r2, #1
 8000da2:	2109      	movs	r1, #9
 8000da4:	f7ff ff8e 	bl	8000cc4 <std>
 8000da8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000dac:	2202      	movs	r2, #2
 8000dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000db2:	2112      	movs	r1, #18
 8000db4:	f7ff bf86 	b.w	8000cc4 <std>
 8000db8:	200001bc 	.word	0x200001bc
 8000dbc:	20000084 	.word	0x20000084
 8000dc0:	08000d31 	.word	0x08000d31

08000dc4 <__sfp_lock_acquire>:
 8000dc4:	4801      	ldr	r0, [pc, #4]	@ (8000dcc <__sfp_lock_acquire+0x8>)
 8000dc6:	f000 ba00 	b.w	80011ca <__retarget_lock_acquire_recursive>
 8000dca:	bf00      	nop
 8000dcc:	200001c5 	.word	0x200001c5

08000dd0 <__sfp_lock_release>:
 8000dd0:	4801      	ldr	r0, [pc, #4]	@ (8000dd8 <__sfp_lock_release+0x8>)
 8000dd2:	f000 b9fb 	b.w	80011cc <__retarget_lock_release_recursive>
 8000dd6:	bf00      	nop
 8000dd8:	200001c5 	.word	0x200001c5

08000ddc <__sinit>:
 8000ddc:	b510      	push	{r4, lr}
 8000dde:	4604      	mov	r4, r0
 8000de0:	f7ff fff0 	bl	8000dc4 <__sfp_lock_acquire>
 8000de4:	6a23      	ldr	r3, [r4, #32]
 8000de6:	b11b      	cbz	r3, 8000df0 <__sinit+0x14>
 8000de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dec:	f7ff bff0 	b.w	8000dd0 <__sfp_lock_release>
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <__sinit+0x28>)
 8000df2:	6223      	str	r3, [r4, #32]
 8000df4:	4b04      	ldr	r3, [pc, #16]	@ (8000e08 <__sinit+0x2c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f5      	bne.n	8000de8 <__sinit+0xc>
 8000dfc:	f7ff ffc4 	bl	8000d88 <global_stdio_init.part.0>
 8000e00:	e7f2      	b.n	8000de8 <__sinit+0xc>
 8000e02:	bf00      	nop
 8000e04:	08000d49 	.word	0x08000d49
 8000e08:	200001bc 	.word	0x200001bc

08000e0c <_fwalk_sglue>:
 8000e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e10:	4607      	mov	r7, r0
 8000e12:	4688      	mov	r8, r1
 8000e14:	4614      	mov	r4, r2
 8000e16:	2600      	movs	r6, #0
 8000e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8000e20:	d505      	bpl.n	8000e2e <_fwalk_sglue+0x22>
 8000e22:	6824      	ldr	r4, [r4, #0]
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d1f7      	bne.n	8000e18 <_fwalk_sglue+0xc>
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e2e:	89ab      	ldrh	r3, [r5, #12]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d907      	bls.n	8000e44 <_fwalk_sglue+0x38>
 8000e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <_fwalk_sglue+0x38>
 8000e3c:	4629      	mov	r1, r5
 8000e3e:	4638      	mov	r0, r7
 8000e40:	47c0      	blx	r8
 8000e42:	4306      	orrs	r6, r0
 8000e44:	3568      	adds	r5, #104	@ 0x68
 8000e46:	e7e9      	b.n	8000e1c <_fwalk_sglue+0x10>

08000e48 <iprintf>:
 8000e48:	b40f      	push	{r0, r1, r2, r3}
 8000e4a:	b507      	push	{r0, r1, r2, lr}
 8000e4c:	4906      	ldr	r1, [pc, #24]	@ (8000e68 <iprintf+0x20>)
 8000e4e:	ab04      	add	r3, sp, #16
 8000e50:	6808      	ldr	r0, [r1, #0]
 8000e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e56:	6881      	ldr	r1, [r0, #8]
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	f000 fadb 	bl	8001414 <_vfiprintf_r>
 8000e5e:	b003      	add	sp, #12
 8000e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr
 8000e68:	2000000c 	.word	0x2000000c

08000e6c <_puts_r>:
 8000e6c:	6a03      	ldr	r3, [r0, #32]
 8000e6e:	b570      	push	{r4, r5, r6, lr}
 8000e70:	6884      	ldr	r4, [r0, #8]
 8000e72:	4605      	mov	r5, r0
 8000e74:	460e      	mov	r6, r1
 8000e76:	b90b      	cbnz	r3, 8000e7c <_puts_r+0x10>
 8000e78:	f7ff ffb0 	bl	8000ddc <__sinit>
 8000e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000e7e:	07db      	lsls	r3, r3, #31
 8000e80:	d405      	bmi.n	8000e8e <_puts_r+0x22>
 8000e82:	89a3      	ldrh	r3, [r4, #12]
 8000e84:	0598      	lsls	r0, r3, #22
 8000e86:	d402      	bmi.n	8000e8e <_puts_r+0x22>
 8000e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e8a:	f000 f99e 	bl	80011ca <__retarget_lock_acquire_recursive>
 8000e8e:	89a3      	ldrh	r3, [r4, #12]
 8000e90:	0719      	lsls	r1, r3, #28
 8000e92:	d502      	bpl.n	8000e9a <_puts_r+0x2e>
 8000e94:	6923      	ldr	r3, [r4, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d135      	bne.n	8000f06 <_puts_r+0x9a>
 8000e9a:	4621      	mov	r1, r4
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f000 f8c5 	bl	800102c <__swsetup_r>
 8000ea2:	b380      	cbz	r0, 8000f06 <_puts_r+0x9a>
 8000ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8000ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000eaa:	07da      	lsls	r2, r3, #31
 8000eac:	d405      	bmi.n	8000eba <_puts_r+0x4e>
 8000eae:	89a3      	ldrh	r3, [r4, #12]
 8000eb0:	059b      	lsls	r3, r3, #22
 8000eb2:	d402      	bmi.n	8000eba <_puts_r+0x4e>
 8000eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000eb6:	f000 f989 	bl	80011cc <__retarget_lock_release_recursive>
 8000eba:	4628      	mov	r0, r5
 8000ebc:	bd70      	pop	{r4, r5, r6, pc}
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da04      	bge.n	8000ecc <_puts_r+0x60>
 8000ec2:	69a2      	ldr	r2, [r4, #24]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dc17      	bgt.n	8000ef8 <_puts_r+0x8c>
 8000ec8:	290a      	cmp	r1, #10
 8000eca:	d015      	beq.n	8000ef8 <_puts_r+0x8c>
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	6022      	str	r2, [r4, #0]
 8000ed2:	7019      	strb	r1, [r3, #0]
 8000ed4:	68a3      	ldr	r3, [r4, #8]
 8000ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000eda:	3b01      	subs	r3, #1
 8000edc:	60a3      	str	r3, [r4, #8]
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d1ed      	bne.n	8000ebe <_puts_r+0x52>
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da11      	bge.n	8000f0a <_puts_r+0x9e>
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	210a      	movs	r1, #10
 8000eea:	4628      	mov	r0, r5
 8000eec:	f000 f85f 	bl	8000fae <__swbuf_r>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d0d7      	beq.n	8000ea4 <_puts_r+0x38>
 8000ef4:	250a      	movs	r5, #10
 8000ef6:	e7d7      	b.n	8000ea8 <_puts_r+0x3c>
 8000ef8:	4622      	mov	r2, r4
 8000efa:	4628      	mov	r0, r5
 8000efc:	f000 f857 	bl	8000fae <__swbuf_r>
 8000f00:	3001      	adds	r0, #1
 8000f02:	d1e7      	bne.n	8000ed4 <_puts_r+0x68>
 8000f04:	e7ce      	b.n	8000ea4 <_puts_r+0x38>
 8000f06:	3e01      	subs	r6, #1
 8000f08:	e7e4      	b.n	8000ed4 <_puts_r+0x68>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	6022      	str	r2, [r4, #0]
 8000f10:	220a      	movs	r2, #10
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e7ee      	b.n	8000ef4 <_puts_r+0x88>
	...

08000f18 <puts>:
 8000f18:	4b02      	ldr	r3, [pc, #8]	@ (8000f24 <puts+0xc>)
 8000f1a:	4601      	mov	r1, r0
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	f7ff bfa5 	b.w	8000e6c <_puts_r>
 8000f22:	bf00      	nop
 8000f24:	2000000c 	.word	0x2000000c

08000f28 <__sread>:
 8000f28:	b510      	push	{r4, lr}
 8000f2a:	460c      	mov	r4, r1
 8000f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f30:	f000 f8fc 	bl	800112c <_read_r>
 8000f34:	2800      	cmp	r0, #0
 8000f36:	bfab      	itete	ge
 8000f38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f3c:	181b      	addge	r3, r3, r0
 8000f3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f42:	bfac      	ite	ge
 8000f44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f46:	81a3      	strhlt	r3, [r4, #12]
 8000f48:	bd10      	pop	{r4, pc}

08000f4a <__swrite>:
 8000f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4e:	461f      	mov	r7, r3
 8000f50:	898b      	ldrh	r3, [r1, #12]
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	4605      	mov	r5, r0
 8000f56:	460c      	mov	r4, r1
 8000f58:	4616      	mov	r6, r2
 8000f5a:	d505      	bpl.n	8000f68 <__swrite+0x1e>
 8000f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f60:	2302      	movs	r3, #2
 8000f62:	2200      	movs	r2, #0
 8000f64:	f000 f8d0 	bl	8001108 <_lseek_r>
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f72:	81a3      	strh	r3, [r4, #12]
 8000f74:	4632      	mov	r2, r6
 8000f76:	463b      	mov	r3, r7
 8000f78:	4628      	mov	r0, r5
 8000f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7e:	f000 b8e7 	b.w	8001150 <_write_r>

08000f82 <__sseek>:
 8000f82:	b510      	push	{r4, lr}
 8000f84:	460c      	mov	r4, r1
 8000f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f8a:	f000 f8bd 	bl	8001108 <_lseek_r>
 8000f8e:	1c43      	adds	r3, r0, #1
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	bf15      	itete	ne
 8000f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000f9e:	81a3      	strheq	r3, [r4, #12]
 8000fa0:	bf18      	it	ne
 8000fa2:	81a3      	strhne	r3, [r4, #12]
 8000fa4:	bd10      	pop	{r4, pc}

08000fa6 <__sclose>:
 8000fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000faa:	f000 b89d 	b.w	80010e8 <_close_r>

08000fae <__swbuf_r>:
 8000fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb0:	460e      	mov	r6, r1
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	4605      	mov	r5, r0
 8000fb6:	b118      	cbz	r0, 8000fc0 <__swbuf_r+0x12>
 8000fb8:	6a03      	ldr	r3, [r0, #32]
 8000fba:	b90b      	cbnz	r3, 8000fc0 <__swbuf_r+0x12>
 8000fbc:	f7ff ff0e 	bl	8000ddc <__sinit>
 8000fc0:	69a3      	ldr	r3, [r4, #24]
 8000fc2:	60a3      	str	r3, [r4, #8]
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	071a      	lsls	r2, r3, #28
 8000fc8:	d501      	bpl.n	8000fce <__swbuf_r+0x20>
 8000fca:	6923      	ldr	r3, [r4, #16]
 8000fcc:	b943      	cbnz	r3, 8000fe0 <__swbuf_r+0x32>
 8000fce:	4621      	mov	r1, r4
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f000 f82b 	bl	800102c <__swsetup_r>
 8000fd6:	b118      	cbz	r0, 8000fe0 <__swbuf_r+0x32>
 8000fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8000fdc:	4638      	mov	r0, r7
 8000fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	6922      	ldr	r2, [r4, #16]
 8000fe4:	1a98      	subs	r0, r3, r2
 8000fe6:	6963      	ldr	r3, [r4, #20]
 8000fe8:	b2f6      	uxtb	r6, r6
 8000fea:	4283      	cmp	r3, r0
 8000fec:	4637      	mov	r7, r6
 8000fee:	dc05      	bgt.n	8000ffc <__swbuf_r+0x4e>
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f000 fd36 	bl	8001a64 <_fflush_r>
 8000ff8:	2800      	cmp	r0, #0
 8000ffa:	d1ed      	bne.n	8000fd8 <__swbuf_r+0x2a>
 8000ffc:	68a3      	ldr	r3, [r4, #8]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	60a3      	str	r3, [r4, #8]
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	6022      	str	r2, [r4, #0]
 8001008:	701e      	strb	r6, [r3, #0]
 800100a:	6962      	ldr	r2, [r4, #20]
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	429a      	cmp	r2, r3
 8001010:	d004      	beq.n	800101c <__swbuf_r+0x6e>
 8001012:	89a3      	ldrh	r3, [r4, #12]
 8001014:	07db      	lsls	r3, r3, #31
 8001016:	d5e1      	bpl.n	8000fdc <__swbuf_r+0x2e>
 8001018:	2e0a      	cmp	r6, #10
 800101a:	d1df      	bne.n	8000fdc <__swbuf_r+0x2e>
 800101c:	4621      	mov	r1, r4
 800101e:	4628      	mov	r0, r5
 8001020:	f000 fd20 	bl	8001a64 <_fflush_r>
 8001024:	2800      	cmp	r0, #0
 8001026:	d0d9      	beq.n	8000fdc <__swbuf_r+0x2e>
 8001028:	e7d6      	b.n	8000fd8 <__swbuf_r+0x2a>
	...

0800102c <__swsetup_r>:
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4b29      	ldr	r3, [pc, #164]	@ (80010d4 <__swsetup_r+0xa8>)
 8001030:	4605      	mov	r5, r0
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	460c      	mov	r4, r1
 8001036:	b118      	cbz	r0, 8001040 <__swsetup_r+0x14>
 8001038:	6a03      	ldr	r3, [r0, #32]
 800103a:	b90b      	cbnz	r3, 8001040 <__swsetup_r+0x14>
 800103c:	f7ff fece 	bl	8000ddc <__sinit>
 8001040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001044:	0719      	lsls	r1, r3, #28
 8001046:	d422      	bmi.n	800108e <__swsetup_r+0x62>
 8001048:	06da      	lsls	r2, r3, #27
 800104a:	d407      	bmi.n	800105c <__swsetup_r+0x30>
 800104c:	2209      	movs	r2, #9
 800104e:	602a      	str	r2, [r5, #0]
 8001050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001054:	81a3      	strh	r3, [r4, #12]
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	e033      	b.n	80010c4 <__swsetup_r+0x98>
 800105c:	0758      	lsls	r0, r3, #29
 800105e:	d512      	bpl.n	8001086 <__swsetup_r+0x5a>
 8001060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001062:	b141      	cbz	r1, 8001076 <__swsetup_r+0x4a>
 8001064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001068:	4299      	cmp	r1, r3
 800106a:	d002      	beq.n	8001072 <__swsetup_r+0x46>
 800106c:	4628      	mov	r0, r5
 800106e:	f000 f8af 	bl	80011d0 <_free_r>
 8001072:	2300      	movs	r3, #0
 8001074:	6363      	str	r3, [r4, #52]	@ 0x34
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800107c:	81a3      	strh	r3, [r4, #12]
 800107e:	2300      	movs	r3, #0
 8001080:	6063      	str	r3, [r4, #4]
 8001082:	6923      	ldr	r3, [r4, #16]
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	81a3      	strh	r3, [r4, #12]
 800108e:	6923      	ldr	r3, [r4, #16]
 8001090:	b94b      	cbnz	r3, 80010a6 <__swsetup_r+0x7a>
 8001092:	89a3      	ldrh	r3, [r4, #12]
 8001094:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800109c:	d003      	beq.n	80010a6 <__swsetup_r+0x7a>
 800109e:	4621      	mov	r1, r4
 80010a0:	4628      	mov	r0, r5
 80010a2:	f000 fd2d 	bl	8001b00 <__smakebuf_r>
 80010a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010aa:	f013 0201 	ands.w	r2, r3, #1
 80010ae:	d00a      	beq.n	80010c6 <__swsetup_r+0x9a>
 80010b0:	2200      	movs	r2, #0
 80010b2:	60a2      	str	r2, [r4, #8]
 80010b4:	6962      	ldr	r2, [r4, #20]
 80010b6:	4252      	negs	r2, r2
 80010b8:	61a2      	str	r2, [r4, #24]
 80010ba:	6922      	ldr	r2, [r4, #16]
 80010bc:	b942      	cbnz	r2, 80010d0 <__swsetup_r+0xa4>
 80010be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80010c2:	d1c5      	bne.n	8001050 <__swsetup_r+0x24>
 80010c4:	bd38      	pop	{r3, r4, r5, pc}
 80010c6:	0799      	lsls	r1, r3, #30
 80010c8:	bf58      	it	pl
 80010ca:	6962      	ldrpl	r2, [r4, #20]
 80010cc:	60a2      	str	r2, [r4, #8]
 80010ce:	e7f4      	b.n	80010ba <__swsetup_r+0x8e>
 80010d0:	2000      	movs	r0, #0
 80010d2:	e7f7      	b.n	80010c4 <__swsetup_r+0x98>
 80010d4:	2000000c 	.word	0x2000000c

080010d8 <memset>:
 80010d8:	4402      	add	r2, r0
 80010da:	4603      	mov	r3, r0
 80010dc:	4293      	cmp	r3, r2
 80010de:	d100      	bne.n	80010e2 <memset+0xa>
 80010e0:	4770      	bx	lr
 80010e2:	f803 1b01 	strb.w	r1, [r3], #1
 80010e6:	e7f9      	b.n	80010dc <memset+0x4>

080010e8 <_close_r>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	4d06      	ldr	r5, [pc, #24]	@ (8001104 <_close_r+0x1c>)
 80010ec:	2300      	movs	r3, #0
 80010ee:	4604      	mov	r4, r0
 80010f0:	4608      	mov	r0, r1
 80010f2:	602b      	str	r3, [r5, #0]
 80010f4:	f000 fe44 	bl	8001d80 <_close>
 80010f8:	1c43      	adds	r3, r0, #1
 80010fa:	d102      	bne.n	8001102 <_close_r+0x1a>
 80010fc:	682b      	ldr	r3, [r5, #0]
 80010fe:	b103      	cbz	r3, 8001102 <_close_r+0x1a>
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	200001c0 	.word	0x200001c0

08001108 <_lseek_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	4d07      	ldr	r5, [pc, #28]	@ (8001128 <_lseek_r+0x20>)
 800110c:	4604      	mov	r4, r0
 800110e:	4608      	mov	r0, r1
 8001110:	4611      	mov	r1, r2
 8001112:	2200      	movs	r2, #0
 8001114:	602a      	str	r2, [r5, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	f000 fdf3 	bl	8001d02 <_lseek>
 800111c:	1c43      	adds	r3, r0, #1
 800111e:	d102      	bne.n	8001126 <_lseek_r+0x1e>
 8001120:	682b      	ldr	r3, [r5, #0]
 8001122:	b103      	cbz	r3, 8001126 <_lseek_r+0x1e>
 8001124:	6023      	str	r3, [r4, #0]
 8001126:	bd38      	pop	{r3, r4, r5, pc}
 8001128:	200001c0 	.word	0x200001c0

0800112c <_read_r>:
 800112c:	b538      	push	{r3, r4, r5, lr}
 800112e:	4d07      	ldr	r5, [pc, #28]	@ (800114c <_read_r+0x20>)
 8001130:	4604      	mov	r4, r0
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	2200      	movs	r2, #0
 8001138:	602a      	str	r2, [r5, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	f000 fd8b 	bl	8001c56 <_read>
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	d102      	bne.n	800114a <_read_r+0x1e>
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	b103      	cbz	r3, 800114a <_read_r+0x1e>
 8001148:	6023      	str	r3, [r4, #0]
 800114a:	bd38      	pop	{r3, r4, r5, pc}
 800114c:	200001c0 	.word	0x200001c0

08001150 <_write_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4d07      	ldr	r5, [pc, #28]	@ (8001170 <_write_r+0x20>)
 8001154:	4604      	mov	r4, r0
 8001156:	4608      	mov	r0, r1
 8001158:	4611      	mov	r1, r2
 800115a:	2200      	movs	r2, #0
 800115c:	602a      	str	r2, [r5, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	f000 fde1 	bl	8001d26 <_write>
 8001164:	1c43      	adds	r3, r0, #1
 8001166:	d102      	bne.n	800116e <_write_r+0x1e>
 8001168:	682b      	ldr	r3, [r5, #0]
 800116a:	b103      	cbz	r3, 800116e <_write_r+0x1e>
 800116c:	6023      	str	r3, [r4, #0]
 800116e:	bd38      	pop	{r3, r4, r5, pc}
 8001170:	200001c0 	.word	0x200001c0

08001174 <__errno>:
 8001174:	4b01      	ldr	r3, [pc, #4]	@ (800117c <__errno+0x8>)
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c

08001180 <__libc_init_array>:
 8001180:	b570      	push	{r4, r5, r6, lr}
 8001182:	4d0d      	ldr	r5, [pc, #52]	@ (80011b8 <__libc_init_array+0x38>)
 8001184:	4c0d      	ldr	r4, [pc, #52]	@ (80011bc <__libc_init_array+0x3c>)
 8001186:	1b64      	subs	r4, r4, r5
 8001188:	10a4      	asrs	r4, r4, #2
 800118a:	2600      	movs	r6, #0
 800118c:	42a6      	cmp	r6, r4
 800118e:	d109      	bne.n	80011a4 <__libc_init_array+0x24>
 8001190:	4d0b      	ldr	r5, [pc, #44]	@ (80011c0 <__libc_init_array+0x40>)
 8001192:	4c0c      	ldr	r4, [pc, #48]	@ (80011c4 <__libc_init_array+0x44>)
 8001194:	f000 ffbe 	bl	8002114 <_init>
 8001198:	1b64      	subs	r4, r4, r5
 800119a:	10a4      	asrs	r4, r4, #2
 800119c:	2600      	movs	r6, #0
 800119e:	42a6      	cmp	r6, r4
 80011a0:	d105      	bne.n	80011ae <__libc_init_array+0x2e>
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
 80011a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011a8:	4798      	blx	r3
 80011aa:	3601      	adds	r6, #1
 80011ac:	e7ee      	b.n	800118c <__libc_init_array+0xc>
 80011ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b2:	4798      	blx	r3
 80011b4:	3601      	adds	r6, #1
 80011b6:	e7f2      	b.n	800119e <__libc_init_array+0x1e>
 80011b8:	080021a4 	.word	0x080021a4
 80011bc:	080021a4 	.word	0x080021a4
 80011c0:	080021a4 	.word	0x080021a4
 80011c4:	080021a8 	.word	0x080021a8

080011c8 <__retarget_lock_init_recursive>:
 80011c8:	4770      	bx	lr

080011ca <__retarget_lock_acquire_recursive>:
 80011ca:	4770      	bx	lr

080011cc <__retarget_lock_release_recursive>:
 80011cc:	4770      	bx	lr
	...

080011d0 <_free_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4605      	mov	r5, r0
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d041      	beq.n	800125c <_free_r+0x8c>
 80011d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011dc:	1f0c      	subs	r4, r1, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bfb8      	it	lt
 80011e2:	18e4      	addlt	r4, r4, r3
 80011e4:	f000 f8e0 	bl	80013a8 <__malloc_lock>
 80011e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001260 <_free_r+0x90>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	b933      	cbnz	r3, 80011fc <_free_r+0x2c>
 80011ee:	6063      	str	r3, [r4, #4]
 80011f0:	6014      	str	r4, [r2, #0]
 80011f2:	4628      	mov	r0, r5
 80011f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011f8:	f000 b8dc 	b.w	80013b4 <__malloc_unlock>
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	d908      	bls.n	8001212 <_free_r+0x42>
 8001200:	6820      	ldr	r0, [r4, #0]
 8001202:	1821      	adds	r1, r4, r0
 8001204:	428b      	cmp	r3, r1
 8001206:	bf01      	itttt	eq
 8001208:	6819      	ldreq	r1, [r3, #0]
 800120a:	685b      	ldreq	r3, [r3, #4]
 800120c:	1809      	addeq	r1, r1, r0
 800120e:	6021      	streq	r1, [r4, #0]
 8001210:	e7ed      	b.n	80011ee <_free_r+0x1e>
 8001212:	461a      	mov	r2, r3
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	b10b      	cbz	r3, 800121c <_free_r+0x4c>
 8001218:	42a3      	cmp	r3, r4
 800121a:	d9fa      	bls.n	8001212 <_free_r+0x42>
 800121c:	6811      	ldr	r1, [r2, #0]
 800121e:	1850      	adds	r0, r2, r1
 8001220:	42a0      	cmp	r0, r4
 8001222:	d10b      	bne.n	800123c <_free_r+0x6c>
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	4401      	add	r1, r0
 8001228:	1850      	adds	r0, r2, r1
 800122a:	4283      	cmp	r3, r0
 800122c:	6011      	str	r1, [r2, #0]
 800122e:	d1e0      	bne.n	80011f2 <_free_r+0x22>
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	6053      	str	r3, [r2, #4]
 8001236:	4408      	add	r0, r1
 8001238:	6010      	str	r0, [r2, #0]
 800123a:	e7da      	b.n	80011f2 <_free_r+0x22>
 800123c:	d902      	bls.n	8001244 <_free_r+0x74>
 800123e:	230c      	movs	r3, #12
 8001240:	602b      	str	r3, [r5, #0]
 8001242:	e7d6      	b.n	80011f2 <_free_r+0x22>
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	1821      	adds	r1, r4, r0
 8001248:	428b      	cmp	r3, r1
 800124a:	bf04      	itt	eq
 800124c:	6819      	ldreq	r1, [r3, #0]
 800124e:	685b      	ldreq	r3, [r3, #4]
 8001250:	6063      	str	r3, [r4, #4]
 8001252:	bf04      	itt	eq
 8001254:	1809      	addeq	r1, r1, r0
 8001256:	6021      	streq	r1, [r4, #0]
 8001258:	6054      	str	r4, [r2, #4]
 800125a:	e7ca      	b.n	80011f2 <_free_r+0x22>
 800125c:	bd38      	pop	{r3, r4, r5, pc}
 800125e:	bf00      	nop
 8001260:	200001cc 	.word	0x200001cc

08001264 <sbrk_aligned>:
 8001264:	b570      	push	{r4, r5, r6, lr}
 8001266:	4e0f      	ldr	r6, [pc, #60]	@ (80012a4 <sbrk_aligned+0x40>)
 8001268:	460c      	mov	r4, r1
 800126a:	6831      	ldr	r1, [r6, #0]
 800126c:	4605      	mov	r5, r0
 800126e:	b911      	cbnz	r1, 8001276 <sbrk_aligned+0x12>
 8001270:	f000 fca4 	bl	8001bbc <_sbrk_r>
 8001274:	6030      	str	r0, [r6, #0]
 8001276:	4621      	mov	r1, r4
 8001278:	4628      	mov	r0, r5
 800127a:	f000 fc9f 	bl	8001bbc <_sbrk_r>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	d103      	bne.n	800128a <sbrk_aligned+0x26>
 8001282:	f04f 34ff 	mov.w	r4, #4294967295
 8001286:	4620      	mov	r0, r4
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	1cc4      	adds	r4, r0, #3
 800128c:	f024 0403 	bic.w	r4, r4, #3
 8001290:	42a0      	cmp	r0, r4
 8001292:	d0f8      	beq.n	8001286 <sbrk_aligned+0x22>
 8001294:	1a21      	subs	r1, r4, r0
 8001296:	4628      	mov	r0, r5
 8001298:	f000 fc90 	bl	8001bbc <_sbrk_r>
 800129c:	3001      	adds	r0, #1
 800129e:	d1f2      	bne.n	8001286 <sbrk_aligned+0x22>
 80012a0:	e7ef      	b.n	8001282 <sbrk_aligned+0x1e>
 80012a2:	bf00      	nop
 80012a4:	200001c8 	.word	0x200001c8

080012a8 <_malloc_r>:
 80012a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012ac:	1ccd      	adds	r5, r1, #3
 80012ae:	f025 0503 	bic.w	r5, r5, #3
 80012b2:	3508      	adds	r5, #8
 80012b4:	2d0c      	cmp	r5, #12
 80012b6:	bf38      	it	cc
 80012b8:	250c      	movcc	r5, #12
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	4606      	mov	r6, r0
 80012be:	db01      	blt.n	80012c4 <_malloc_r+0x1c>
 80012c0:	42a9      	cmp	r1, r5
 80012c2:	d904      	bls.n	80012ce <_malloc_r+0x26>
 80012c4:	230c      	movs	r3, #12
 80012c6:	6033      	str	r3, [r6, #0]
 80012c8:	2000      	movs	r0, #0
 80012ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013a4 <_malloc_r+0xfc>
 80012d2:	f000 f869 	bl	80013a8 <__malloc_lock>
 80012d6:	f8d8 3000 	ldr.w	r3, [r8]
 80012da:	461c      	mov	r4, r3
 80012dc:	bb44      	cbnz	r4, 8001330 <_malloc_r+0x88>
 80012de:	4629      	mov	r1, r5
 80012e0:	4630      	mov	r0, r6
 80012e2:	f7ff ffbf 	bl	8001264 <sbrk_aligned>
 80012e6:	1c43      	adds	r3, r0, #1
 80012e8:	4604      	mov	r4, r0
 80012ea:	d158      	bne.n	800139e <_malloc_r+0xf6>
 80012ec:	f8d8 4000 	ldr.w	r4, [r8]
 80012f0:	4627      	mov	r7, r4
 80012f2:	2f00      	cmp	r7, #0
 80012f4:	d143      	bne.n	800137e <_malloc_r+0xd6>
 80012f6:	2c00      	cmp	r4, #0
 80012f8:	d04b      	beq.n	8001392 <_malloc_r+0xea>
 80012fa:	6823      	ldr	r3, [r4, #0]
 80012fc:	4639      	mov	r1, r7
 80012fe:	4630      	mov	r0, r6
 8001300:	eb04 0903 	add.w	r9, r4, r3
 8001304:	f000 fc5a 	bl	8001bbc <_sbrk_r>
 8001308:	4581      	cmp	r9, r0
 800130a:	d142      	bne.n	8001392 <_malloc_r+0xea>
 800130c:	6821      	ldr	r1, [r4, #0]
 800130e:	1a6d      	subs	r5, r5, r1
 8001310:	4629      	mov	r1, r5
 8001312:	4630      	mov	r0, r6
 8001314:	f7ff ffa6 	bl	8001264 <sbrk_aligned>
 8001318:	3001      	adds	r0, #1
 800131a:	d03a      	beq.n	8001392 <_malloc_r+0xea>
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	442b      	add	r3, r5
 8001320:	6023      	str	r3, [r4, #0]
 8001322:	f8d8 3000 	ldr.w	r3, [r8]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	bb62      	cbnz	r2, 8001384 <_malloc_r+0xdc>
 800132a:	f8c8 7000 	str.w	r7, [r8]
 800132e:	e00f      	b.n	8001350 <_malloc_r+0xa8>
 8001330:	6822      	ldr	r2, [r4, #0]
 8001332:	1b52      	subs	r2, r2, r5
 8001334:	d420      	bmi.n	8001378 <_malloc_r+0xd0>
 8001336:	2a0b      	cmp	r2, #11
 8001338:	d917      	bls.n	800136a <_malloc_r+0xc2>
 800133a:	1961      	adds	r1, r4, r5
 800133c:	42a3      	cmp	r3, r4
 800133e:	6025      	str	r5, [r4, #0]
 8001340:	bf18      	it	ne
 8001342:	6059      	strne	r1, [r3, #4]
 8001344:	6863      	ldr	r3, [r4, #4]
 8001346:	bf08      	it	eq
 8001348:	f8c8 1000 	streq.w	r1, [r8]
 800134c:	5162      	str	r2, [r4, r5]
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	4630      	mov	r0, r6
 8001352:	f000 f82f 	bl	80013b4 <__malloc_unlock>
 8001356:	f104 000b 	add.w	r0, r4, #11
 800135a:	1d23      	adds	r3, r4, #4
 800135c:	f020 0007 	bic.w	r0, r0, #7
 8001360:	1ac2      	subs	r2, r0, r3
 8001362:	bf1c      	itt	ne
 8001364:	1a1b      	subne	r3, r3, r0
 8001366:	50a3      	strne	r3, [r4, r2]
 8001368:	e7af      	b.n	80012ca <_malloc_r+0x22>
 800136a:	6862      	ldr	r2, [r4, #4]
 800136c:	42a3      	cmp	r3, r4
 800136e:	bf0c      	ite	eq
 8001370:	f8c8 2000 	streq.w	r2, [r8]
 8001374:	605a      	strne	r2, [r3, #4]
 8001376:	e7eb      	b.n	8001350 <_malloc_r+0xa8>
 8001378:	4623      	mov	r3, r4
 800137a:	6864      	ldr	r4, [r4, #4]
 800137c:	e7ae      	b.n	80012dc <_malloc_r+0x34>
 800137e:	463c      	mov	r4, r7
 8001380:	687f      	ldr	r7, [r7, #4]
 8001382:	e7b6      	b.n	80012f2 <_malloc_r+0x4a>
 8001384:	461a      	mov	r2, r3
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	42a3      	cmp	r3, r4
 800138a:	d1fb      	bne.n	8001384 <_malloc_r+0xdc>
 800138c:	2300      	movs	r3, #0
 800138e:	6053      	str	r3, [r2, #4]
 8001390:	e7de      	b.n	8001350 <_malloc_r+0xa8>
 8001392:	230c      	movs	r3, #12
 8001394:	6033      	str	r3, [r6, #0]
 8001396:	4630      	mov	r0, r6
 8001398:	f000 f80c 	bl	80013b4 <__malloc_unlock>
 800139c:	e794      	b.n	80012c8 <_malloc_r+0x20>
 800139e:	6005      	str	r5, [r0, #0]
 80013a0:	e7d6      	b.n	8001350 <_malloc_r+0xa8>
 80013a2:	bf00      	nop
 80013a4:	200001cc 	.word	0x200001cc

080013a8 <__malloc_lock>:
 80013a8:	4801      	ldr	r0, [pc, #4]	@ (80013b0 <__malloc_lock+0x8>)
 80013aa:	f7ff bf0e 	b.w	80011ca <__retarget_lock_acquire_recursive>
 80013ae:	bf00      	nop
 80013b0:	200001c4 	.word	0x200001c4

080013b4 <__malloc_unlock>:
 80013b4:	4801      	ldr	r0, [pc, #4]	@ (80013bc <__malloc_unlock+0x8>)
 80013b6:	f7ff bf09 	b.w	80011cc <__retarget_lock_release_recursive>
 80013ba:	bf00      	nop
 80013bc:	200001c4 	.word	0x200001c4

080013c0 <__sfputc_r>:
 80013c0:	6893      	ldr	r3, [r2, #8]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	b410      	push	{r4}
 80013c8:	6093      	str	r3, [r2, #8]
 80013ca:	da08      	bge.n	80013de <__sfputc_r+0x1e>
 80013cc:	6994      	ldr	r4, [r2, #24]
 80013ce:	42a3      	cmp	r3, r4
 80013d0:	db01      	blt.n	80013d6 <__sfputc_r+0x16>
 80013d2:	290a      	cmp	r1, #10
 80013d4:	d103      	bne.n	80013de <__sfputc_r+0x1e>
 80013d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013da:	f7ff bde8 	b.w	8000fae <__swbuf_r>
 80013de:	6813      	ldr	r3, [r2, #0]
 80013e0:	1c58      	adds	r0, r3, #1
 80013e2:	6010      	str	r0, [r2, #0]
 80013e4:	7019      	strb	r1, [r3, #0]
 80013e6:	4608      	mov	r0, r1
 80013e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <__sfputs_r>:
 80013ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f0:	4606      	mov	r6, r0
 80013f2:	460f      	mov	r7, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	18d5      	adds	r5, r2, r3
 80013f8:	42ac      	cmp	r4, r5
 80013fa:	d101      	bne.n	8001400 <__sfputs_r+0x12>
 80013fc:	2000      	movs	r0, #0
 80013fe:	e007      	b.n	8001410 <__sfputs_r+0x22>
 8001400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001404:	463a      	mov	r2, r7
 8001406:	4630      	mov	r0, r6
 8001408:	f7ff ffda 	bl	80013c0 <__sfputc_r>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	d1f3      	bne.n	80013f8 <__sfputs_r+0xa>
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001414 <_vfiprintf_r>:
 8001414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001418:	460d      	mov	r5, r1
 800141a:	b09d      	sub	sp, #116	@ 0x74
 800141c:	4614      	mov	r4, r2
 800141e:	4698      	mov	r8, r3
 8001420:	4606      	mov	r6, r0
 8001422:	b118      	cbz	r0, 800142c <_vfiprintf_r+0x18>
 8001424:	6a03      	ldr	r3, [r0, #32]
 8001426:	b90b      	cbnz	r3, 800142c <_vfiprintf_r+0x18>
 8001428:	f7ff fcd8 	bl	8000ddc <__sinit>
 800142c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800142e:	07d9      	lsls	r1, r3, #31
 8001430:	d405      	bmi.n	800143e <_vfiprintf_r+0x2a>
 8001432:	89ab      	ldrh	r3, [r5, #12]
 8001434:	059a      	lsls	r2, r3, #22
 8001436:	d402      	bmi.n	800143e <_vfiprintf_r+0x2a>
 8001438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800143a:	f7ff fec6 	bl	80011ca <__retarget_lock_acquire_recursive>
 800143e:	89ab      	ldrh	r3, [r5, #12]
 8001440:	071b      	lsls	r3, r3, #28
 8001442:	d501      	bpl.n	8001448 <_vfiprintf_r+0x34>
 8001444:	692b      	ldr	r3, [r5, #16]
 8001446:	b99b      	cbnz	r3, 8001470 <_vfiprintf_r+0x5c>
 8001448:	4629      	mov	r1, r5
 800144a:	4630      	mov	r0, r6
 800144c:	f7ff fdee 	bl	800102c <__swsetup_r>
 8001450:	b170      	cbz	r0, 8001470 <_vfiprintf_r+0x5c>
 8001452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001454:	07dc      	lsls	r4, r3, #31
 8001456:	d504      	bpl.n	8001462 <_vfiprintf_r+0x4e>
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	b01d      	add	sp, #116	@ 0x74
 800145e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001462:	89ab      	ldrh	r3, [r5, #12]
 8001464:	0598      	lsls	r0, r3, #22
 8001466:	d4f7      	bmi.n	8001458 <_vfiprintf_r+0x44>
 8001468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800146a:	f7ff feaf 	bl	80011cc <__retarget_lock_release_recursive>
 800146e:	e7f3      	b.n	8001458 <_vfiprintf_r+0x44>
 8001470:	2300      	movs	r3, #0
 8001472:	9309      	str	r3, [sp, #36]	@ 0x24
 8001474:	2320      	movs	r3, #32
 8001476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800147a:	f8cd 800c 	str.w	r8, [sp, #12]
 800147e:	2330      	movs	r3, #48	@ 0x30
 8001480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001630 <_vfiprintf_r+0x21c>
 8001484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001488:	f04f 0901 	mov.w	r9, #1
 800148c:	4623      	mov	r3, r4
 800148e:	469a      	mov	sl, r3
 8001490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001494:	b10a      	cbz	r2, 800149a <_vfiprintf_r+0x86>
 8001496:	2a25      	cmp	r2, #37	@ 0x25
 8001498:	d1f9      	bne.n	800148e <_vfiprintf_r+0x7a>
 800149a:	ebba 0b04 	subs.w	fp, sl, r4
 800149e:	d00b      	beq.n	80014b8 <_vfiprintf_r+0xa4>
 80014a0:	465b      	mov	r3, fp
 80014a2:	4622      	mov	r2, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	4630      	mov	r0, r6
 80014a8:	f7ff ffa1 	bl	80013ee <__sfputs_r>
 80014ac:	3001      	adds	r0, #1
 80014ae:	f000 80a7 	beq.w	8001600 <_vfiprintf_r+0x1ec>
 80014b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014b4:	445a      	add	r2, fp
 80014b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80014b8:	f89a 3000 	ldrb.w	r3, [sl]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 809f 	beq.w	8001600 <_vfiprintf_r+0x1ec>
 80014c2:	2300      	movs	r3, #0
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014cc:	f10a 0a01 	add.w	sl, sl, #1
 80014d0:	9304      	str	r3, [sp, #16]
 80014d2:	9307      	str	r3, [sp, #28]
 80014d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80014d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80014da:	4654      	mov	r4, sl
 80014dc:	2205      	movs	r2, #5
 80014de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014e2:	4853      	ldr	r0, [pc, #332]	@ (8001630 <_vfiprintf_r+0x21c>)
 80014e4:	f7fe fe74 	bl	80001d0 <memchr>
 80014e8:	9a04      	ldr	r2, [sp, #16]
 80014ea:	b9d8      	cbnz	r0, 8001524 <_vfiprintf_r+0x110>
 80014ec:	06d1      	lsls	r1, r2, #27
 80014ee:	bf44      	itt	mi
 80014f0:	2320      	movmi	r3, #32
 80014f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80014f6:	0713      	lsls	r3, r2, #28
 80014f8:	bf44      	itt	mi
 80014fa:	232b      	movmi	r3, #43	@ 0x2b
 80014fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001500:	f89a 3000 	ldrb.w	r3, [sl]
 8001504:	2b2a      	cmp	r3, #42	@ 0x2a
 8001506:	d015      	beq.n	8001534 <_vfiprintf_r+0x120>
 8001508:	9a07      	ldr	r2, [sp, #28]
 800150a:	4654      	mov	r4, sl
 800150c:	2000      	movs	r0, #0
 800150e:	f04f 0c0a 	mov.w	ip, #10
 8001512:	4621      	mov	r1, r4
 8001514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001518:	3b30      	subs	r3, #48	@ 0x30
 800151a:	2b09      	cmp	r3, #9
 800151c:	d94b      	bls.n	80015b6 <_vfiprintf_r+0x1a2>
 800151e:	b1b0      	cbz	r0, 800154e <_vfiprintf_r+0x13a>
 8001520:	9207      	str	r2, [sp, #28]
 8001522:	e014      	b.n	800154e <_vfiprintf_r+0x13a>
 8001524:	eba0 0308 	sub.w	r3, r0, r8
 8001528:	fa09 f303 	lsl.w	r3, r9, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	9304      	str	r3, [sp, #16]
 8001530:	46a2      	mov	sl, r4
 8001532:	e7d2      	b.n	80014da <_vfiprintf_r+0xc6>
 8001534:	9b03      	ldr	r3, [sp, #12]
 8001536:	1d19      	adds	r1, r3, #4
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	9103      	str	r1, [sp, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	bfbb      	ittet	lt
 8001540:	425b      	neglt	r3, r3
 8001542:	f042 0202 	orrlt.w	r2, r2, #2
 8001546:	9307      	strge	r3, [sp, #28]
 8001548:	9307      	strlt	r3, [sp, #28]
 800154a:	bfb8      	it	lt
 800154c:	9204      	strlt	r2, [sp, #16]
 800154e:	7823      	ldrb	r3, [r4, #0]
 8001550:	2b2e      	cmp	r3, #46	@ 0x2e
 8001552:	d10a      	bne.n	800156a <_vfiprintf_r+0x156>
 8001554:	7863      	ldrb	r3, [r4, #1]
 8001556:	2b2a      	cmp	r3, #42	@ 0x2a
 8001558:	d132      	bne.n	80015c0 <_vfiprintf_r+0x1ac>
 800155a:	9b03      	ldr	r3, [sp, #12]
 800155c:	1d1a      	adds	r2, r3, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	9203      	str	r2, [sp, #12]
 8001562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001566:	3402      	adds	r4, #2
 8001568:	9305      	str	r3, [sp, #20]
 800156a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001640 <_vfiprintf_r+0x22c>
 800156e:	7821      	ldrb	r1, [r4, #0]
 8001570:	2203      	movs	r2, #3
 8001572:	4650      	mov	r0, sl
 8001574:	f7fe fe2c 	bl	80001d0 <memchr>
 8001578:	b138      	cbz	r0, 800158a <_vfiprintf_r+0x176>
 800157a:	9b04      	ldr	r3, [sp, #16]
 800157c:	eba0 000a 	sub.w	r0, r0, sl
 8001580:	2240      	movs	r2, #64	@ 0x40
 8001582:	4082      	lsls	r2, r0
 8001584:	4313      	orrs	r3, r2
 8001586:	3401      	adds	r4, #1
 8001588:	9304      	str	r3, [sp, #16]
 800158a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800158e:	4829      	ldr	r0, [pc, #164]	@ (8001634 <_vfiprintf_r+0x220>)
 8001590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001594:	2206      	movs	r2, #6
 8001596:	f7fe fe1b 	bl	80001d0 <memchr>
 800159a:	2800      	cmp	r0, #0
 800159c:	d03f      	beq.n	800161e <_vfiprintf_r+0x20a>
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <_vfiprintf_r+0x224>)
 80015a0:	bb1b      	cbnz	r3, 80015ea <_vfiprintf_r+0x1d6>
 80015a2:	9b03      	ldr	r3, [sp, #12]
 80015a4:	3307      	adds	r3, #7
 80015a6:	f023 0307 	bic.w	r3, r3, #7
 80015aa:	3308      	adds	r3, #8
 80015ac:	9303      	str	r3, [sp, #12]
 80015ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015b0:	443b      	add	r3, r7
 80015b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80015b4:	e76a      	b.n	800148c <_vfiprintf_r+0x78>
 80015b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80015ba:	460c      	mov	r4, r1
 80015bc:	2001      	movs	r0, #1
 80015be:	e7a8      	b.n	8001512 <_vfiprintf_r+0xfe>
 80015c0:	2300      	movs	r3, #0
 80015c2:	3401      	adds	r4, #1
 80015c4:	9305      	str	r3, [sp, #20]
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 0c0a 	mov.w	ip, #10
 80015cc:	4620      	mov	r0, r4
 80015ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015d2:	3a30      	subs	r2, #48	@ 0x30
 80015d4:	2a09      	cmp	r2, #9
 80015d6:	d903      	bls.n	80015e0 <_vfiprintf_r+0x1cc>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0c6      	beq.n	800156a <_vfiprintf_r+0x156>
 80015dc:	9105      	str	r1, [sp, #20]
 80015de:	e7c4      	b.n	800156a <_vfiprintf_r+0x156>
 80015e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80015e4:	4604      	mov	r4, r0
 80015e6:	2301      	movs	r3, #1
 80015e8:	e7f0      	b.n	80015cc <_vfiprintf_r+0x1b8>
 80015ea:	ab03      	add	r3, sp, #12
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	462a      	mov	r2, r5
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <_vfiprintf_r+0x228>)
 80015f2:	a904      	add	r1, sp, #16
 80015f4:	4630      	mov	r0, r6
 80015f6:	f3af 8000 	nop.w
 80015fa:	4607      	mov	r7, r0
 80015fc:	1c78      	adds	r0, r7, #1
 80015fe:	d1d6      	bne.n	80015ae <_vfiprintf_r+0x19a>
 8001600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001602:	07d9      	lsls	r1, r3, #31
 8001604:	d405      	bmi.n	8001612 <_vfiprintf_r+0x1fe>
 8001606:	89ab      	ldrh	r3, [r5, #12]
 8001608:	059a      	lsls	r2, r3, #22
 800160a:	d402      	bmi.n	8001612 <_vfiprintf_r+0x1fe>
 800160c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800160e:	f7ff fddd 	bl	80011cc <__retarget_lock_release_recursive>
 8001612:	89ab      	ldrh	r3, [r5, #12]
 8001614:	065b      	lsls	r3, r3, #25
 8001616:	f53f af1f 	bmi.w	8001458 <_vfiprintf_r+0x44>
 800161a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800161c:	e71e      	b.n	800145c <_vfiprintf_r+0x48>
 800161e:	ab03      	add	r3, sp, #12
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	462a      	mov	r2, r5
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <_vfiprintf_r+0x228>)
 8001626:	a904      	add	r1, sp, #16
 8001628:	4630      	mov	r0, r6
 800162a:	f000 f879 	bl	8001720 <_printf_i>
 800162e:	e7e4      	b.n	80015fa <_vfiprintf_r+0x1e6>
 8001630:	0800214c 	.word	0x0800214c
 8001634:	08002156 	.word	0x08002156
 8001638:	00000000 	.word	0x00000000
 800163c:	080013ef 	.word	0x080013ef
 8001640:	08002152 	.word	0x08002152

08001644 <_printf_common>:
 8001644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001648:	4616      	mov	r6, r2
 800164a:	4698      	mov	r8, r3
 800164c:	688a      	ldr	r2, [r1, #8]
 800164e:	690b      	ldr	r3, [r1, #16]
 8001650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001654:	4293      	cmp	r3, r2
 8001656:	bfb8      	it	lt
 8001658:	4613      	movlt	r3, r2
 800165a:	6033      	str	r3, [r6, #0]
 800165c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001660:	4607      	mov	r7, r0
 8001662:	460c      	mov	r4, r1
 8001664:	b10a      	cbz	r2, 800166a <_printf_common+0x26>
 8001666:	3301      	adds	r3, #1
 8001668:	6033      	str	r3, [r6, #0]
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	0699      	lsls	r1, r3, #26
 800166e:	bf42      	ittt	mi
 8001670:	6833      	ldrmi	r3, [r6, #0]
 8001672:	3302      	addmi	r3, #2
 8001674:	6033      	strmi	r3, [r6, #0]
 8001676:	6825      	ldr	r5, [r4, #0]
 8001678:	f015 0506 	ands.w	r5, r5, #6
 800167c:	d106      	bne.n	800168c <_printf_common+0x48>
 800167e:	f104 0a19 	add.w	sl, r4, #25
 8001682:	68e3      	ldr	r3, [r4, #12]
 8001684:	6832      	ldr	r2, [r6, #0]
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	42ab      	cmp	r3, r5
 800168a:	dc26      	bgt.n	80016da <_printf_common+0x96>
 800168c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	3b00      	subs	r3, #0
 8001694:	bf18      	it	ne
 8001696:	2301      	movne	r3, #1
 8001698:	0692      	lsls	r2, r2, #26
 800169a:	d42b      	bmi.n	80016f4 <_printf_common+0xb0>
 800169c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016a0:	4641      	mov	r1, r8
 80016a2:	4638      	mov	r0, r7
 80016a4:	47c8      	blx	r9
 80016a6:	3001      	adds	r0, #1
 80016a8:	d01e      	beq.n	80016e8 <_printf_common+0xa4>
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	6922      	ldr	r2, [r4, #16]
 80016ae:	f003 0306 	and.w	r3, r3, #6
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf02      	ittt	eq
 80016b6:	68e5      	ldreq	r5, [r4, #12]
 80016b8:	6833      	ldreq	r3, [r6, #0]
 80016ba:	1aed      	subeq	r5, r5, r3
 80016bc:	68a3      	ldr	r3, [r4, #8]
 80016be:	bf0c      	ite	eq
 80016c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016c4:	2500      	movne	r5, #0
 80016c6:	4293      	cmp	r3, r2
 80016c8:	bfc4      	itt	gt
 80016ca:	1a9b      	subgt	r3, r3, r2
 80016cc:	18ed      	addgt	r5, r5, r3
 80016ce:	2600      	movs	r6, #0
 80016d0:	341a      	adds	r4, #26
 80016d2:	42b5      	cmp	r5, r6
 80016d4:	d11a      	bne.n	800170c <_printf_common+0xc8>
 80016d6:	2000      	movs	r0, #0
 80016d8:	e008      	b.n	80016ec <_printf_common+0xa8>
 80016da:	2301      	movs	r3, #1
 80016dc:	4652      	mov	r2, sl
 80016de:	4641      	mov	r1, r8
 80016e0:	4638      	mov	r0, r7
 80016e2:	47c8      	blx	r9
 80016e4:	3001      	adds	r0, #1
 80016e6:	d103      	bne.n	80016f0 <_printf_common+0xac>
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016f0:	3501      	adds	r5, #1
 80016f2:	e7c6      	b.n	8001682 <_printf_common+0x3e>
 80016f4:	18e1      	adds	r1, r4, r3
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	2030      	movs	r0, #48	@ 0x30
 80016fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80016fe:	4422      	add	r2, r4
 8001700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001708:	3302      	adds	r3, #2
 800170a:	e7c7      	b.n	800169c <_printf_common+0x58>
 800170c:	2301      	movs	r3, #1
 800170e:	4622      	mov	r2, r4
 8001710:	4641      	mov	r1, r8
 8001712:	4638      	mov	r0, r7
 8001714:	47c8      	blx	r9
 8001716:	3001      	adds	r0, #1
 8001718:	d0e6      	beq.n	80016e8 <_printf_common+0xa4>
 800171a:	3601      	adds	r6, #1
 800171c:	e7d9      	b.n	80016d2 <_printf_common+0x8e>
	...

08001720 <_printf_i>:
 8001720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001724:	7e0f      	ldrb	r7, [r1, #24]
 8001726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001728:	2f78      	cmp	r7, #120	@ 0x78
 800172a:	4691      	mov	r9, r2
 800172c:	4680      	mov	r8, r0
 800172e:	460c      	mov	r4, r1
 8001730:	469a      	mov	sl, r3
 8001732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001736:	d807      	bhi.n	8001748 <_printf_i+0x28>
 8001738:	2f62      	cmp	r7, #98	@ 0x62
 800173a:	d80a      	bhi.n	8001752 <_printf_i+0x32>
 800173c:	2f00      	cmp	r7, #0
 800173e:	f000 80d1 	beq.w	80018e4 <_printf_i+0x1c4>
 8001742:	2f58      	cmp	r7, #88	@ 0x58
 8001744:	f000 80b8 	beq.w	80018b8 <_printf_i+0x198>
 8001748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800174c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001750:	e03a      	b.n	80017c8 <_printf_i+0xa8>
 8001752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001756:	2b15      	cmp	r3, #21
 8001758:	d8f6      	bhi.n	8001748 <_printf_i+0x28>
 800175a:	a101      	add	r1, pc, #4	@ (adr r1, 8001760 <_printf_i+0x40>)
 800175c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001760:	080017b9 	.word	0x080017b9
 8001764:	080017cd 	.word	0x080017cd
 8001768:	08001749 	.word	0x08001749
 800176c:	08001749 	.word	0x08001749
 8001770:	08001749 	.word	0x08001749
 8001774:	08001749 	.word	0x08001749
 8001778:	080017cd 	.word	0x080017cd
 800177c:	08001749 	.word	0x08001749
 8001780:	08001749 	.word	0x08001749
 8001784:	08001749 	.word	0x08001749
 8001788:	08001749 	.word	0x08001749
 800178c:	080018cb 	.word	0x080018cb
 8001790:	080017f7 	.word	0x080017f7
 8001794:	08001885 	.word	0x08001885
 8001798:	08001749 	.word	0x08001749
 800179c:	08001749 	.word	0x08001749
 80017a0:	080018ed 	.word	0x080018ed
 80017a4:	08001749 	.word	0x08001749
 80017a8:	080017f7 	.word	0x080017f7
 80017ac:	08001749 	.word	0x08001749
 80017b0:	08001749 	.word	0x08001749
 80017b4:	0800188d 	.word	0x0800188d
 80017b8:	6833      	ldr	r3, [r6, #0]
 80017ba:	1d1a      	adds	r2, r3, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6032      	str	r2, [r6, #0]
 80017c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017c8:	2301      	movs	r3, #1
 80017ca:	e09c      	b.n	8001906 <_printf_i+0x1e6>
 80017cc:	6833      	ldr	r3, [r6, #0]
 80017ce:	6820      	ldr	r0, [r4, #0]
 80017d0:	1d19      	adds	r1, r3, #4
 80017d2:	6031      	str	r1, [r6, #0]
 80017d4:	0606      	lsls	r6, r0, #24
 80017d6:	d501      	bpl.n	80017dc <_printf_i+0xbc>
 80017d8:	681d      	ldr	r5, [r3, #0]
 80017da:	e003      	b.n	80017e4 <_printf_i+0xc4>
 80017dc:	0645      	lsls	r5, r0, #25
 80017de:	d5fb      	bpl.n	80017d8 <_printf_i+0xb8>
 80017e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017e4:	2d00      	cmp	r5, #0
 80017e6:	da03      	bge.n	80017f0 <_printf_i+0xd0>
 80017e8:	232d      	movs	r3, #45	@ 0x2d
 80017ea:	426d      	negs	r5, r5
 80017ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017f0:	4858      	ldr	r0, [pc, #352]	@ (8001954 <_printf_i+0x234>)
 80017f2:	230a      	movs	r3, #10
 80017f4:	e011      	b.n	800181a <_printf_i+0xfa>
 80017f6:	6821      	ldr	r1, [r4, #0]
 80017f8:	6833      	ldr	r3, [r6, #0]
 80017fa:	0608      	lsls	r0, r1, #24
 80017fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001800:	d402      	bmi.n	8001808 <_printf_i+0xe8>
 8001802:	0649      	lsls	r1, r1, #25
 8001804:	bf48      	it	mi
 8001806:	b2ad      	uxthmi	r5, r5
 8001808:	2f6f      	cmp	r7, #111	@ 0x6f
 800180a:	4852      	ldr	r0, [pc, #328]	@ (8001954 <_printf_i+0x234>)
 800180c:	6033      	str	r3, [r6, #0]
 800180e:	bf14      	ite	ne
 8001810:	230a      	movne	r3, #10
 8001812:	2308      	moveq	r3, #8
 8001814:	2100      	movs	r1, #0
 8001816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800181a:	6866      	ldr	r6, [r4, #4]
 800181c:	60a6      	str	r6, [r4, #8]
 800181e:	2e00      	cmp	r6, #0
 8001820:	db05      	blt.n	800182e <_printf_i+0x10e>
 8001822:	6821      	ldr	r1, [r4, #0]
 8001824:	432e      	orrs	r6, r5
 8001826:	f021 0104 	bic.w	r1, r1, #4
 800182a:	6021      	str	r1, [r4, #0]
 800182c:	d04b      	beq.n	80018c6 <_printf_i+0x1a6>
 800182e:	4616      	mov	r6, r2
 8001830:	fbb5 f1f3 	udiv	r1, r5, r3
 8001834:	fb03 5711 	mls	r7, r3, r1, r5
 8001838:	5dc7      	ldrb	r7, [r0, r7]
 800183a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800183e:	462f      	mov	r7, r5
 8001840:	42bb      	cmp	r3, r7
 8001842:	460d      	mov	r5, r1
 8001844:	d9f4      	bls.n	8001830 <_printf_i+0x110>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d10b      	bne.n	8001862 <_printf_i+0x142>
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	07df      	lsls	r7, r3, #31
 800184e:	d508      	bpl.n	8001862 <_printf_i+0x142>
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	6861      	ldr	r1, [r4, #4]
 8001854:	4299      	cmp	r1, r3
 8001856:	bfde      	ittt	le
 8001858:	2330      	movle	r3, #48	@ 0x30
 800185a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800185e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001862:	1b92      	subs	r2, r2, r6
 8001864:	6122      	str	r2, [r4, #16]
 8001866:	f8cd a000 	str.w	sl, [sp]
 800186a:	464b      	mov	r3, r9
 800186c:	aa03      	add	r2, sp, #12
 800186e:	4621      	mov	r1, r4
 8001870:	4640      	mov	r0, r8
 8001872:	f7ff fee7 	bl	8001644 <_printf_common>
 8001876:	3001      	adds	r0, #1
 8001878:	d14a      	bne.n	8001910 <_printf_i+0x1f0>
 800187a:	f04f 30ff 	mov.w	r0, #4294967295
 800187e:	b004      	add	sp, #16
 8001880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	f043 0320 	orr.w	r3, r3, #32
 800188a:	6023      	str	r3, [r4, #0]
 800188c:	4832      	ldr	r0, [pc, #200]	@ (8001958 <_printf_i+0x238>)
 800188e:	2778      	movs	r7, #120	@ 0x78
 8001890:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	6831      	ldr	r1, [r6, #0]
 8001898:	061f      	lsls	r7, r3, #24
 800189a:	f851 5b04 	ldr.w	r5, [r1], #4
 800189e:	d402      	bmi.n	80018a6 <_printf_i+0x186>
 80018a0:	065f      	lsls	r7, r3, #25
 80018a2:	bf48      	it	mi
 80018a4:	b2ad      	uxthmi	r5, r5
 80018a6:	6031      	str	r1, [r6, #0]
 80018a8:	07d9      	lsls	r1, r3, #31
 80018aa:	bf44      	itt	mi
 80018ac:	f043 0320 	orrmi.w	r3, r3, #32
 80018b0:	6023      	strmi	r3, [r4, #0]
 80018b2:	b11d      	cbz	r5, 80018bc <_printf_i+0x19c>
 80018b4:	2310      	movs	r3, #16
 80018b6:	e7ad      	b.n	8001814 <_printf_i+0xf4>
 80018b8:	4826      	ldr	r0, [pc, #152]	@ (8001954 <_printf_i+0x234>)
 80018ba:	e7e9      	b.n	8001890 <_printf_i+0x170>
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	f023 0320 	bic.w	r3, r3, #32
 80018c2:	6023      	str	r3, [r4, #0]
 80018c4:	e7f6      	b.n	80018b4 <_printf_i+0x194>
 80018c6:	4616      	mov	r6, r2
 80018c8:	e7bd      	b.n	8001846 <_printf_i+0x126>
 80018ca:	6833      	ldr	r3, [r6, #0]
 80018cc:	6825      	ldr	r5, [r4, #0]
 80018ce:	6961      	ldr	r1, [r4, #20]
 80018d0:	1d18      	adds	r0, r3, #4
 80018d2:	6030      	str	r0, [r6, #0]
 80018d4:	062e      	lsls	r6, r5, #24
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	d501      	bpl.n	80018de <_printf_i+0x1be>
 80018da:	6019      	str	r1, [r3, #0]
 80018dc:	e002      	b.n	80018e4 <_printf_i+0x1c4>
 80018de:	0668      	lsls	r0, r5, #25
 80018e0:	d5fb      	bpl.n	80018da <_printf_i+0x1ba>
 80018e2:	8019      	strh	r1, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	6123      	str	r3, [r4, #16]
 80018e8:	4616      	mov	r6, r2
 80018ea:	e7bc      	b.n	8001866 <_printf_i+0x146>
 80018ec:	6833      	ldr	r3, [r6, #0]
 80018ee:	1d1a      	adds	r2, r3, #4
 80018f0:	6032      	str	r2, [r6, #0]
 80018f2:	681e      	ldr	r6, [r3, #0]
 80018f4:	6862      	ldr	r2, [r4, #4]
 80018f6:	2100      	movs	r1, #0
 80018f8:	4630      	mov	r0, r6
 80018fa:	f7fe fc69 	bl	80001d0 <memchr>
 80018fe:	b108      	cbz	r0, 8001904 <_printf_i+0x1e4>
 8001900:	1b80      	subs	r0, r0, r6
 8001902:	6060      	str	r0, [r4, #4]
 8001904:	6863      	ldr	r3, [r4, #4]
 8001906:	6123      	str	r3, [r4, #16]
 8001908:	2300      	movs	r3, #0
 800190a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800190e:	e7aa      	b.n	8001866 <_printf_i+0x146>
 8001910:	6923      	ldr	r3, [r4, #16]
 8001912:	4632      	mov	r2, r6
 8001914:	4649      	mov	r1, r9
 8001916:	4640      	mov	r0, r8
 8001918:	47d0      	blx	sl
 800191a:	3001      	adds	r0, #1
 800191c:	d0ad      	beq.n	800187a <_printf_i+0x15a>
 800191e:	6823      	ldr	r3, [r4, #0]
 8001920:	079b      	lsls	r3, r3, #30
 8001922:	d413      	bmi.n	800194c <_printf_i+0x22c>
 8001924:	68e0      	ldr	r0, [r4, #12]
 8001926:	9b03      	ldr	r3, [sp, #12]
 8001928:	4298      	cmp	r0, r3
 800192a:	bfb8      	it	lt
 800192c:	4618      	movlt	r0, r3
 800192e:	e7a6      	b.n	800187e <_printf_i+0x15e>
 8001930:	2301      	movs	r3, #1
 8001932:	4632      	mov	r2, r6
 8001934:	4649      	mov	r1, r9
 8001936:	4640      	mov	r0, r8
 8001938:	47d0      	blx	sl
 800193a:	3001      	adds	r0, #1
 800193c:	d09d      	beq.n	800187a <_printf_i+0x15a>
 800193e:	3501      	adds	r5, #1
 8001940:	68e3      	ldr	r3, [r4, #12]
 8001942:	9903      	ldr	r1, [sp, #12]
 8001944:	1a5b      	subs	r3, r3, r1
 8001946:	42ab      	cmp	r3, r5
 8001948:	dcf2      	bgt.n	8001930 <_printf_i+0x210>
 800194a:	e7eb      	b.n	8001924 <_printf_i+0x204>
 800194c:	2500      	movs	r5, #0
 800194e:	f104 0619 	add.w	r6, r4, #25
 8001952:	e7f5      	b.n	8001940 <_printf_i+0x220>
 8001954:	0800215d 	.word	0x0800215d
 8001958:	0800216e 	.word	0x0800216e

0800195c <__sflush_r>:
 800195c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001964:	0716      	lsls	r6, r2, #28
 8001966:	4605      	mov	r5, r0
 8001968:	460c      	mov	r4, r1
 800196a:	d454      	bmi.n	8001a16 <__sflush_r+0xba>
 800196c:	684b      	ldr	r3, [r1, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	dc02      	bgt.n	8001978 <__sflush_r+0x1c>
 8001972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	dd48      	ble.n	8001a0a <__sflush_r+0xae>
 8001978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800197a:	2e00      	cmp	r6, #0
 800197c:	d045      	beq.n	8001a0a <__sflush_r+0xae>
 800197e:	2300      	movs	r3, #0
 8001980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001984:	682f      	ldr	r7, [r5, #0]
 8001986:	6a21      	ldr	r1, [r4, #32]
 8001988:	602b      	str	r3, [r5, #0]
 800198a:	d030      	beq.n	80019ee <__sflush_r+0x92>
 800198c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	0759      	lsls	r1, r3, #29
 8001992:	d505      	bpl.n	80019a0 <__sflush_r+0x44>
 8001994:	6863      	ldr	r3, [r4, #4]
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800199a:	b10b      	cbz	r3, 80019a0 <__sflush_r+0x44>
 800199c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800199e:	1ad2      	subs	r2, r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019a4:	6a21      	ldr	r1, [r4, #32]
 80019a6:	4628      	mov	r0, r5
 80019a8:	47b0      	blx	r6
 80019aa:	1c43      	adds	r3, r0, #1
 80019ac:	89a3      	ldrh	r3, [r4, #12]
 80019ae:	d106      	bne.n	80019be <__sflush_r+0x62>
 80019b0:	6829      	ldr	r1, [r5, #0]
 80019b2:	291d      	cmp	r1, #29
 80019b4:	d82b      	bhi.n	8001a0e <__sflush_r+0xb2>
 80019b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <__sflush_r+0x104>)
 80019b8:	40ca      	lsrs	r2, r1
 80019ba:	07d6      	lsls	r6, r2, #31
 80019bc:	d527      	bpl.n	8001a0e <__sflush_r+0xb2>
 80019be:	2200      	movs	r2, #0
 80019c0:	6062      	str	r2, [r4, #4]
 80019c2:	04d9      	lsls	r1, r3, #19
 80019c4:	6922      	ldr	r2, [r4, #16]
 80019c6:	6022      	str	r2, [r4, #0]
 80019c8:	d504      	bpl.n	80019d4 <__sflush_r+0x78>
 80019ca:	1c42      	adds	r2, r0, #1
 80019cc:	d101      	bne.n	80019d2 <__sflush_r+0x76>
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	b903      	cbnz	r3, 80019d4 <__sflush_r+0x78>
 80019d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80019d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019d6:	602f      	str	r7, [r5, #0]
 80019d8:	b1b9      	cbz	r1, 8001a0a <__sflush_r+0xae>
 80019da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019de:	4299      	cmp	r1, r3
 80019e0:	d002      	beq.n	80019e8 <__sflush_r+0x8c>
 80019e2:	4628      	mov	r0, r5
 80019e4:	f7ff fbf4 	bl	80011d0 <_free_r>
 80019e8:	2300      	movs	r3, #0
 80019ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80019ec:	e00d      	b.n	8001a0a <__sflush_r+0xae>
 80019ee:	2301      	movs	r3, #1
 80019f0:	4628      	mov	r0, r5
 80019f2:	47b0      	blx	r6
 80019f4:	4602      	mov	r2, r0
 80019f6:	1c50      	adds	r0, r2, #1
 80019f8:	d1c9      	bne.n	800198e <__sflush_r+0x32>
 80019fa:	682b      	ldr	r3, [r5, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0c6      	beq.n	800198e <__sflush_r+0x32>
 8001a00:	2b1d      	cmp	r3, #29
 8001a02:	d001      	beq.n	8001a08 <__sflush_r+0xac>
 8001a04:	2b16      	cmp	r3, #22
 8001a06:	d11e      	bne.n	8001a46 <__sflush_r+0xea>
 8001a08:	602f      	str	r7, [r5, #0]
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	e022      	b.n	8001a54 <__sflush_r+0xf8>
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	e01b      	b.n	8001a4e <__sflush_r+0xf2>
 8001a16:	690f      	ldr	r7, [r1, #16]
 8001a18:	2f00      	cmp	r7, #0
 8001a1a:	d0f6      	beq.n	8001a0a <__sflush_r+0xae>
 8001a1c:	0793      	lsls	r3, r2, #30
 8001a1e:	680e      	ldr	r6, [r1, #0]
 8001a20:	bf08      	it	eq
 8001a22:	694b      	ldreq	r3, [r1, #20]
 8001a24:	600f      	str	r7, [r1, #0]
 8001a26:	bf18      	it	ne
 8001a28:	2300      	movne	r3, #0
 8001a2a:	eba6 0807 	sub.w	r8, r6, r7
 8001a2e:	608b      	str	r3, [r1, #8]
 8001a30:	f1b8 0f00 	cmp.w	r8, #0
 8001a34:	dde9      	ble.n	8001a0a <__sflush_r+0xae>
 8001a36:	6a21      	ldr	r1, [r4, #32]
 8001a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	463a      	mov	r2, r7
 8001a3e:	4628      	mov	r0, r5
 8001a40:	47b0      	blx	r6
 8001a42:	2800      	cmp	r0, #0
 8001a44:	dc08      	bgt.n	8001a58 <__sflush_r+0xfc>
 8001a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a4e:	81a3      	strh	r3, [r4, #12]
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a58:	4407      	add	r7, r0
 8001a5a:	eba8 0800 	sub.w	r8, r8, r0
 8001a5e:	e7e7      	b.n	8001a30 <__sflush_r+0xd4>
 8001a60:	20400001 	.word	0x20400001

08001a64 <_fflush_r>:
 8001a64:	b538      	push	{r3, r4, r5, lr}
 8001a66:	690b      	ldr	r3, [r1, #16]
 8001a68:	4605      	mov	r5, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	b913      	cbnz	r3, 8001a74 <_fflush_r+0x10>
 8001a6e:	2500      	movs	r5, #0
 8001a70:	4628      	mov	r0, r5
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
 8001a74:	b118      	cbz	r0, 8001a7e <_fflush_r+0x1a>
 8001a76:	6a03      	ldr	r3, [r0, #32]
 8001a78:	b90b      	cbnz	r3, 8001a7e <_fflush_r+0x1a>
 8001a7a:	f7ff f9af 	bl	8000ddc <__sinit>
 8001a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f3      	beq.n	8001a6e <_fflush_r+0xa>
 8001a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a88:	07d0      	lsls	r0, r2, #31
 8001a8a:	d404      	bmi.n	8001a96 <_fflush_r+0x32>
 8001a8c:	0599      	lsls	r1, r3, #22
 8001a8e:	d402      	bmi.n	8001a96 <_fflush_r+0x32>
 8001a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a92:	f7ff fb9a 	bl	80011ca <__retarget_lock_acquire_recursive>
 8001a96:	4628      	mov	r0, r5
 8001a98:	4621      	mov	r1, r4
 8001a9a:	f7ff ff5f 	bl	800195c <__sflush_r>
 8001a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001aa0:	07da      	lsls	r2, r3, #31
 8001aa2:	4605      	mov	r5, r0
 8001aa4:	d4e4      	bmi.n	8001a70 <_fflush_r+0xc>
 8001aa6:	89a3      	ldrh	r3, [r4, #12]
 8001aa8:	059b      	lsls	r3, r3, #22
 8001aaa:	d4e1      	bmi.n	8001a70 <_fflush_r+0xc>
 8001aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001aae:	f7ff fb8d 	bl	80011cc <__retarget_lock_release_recursive>
 8001ab2:	e7dd      	b.n	8001a70 <_fflush_r+0xc>

08001ab4 <__swhatbuf_r>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001abc:	2900      	cmp	r1, #0
 8001abe:	b096      	sub	sp, #88	@ 0x58
 8001ac0:	4615      	mov	r5, r2
 8001ac2:	461e      	mov	r6, r3
 8001ac4:	da0d      	bge.n	8001ae2 <__swhatbuf_r+0x2e>
 8001ac6:	89a3      	ldrh	r3, [r4, #12]
 8001ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	bf14      	ite	ne
 8001ad2:	2340      	movne	r3, #64	@ 0x40
 8001ad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001ad8:	2000      	movs	r0, #0
 8001ada:	6031      	str	r1, [r6, #0]
 8001adc:	602b      	str	r3, [r5, #0]
 8001ade:	b016      	add	sp, #88	@ 0x58
 8001ae0:	bd70      	pop	{r4, r5, r6, pc}
 8001ae2:	466a      	mov	r2, sp
 8001ae4:	f000 f848 	bl	8001b78 <_fstat_r>
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	dbec      	blt.n	8001ac6 <__swhatbuf_r+0x12>
 8001aec:	9901      	ldr	r1, [sp, #4]
 8001aee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001af2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001af6:	4259      	negs	r1, r3
 8001af8:	4159      	adcs	r1, r3
 8001afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001afe:	e7eb      	b.n	8001ad8 <__swhatbuf_r+0x24>

08001b00 <__smakebuf_r>:
 8001b00:	898b      	ldrh	r3, [r1, #12]
 8001b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b04:	079d      	lsls	r5, r3, #30
 8001b06:	4606      	mov	r6, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	d507      	bpl.n	8001b1c <__smakebuf_r+0x1c>
 8001b0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001b10:	6023      	str	r3, [r4, #0]
 8001b12:	6123      	str	r3, [r4, #16]
 8001b14:	2301      	movs	r3, #1
 8001b16:	6163      	str	r3, [r4, #20]
 8001b18:	b003      	add	sp, #12
 8001b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b1c:	ab01      	add	r3, sp, #4
 8001b1e:	466a      	mov	r2, sp
 8001b20:	f7ff ffc8 	bl	8001ab4 <__swhatbuf_r>
 8001b24:	9f00      	ldr	r7, [sp, #0]
 8001b26:	4605      	mov	r5, r0
 8001b28:	4639      	mov	r1, r7
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f7ff fbbc 	bl	80012a8 <_malloc_r>
 8001b30:	b948      	cbnz	r0, 8001b46 <__smakebuf_r+0x46>
 8001b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b36:	059a      	lsls	r2, r3, #22
 8001b38:	d4ee      	bmi.n	8001b18 <__smakebuf_r+0x18>
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	81a3      	strh	r3, [r4, #12]
 8001b44:	e7e2      	b.n	8001b0c <__smakebuf_r+0xc>
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	6020      	str	r0, [r4, #0]
 8001b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b4e:	81a3      	strh	r3, [r4, #12]
 8001b50:	9b01      	ldr	r3, [sp, #4]
 8001b52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001b56:	b15b      	cbz	r3, 8001b70 <__smakebuf_r+0x70>
 8001b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f000 f81d 	bl	8001b9c <_isatty_r>
 8001b62:	b128      	cbz	r0, 8001b70 <__smakebuf_r+0x70>
 8001b64:	89a3      	ldrh	r3, [r4, #12]
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	81a3      	strh	r3, [r4, #12]
 8001b70:	89a3      	ldrh	r3, [r4, #12]
 8001b72:	431d      	orrs	r5, r3
 8001b74:	81a5      	strh	r5, [r4, #12]
 8001b76:	e7cf      	b.n	8001b18 <__smakebuf_r+0x18>

08001b78 <_fstat_r>:
 8001b78:	b538      	push	{r3, r4, r5, lr}
 8001b7a:	4d07      	ldr	r5, [pc, #28]	@ (8001b98 <_fstat_r+0x20>)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	602b      	str	r3, [r5, #0]
 8001b86:	f000 f942 	bl	8001e0e <_fstat>
 8001b8a:	1c43      	adds	r3, r0, #1
 8001b8c:	d102      	bne.n	8001b94 <_fstat_r+0x1c>
 8001b8e:	682b      	ldr	r3, [r5, #0]
 8001b90:	b103      	cbz	r3, 8001b94 <_fstat_r+0x1c>
 8001b92:	6023      	str	r3, [r4, #0]
 8001b94:	bd38      	pop	{r3, r4, r5, pc}
 8001b96:	bf00      	nop
 8001b98:	200001c0 	.word	0x200001c0

08001b9c <_isatty_r>:
 8001b9c:	b538      	push	{r3, r4, r5, lr}
 8001b9e:	4d06      	ldr	r5, [pc, #24]	@ (8001bb8 <_isatty_r+0x1c>)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	602b      	str	r3, [r5, #0]
 8001ba8:	f000 fa96 	bl	80020d8 <_isatty>
 8001bac:	1c43      	adds	r3, r0, #1
 8001bae:	d102      	bne.n	8001bb6 <_isatty_r+0x1a>
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	b103      	cbz	r3, 8001bb6 <_isatty_r+0x1a>
 8001bb4:	6023      	str	r3, [r4, #0]
 8001bb6:	bd38      	pop	{r3, r4, r5, pc}
 8001bb8:	200001c0 	.word	0x200001c0

08001bbc <_sbrk_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4d06      	ldr	r5, [pc, #24]	@ (8001bd8 <_sbrk_r+0x1c>)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	602b      	str	r3, [r5, #0]
 8001bc8:	f7ff f81c 	bl	8000c04 <_sbrk>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d102      	bne.n	8001bd6 <_sbrk_r+0x1a>
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	b103      	cbz	r3, 8001bd6 <_sbrk_r+0x1a>
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
 8001bd8:	200001c0 	.word	0x200001c0

08001bdc <findslot>:
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <findslot+0x2c>)
 8001bde:	b510      	push	{r4, lr}
 8001be0:	4604      	mov	r4, r0
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	b118      	cbz	r0, 8001bee <findslot+0x12>
 8001be6:	6a03      	ldr	r3, [r0, #32]
 8001be8:	b90b      	cbnz	r3, 8001bee <findslot+0x12>
 8001bea:	f7ff f8f7 	bl	8000ddc <__sinit>
 8001bee:	2c13      	cmp	r4, #19
 8001bf0:	d807      	bhi.n	8001c02 <findslot+0x26>
 8001bf2:	4806      	ldr	r0, [pc, #24]	@ (8001c0c <findslot+0x30>)
 8001bf4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001bf8:	3201      	adds	r2, #1
 8001bfa:	d002      	beq.n	8001c02 <findslot+0x26>
 8001bfc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001c00:	bd10      	pop	{r4, pc}
 8001c02:	2000      	movs	r0, #0
 8001c04:	e7fc      	b.n	8001c00 <findslot+0x24>
 8001c06:	bf00      	nop
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	200001dc 	.word	0x200001dc

08001c10 <error>:
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	4604      	mov	r4, r0
 8001c14:	f7ff faae 	bl	8001174 <__errno>
 8001c18:	2613      	movs	r6, #19
 8001c1a:	4605      	mov	r5, r0
 8001c1c:	2700      	movs	r7, #0
 8001c1e:	4630      	mov	r0, r6
 8001c20:	4639      	mov	r1, r7
 8001c22:	beab      	bkpt	0x00ab
 8001c24:	4606      	mov	r6, r0
 8001c26:	602e      	str	r6, [r5, #0]
 8001c28:	4620      	mov	r0, r4
 8001c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c2c <checkerror>:
 8001c2c:	1c43      	adds	r3, r0, #1
 8001c2e:	d101      	bne.n	8001c34 <checkerror+0x8>
 8001c30:	f7ff bfee 	b.w	8001c10 <error>
 8001c34:	4770      	bx	lr

08001c36 <_swiread>:
 8001c36:	b530      	push	{r4, r5, lr}
 8001c38:	b085      	sub	sp, #20
 8001c3a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001c3e:	9203      	str	r2, [sp, #12]
 8001c40:	2406      	movs	r4, #6
 8001c42:	ad01      	add	r5, sp, #4
 8001c44:	4620      	mov	r0, r4
 8001c46:	4629      	mov	r1, r5
 8001c48:	beab      	bkpt	0x00ab
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7ff ffed 	bl	8001c2c <checkerror>
 8001c52:	b005      	add	sp, #20
 8001c54:	bd30      	pop	{r4, r5, pc}

08001c56 <_read>:
 8001c56:	b570      	push	{r4, r5, r6, lr}
 8001c58:	460e      	mov	r6, r1
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	f7ff ffbe 	bl	8001bdc <findslot>
 8001c60:	4605      	mov	r5, r0
 8001c62:	b930      	cbnz	r0, 8001c72 <_read+0x1c>
 8001c64:	f7ff fa86 	bl	8001174 <__errno>
 8001c68:	2309      	movs	r3, #9
 8001c6a:	6003      	str	r3, [r0, #0]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
 8001c72:	6800      	ldr	r0, [r0, #0]
 8001c74:	4622      	mov	r2, r4
 8001c76:	4631      	mov	r1, r6
 8001c78:	f7ff ffdd 	bl	8001c36 <_swiread>
 8001c7c:	1c43      	adds	r3, r0, #1
 8001c7e:	d0f5      	beq.n	8001c6c <_read+0x16>
 8001c80:	686b      	ldr	r3, [r5, #4]
 8001c82:	1a20      	subs	r0, r4, r0
 8001c84:	4403      	add	r3, r0
 8001c86:	606b      	str	r3, [r5, #4]
 8001c88:	e7f2      	b.n	8001c70 <_read+0x1a>

08001c8a <_swilseek>:
 8001c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	4616      	mov	r6, r2
 8001c90:	f7ff ffa4 	bl	8001bdc <findslot>
 8001c94:	4605      	mov	r5, r0
 8001c96:	b940      	cbnz	r0, 8001caa <_swilseek+0x20>
 8001c98:	f7ff fa6c 	bl	8001174 <__errno>
 8001c9c:	2309      	movs	r3, #9
 8001c9e:	6003      	str	r3, [r0, #0]
 8001ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	b003      	add	sp, #12
 8001ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001caa:	2e02      	cmp	r6, #2
 8001cac:	d903      	bls.n	8001cb6 <_swilseek+0x2c>
 8001cae:	f7ff fa61 	bl	8001174 <__errno>
 8001cb2:	2316      	movs	r3, #22
 8001cb4:	e7f3      	b.n	8001c9e <_swilseek+0x14>
 8001cb6:	2e01      	cmp	r6, #1
 8001cb8:	d112      	bne.n	8001ce0 <_swilseek+0x56>
 8001cba:	6843      	ldr	r3, [r0, #4]
 8001cbc:	18e4      	adds	r4, r4, r3
 8001cbe:	d4f6      	bmi.n	8001cae <_swilseek+0x24>
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	260a      	movs	r6, #10
 8001cc4:	e9cd 3400 	strd	r3, r4, [sp]
 8001cc8:	466f      	mov	r7, sp
 8001cca:	4630      	mov	r0, r6
 8001ccc:	4639      	mov	r1, r7
 8001cce:	beab      	bkpt	0x00ab
 8001cd0:	4606      	mov	r6, r0
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f7ff ffaa 	bl	8001c2c <checkerror>
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	dbe1      	blt.n	8001ca0 <_swilseek+0x16>
 8001cdc:	606c      	str	r4, [r5, #4]
 8001cde:	e7e1      	b.n	8001ca4 <_swilseek+0x1a>
 8001ce0:	2e02      	cmp	r6, #2
 8001ce2:	6803      	ldr	r3, [r0, #0]
 8001ce4:	d1ec      	bne.n	8001cc0 <_swilseek+0x36>
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	260c      	movs	r6, #12
 8001cea:	466f      	mov	r7, sp
 8001cec:	4630      	mov	r0, r6
 8001cee:	4639      	mov	r1, r7
 8001cf0:	beab      	bkpt	0x00ab
 8001cf2:	4606      	mov	r6, r0
 8001cf4:	4630      	mov	r0, r6
 8001cf6:	f7ff ff99 	bl	8001c2c <checkerror>
 8001cfa:	1c43      	adds	r3, r0, #1
 8001cfc:	d0d0      	beq.n	8001ca0 <_swilseek+0x16>
 8001cfe:	4404      	add	r4, r0
 8001d00:	e7de      	b.n	8001cc0 <_swilseek+0x36>

08001d02 <_lseek>:
 8001d02:	f7ff bfc2 	b.w	8001c8a <_swilseek>

08001d06 <_swiwrite>:
 8001d06:	b530      	push	{r4, r5, lr}
 8001d08:	b085      	sub	sp, #20
 8001d0a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d0e:	9203      	str	r2, [sp, #12]
 8001d10:	2405      	movs	r4, #5
 8001d12:	ad01      	add	r5, sp, #4
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	beab      	bkpt	0x00ab
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f7ff ff85 	bl	8001c2c <checkerror>
 8001d22:	b005      	add	sp, #20
 8001d24:	bd30      	pop	{r4, r5, pc}

08001d26 <_write>:
 8001d26:	b570      	push	{r4, r5, r6, lr}
 8001d28:	460e      	mov	r6, r1
 8001d2a:	4615      	mov	r5, r2
 8001d2c:	f7ff ff56 	bl	8001bdc <findslot>
 8001d30:	4604      	mov	r4, r0
 8001d32:	b930      	cbnz	r0, 8001d42 <_write+0x1c>
 8001d34:	f7ff fa1e 	bl	8001174 <__errno>
 8001d38:	2309      	movs	r3, #9
 8001d3a:	6003      	str	r3, [r0, #0]
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	bd70      	pop	{r4, r5, r6, pc}
 8001d42:	6800      	ldr	r0, [r0, #0]
 8001d44:	462a      	mov	r2, r5
 8001d46:	4631      	mov	r1, r6
 8001d48:	f7ff ffdd 	bl	8001d06 <_swiwrite>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	dbf5      	blt.n	8001d3c <_write+0x16>
 8001d50:	6862      	ldr	r2, [r4, #4]
 8001d52:	1ae8      	subs	r0, r5, r3
 8001d54:	4402      	add	r2, r0
 8001d56:	42ab      	cmp	r3, r5
 8001d58:	6062      	str	r2, [r4, #4]
 8001d5a:	d1f1      	bne.n	8001d40 <_write+0x1a>
 8001d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff bf55 	b.w	8001c10 <error>

08001d66 <_swiclose>:
 8001d66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d68:	2402      	movs	r4, #2
 8001d6a:	9001      	str	r0, [sp, #4]
 8001d6c:	ad01      	add	r5, sp, #4
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	beab      	bkpt	0x00ab
 8001d74:	4604      	mov	r4, r0
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7ff ff58 	bl	8001c2c <checkerror>
 8001d7c:	b003      	add	sp, #12
 8001d7e:	bd30      	pop	{r4, r5, pc}

08001d80 <_close>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	4605      	mov	r5, r0
 8001d84:	f7ff ff2a 	bl	8001bdc <findslot>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	b930      	cbnz	r0, 8001d9a <_close+0x1a>
 8001d8c:	f7ff f9f2 	bl	8001174 <__errno>
 8001d90:	2309      	movs	r3, #9
 8001d92:	6003      	str	r3, [r0, #0]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	bd38      	pop	{r3, r4, r5, pc}
 8001d9a:	3d01      	subs	r5, #1
 8001d9c:	2d01      	cmp	r5, #1
 8001d9e:	d809      	bhi.n	8001db4 <_close+0x34>
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <_close+0x48>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d104      	bne.n	8001db4 <_close+0x34>
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	6003      	str	r3, [r0, #0]
 8001db0:	2000      	movs	r0, #0
 8001db2:	e7f1      	b.n	8001d98 <_close+0x18>
 8001db4:	6820      	ldr	r0, [r4, #0]
 8001db6:	f7ff ffd6 	bl	8001d66 <_swiclose>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d1ec      	bne.n	8001d98 <_close+0x18>
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	6023      	str	r3, [r4, #0]
 8001dc4:	e7e8      	b.n	8001d98 <_close+0x18>
 8001dc6:	bf00      	nop
 8001dc8:	200001dc 	.word	0x200001dc

08001dcc <_swistat>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	460c      	mov	r4, r1
 8001dd0:	f7ff ff04 	bl	8001bdc <findslot>
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	b930      	cbnz	r0, 8001de6 <_swistat+0x1a>
 8001dd8:	f7ff f9cc 	bl	8001174 <__errno>
 8001ddc:	2309      	movs	r3, #9
 8001dde:	6003      	str	r3, [r0, #0]
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	bd70      	pop	{r4, r5, r6, pc}
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dec:	6063      	str	r3, [r4, #4]
 8001dee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001df2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001df4:	260c      	movs	r6, #12
 8001df6:	4630      	mov	r0, r6
 8001df8:	4629      	mov	r1, r5
 8001dfa:	beab      	bkpt	0x00ab
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	4628      	mov	r0, r5
 8001e00:	f7ff ff14 	bl	8001c2c <checkerror>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d0eb      	beq.n	8001de0 <_swistat+0x14>
 8001e08:	6120      	str	r0, [r4, #16]
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e7ea      	b.n	8001de4 <_swistat+0x18>

08001e0e <_fstat>:
 8001e0e:	460b      	mov	r3, r1
 8001e10:	b510      	push	{r4, lr}
 8001e12:	2100      	movs	r1, #0
 8001e14:	4604      	mov	r4, r0
 8001e16:	2258      	movs	r2, #88	@ 0x58
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff f95d 	bl	80010d8 <memset>
 8001e1e:	4601      	mov	r1, r0
 8001e20:	4620      	mov	r0, r4
 8001e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e26:	f7ff bfd1 	b.w	8001dcc <_swistat>

08001e2a <_stat>:
 8001e2a:	b538      	push	{r3, r4, r5, lr}
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	4604      	mov	r4, r0
 8001e30:	2258      	movs	r2, #88	@ 0x58
 8001e32:	2100      	movs	r1, #0
 8001e34:	4628      	mov	r0, r5
 8001e36:	f7ff f94f 	bl	80010d8 <memset>
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	f000 f811 	bl	8001e64 <_swiopen>
 8001e42:	1c43      	adds	r3, r0, #1
 8001e44:	4604      	mov	r4, r0
 8001e46:	d00b      	beq.n	8001e60 <_stat+0x36>
 8001e48:	686b      	ldr	r3, [r5, #4]
 8001e4a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001e4e:	606b      	str	r3, [r5, #4]
 8001e50:	4629      	mov	r1, r5
 8001e52:	f7ff ffbb 	bl	8001dcc <_swistat>
 8001e56:	4605      	mov	r5, r0
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff ff91 	bl	8001d80 <_close>
 8001e5e:	462c      	mov	r4, r5
 8001e60:	4620      	mov	r0, r4
 8001e62:	bd38      	pop	{r3, r4, r5, pc}

08001e64 <_swiopen>:
 8001e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e68:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8001f14 <_swiopen+0xb0>
 8001e6c:	b096      	sub	sp, #88	@ 0x58
 8001e6e:	4607      	mov	r7, r0
 8001e70:	460e      	mov	r6, r1
 8001e72:	2400      	movs	r4, #0
 8001e74:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8001e7e:	d032      	beq.n	8001ee6 <_swiopen+0x82>
 8001e80:	3401      	adds	r4, #1
 8001e82:	2c14      	cmp	r4, #20
 8001e84:	d1f6      	bne.n	8001e74 <_swiopen+0x10>
 8001e86:	f7ff f975 	bl	8001174 <__errno>
 8001e8a:	2318      	movs	r3, #24
 8001e8c:	e03a      	b.n	8001f04 <_swiopen+0xa0>
 8001e8e:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8001e92:	f240 6301 	movw	r3, #1537	@ 0x601
 8001e96:	07b2      	lsls	r2, r6, #30
 8001e98:	bf48      	it	mi
 8001e9a:	f045 0502 	orrmi.w	r5, r5, #2
 8001e9e:	421e      	tst	r6, r3
 8001ea0:	bf18      	it	ne
 8001ea2:	f045 0504 	orrne.w	r5, r5, #4
 8001ea6:	0733      	lsls	r3, r6, #28
 8001ea8:	bf48      	it	mi
 8001eaa:	f025 0504 	bicmi.w	r5, r5, #4
 8001eae:	4638      	mov	r0, r7
 8001eb0:	bf48      	it	mi
 8001eb2:	f045 0508 	orrmi.w	r5, r5, #8
 8001eb6:	9700      	str	r7, [sp, #0]
 8001eb8:	f7fe f9da 	bl	8000270 <strlen>
 8001ebc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8001ec0:	2501      	movs	r5, #1
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	4651      	mov	r1, sl
 8001ec6:	beab      	bkpt	0x00ab
 8001ec8:	4605      	mov	r5, r0
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	db06      	blt.n	8001edc <_swiopen+0x78>
 8001ece:	44c8      	add	r8, r9
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8001ed6:	f8c8 3004 	str.w	r3, [r8, #4]
 8001eda:	e016      	b.n	8001f0a <_swiopen+0xa6>
 8001edc:	4628      	mov	r0, r5
 8001ede:	f7ff fe97 	bl	8001c10 <error>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	e011      	b.n	8001f0a <_swiopen+0xa6>
 8001ee6:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8001eea:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8001eee:	46ea      	mov	sl, sp
 8001ef0:	d1cd      	bne.n	8001e8e <_swiopen+0x2a>
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	f7ff ff98 	bl	8001e2a <_stat>
 8001efa:	3001      	adds	r0, #1
 8001efc:	d0c7      	beq.n	8001e8e <_swiopen+0x2a>
 8001efe:	f7ff f939 	bl	8001174 <__errno>
 8001f02:	2311      	movs	r3, #17
 8001f04:	6003      	str	r3, [r0, #0]
 8001f06:	f04f 34ff 	mov.w	r4, #4294967295
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	b016      	add	sp, #88	@ 0x58
 8001f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f12:	bf00      	nop
 8001f14:	200001dc 	.word	0x200001dc

08001f18 <_get_semihosting_exts>:
 8001f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f1c:	4606      	mov	r6, r0
 8001f1e:	460f      	mov	r7, r1
 8001f20:	4829      	ldr	r0, [pc, #164]	@ (8001fc8 <_get_semihosting_exts+0xb0>)
 8001f22:	2100      	movs	r1, #0
 8001f24:	4615      	mov	r5, r2
 8001f26:	f7ff ff9d 	bl	8001e64 <_swiopen>
 8001f2a:	462a      	mov	r2, r5
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4630      	mov	r0, r6
 8001f32:	f7ff f8d1 	bl	80010d8 <memset>
 8001f36:	1c63      	adds	r3, r4, #1
 8001f38:	d014      	beq.n	8001f64 <_get_semihosting_exts+0x4c>
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff fe4e 	bl	8001bdc <findslot>
 8001f40:	f04f 080c 	mov.w	r8, #12
 8001f44:	4681      	mov	r9, r0
 8001f46:	4640      	mov	r0, r8
 8001f48:	4649      	mov	r1, r9
 8001f4a:	beab      	bkpt	0x00ab
 8001f4c:	4680      	mov	r8, r0
 8001f4e:	4640      	mov	r0, r8
 8001f50:	f7ff fe6c 	bl	8001c2c <checkerror>
 8001f54:	2803      	cmp	r0, #3
 8001f56:	dd02      	ble.n	8001f5e <_get_semihosting_exts+0x46>
 8001f58:	1ec3      	subs	r3, r0, #3
 8001f5a:	42ab      	cmp	r3, r5
 8001f5c:	dc07      	bgt.n	8001f6e <_get_semihosting_exts+0x56>
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ff0e 	bl	8001d80 <_close>
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	b003      	add	sp, #12
 8001f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f6e:	2204      	movs	r2, #4
 8001f70:	eb0d 0102 	add.w	r1, sp, r2
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff fe6e 	bl	8001c56 <_read>
 8001f7a:	2803      	cmp	r0, #3
 8001f7c:	ddef      	ble.n	8001f5e <_get_semihosting_exts+0x46>
 8001f7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f82:	2b53      	cmp	r3, #83	@ 0x53
 8001f84:	d1eb      	bne.n	8001f5e <_get_semihosting_exts+0x46>
 8001f86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001f8a:	2b48      	cmp	r3, #72	@ 0x48
 8001f8c:	d1e7      	bne.n	8001f5e <_get_semihosting_exts+0x46>
 8001f8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f92:	2b46      	cmp	r3, #70	@ 0x46
 8001f94:	d1e3      	bne.n	8001f5e <_get_semihosting_exts+0x46>
 8001f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f9a:	2b42      	cmp	r3, #66	@ 0x42
 8001f9c:	d1df      	bne.n	8001f5e <_get_semihosting_exts+0x46>
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	4639      	mov	r1, r7
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7ff fe71 	bl	8001c8a <_swilseek>
 8001fa8:	2800      	cmp	r0, #0
 8001faa:	dbd8      	blt.n	8001f5e <_get_semihosting_exts+0x46>
 8001fac:	462a      	mov	r2, r5
 8001fae:	4631      	mov	r1, r6
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff fe50 	bl	8001c56 <_read>
 8001fb6:	4605      	mov	r5, r0
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff fee1 	bl	8001d80 <_close>
 8001fbe:	4628      	mov	r0, r5
 8001fc0:	f7ff fe34 	bl	8001c2c <checkerror>
 8001fc4:	e7d0      	b.n	8001f68 <_get_semihosting_exts+0x50>
 8001fc6:	bf00      	nop
 8001fc8:	0800217f 	.word	0x0800217f

08001fcc <initialise_semihosting_exts>:
 8001fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fce:	4d0a      	ldr	r5, [pc, #40]	@ (8001ff8 <initialise_semihosting_exts+0x2c>)
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ffc <initialise_semihosting_exts+0x30>)
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	a801      	add	r0, sp, #4
 8001fd8:	6029      	str	r1, [r5, #0]
 8001fda:	6022      	str	r2, [r4, #0]
 8001fdc:	f7ff ff9c 	bl	8001f18 <_get_semihosting_exts>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	dd07      	ble.n	8001ff4 <initialise_semihosting_exts+0x28>
 8001fe4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001fe8:	f003 0201 	and.w	r2, r3, #1
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	602a      	str	r2, [r5, #0]
 8001ff2:	6023      	str	r3, [r4, #0]
 8001ff4:	b003      	add	sp, #12
 8001ff6:	bd30      	pop	{r4, r5, pc}
 8001ff8:	20000060 	.word	0x20000060
 8001ffc:	2000005c 	.word	0x2000005c

08002000 <_has_ext_stdout_stderr>:
 8002000:	b510      	push	{r4, lr}
 8002002:	4c04      	ldr	r4, [pc, #16]	@ (8002014 <_has_ext_stdout_stderr+0x14>)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da01      	bge.n	800200e <_has_ext_stdout_stderr+0xe>
 800200a:	f7ff ffdf 	bl	8001fcc <initialise_semihosting_exts>
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	2000005c 	.word	0x2000005c

08002018 <initialise_monitor_handles>:
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201c:	b085      	sub	sp, #20
 800201e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80020d0 <initialise_monitor_handles+0xb8>
 8002022:	f8cd 9004 	str.w	r9, [sp, #4]
 8002026:	2303      	movs	r3, #3
 8002028:	2400      	movs	r4, #0
 800202a:	9303      	str	r3, [sp, #12]
 800202c:	af01      	add	r7, sp, #4
 800202e:	9402      	str	r4, [sp, #8]
 8002030:	2501      	movs	r5, #1
 8002032:	4628      	mov	r0, r5
 8002034:	4639      	mov	r1, r7
 8002036:	beab      	bkpt	0x00ab
 8002038:	4605      	mov	r5, r0
 800203a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80020d4 <initialise_monitor_handles+0xbc>
 800203e:	4623      	mov	r3, r4
 8002040:	4c20      	ldr	r4, [pc, #128]	@ (80020c4 <initialise_monitor_handles+0xac>)
 8002042:	f8c8 5000 	str.w	r5, [r8]
 8002046:	f04f 32ff 	mov.w	r2, #4294967295
 800204a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800204e:	3301      	adds	r3, #1
 8002050:	2b14      	cmp	r3, #20
 8002052:	d1fa      	bne.n	800204a <initialise_monitor_handles+0x32>
 8002054:	f7ff ffd4 	bl	8002000 <_has_ext_stdout_stderr>
 8002058:	4d1b      	ldr	r5, [pc, #108]	@ (80020c8 <initialise_monitor_handles+0xb0>)
 800205a:	b1d0      	cbz	r0, 8002092 <initialise_monitor_handles+0x7a>
 800205c:	f04f 0a03 	mov.w	sl, #3
 8002060:	2304      	movs	r3, #4
 8002062:	f8cd 9004 	str.w	r9, [sp, #4]
 8002066:	2601      	movs	r6, #1
 8002068:	f8cd a00c 	str.w	sl, [sp, #12]
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	4630      	mov	r0, r6
 8002070:	4639      	mov	r1, r7
 8002072:	beab      	bkpt	0x00ab
 8002074:	4683      	mov	fp, r0
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <initialise_monitor_handles+0xb4>)
 8002078:	f8cd 9004 	str.w	r9, [sp, #4]
 800207c:	f8c3 b000 	str.w	fp, [r3]
 8002080:	2308      	movs	r3, #8
 8002082:	f8cd a00c 	str.w	sl, [sp, #12]
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	4630      	mov	r0, r6
 800208a:	4639      	mov	r1, r7
 800208c:	beab      	bkpt	0x00ab
 800208e:	4606      	mov	r6, r0
 8002090:	602e      	str	r6, [r5, #0]
 8002092:	682b      	ldr	r3, [r5, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	bf02      	ittt	eq
 8002098:	4b0c      	ldreq	r3, [pc, #48]	@ (80020cc <initialise_monitor_handles+0xb4>)
 800209a:	681b      	ldreq	r3, [r3, #0]
 800209c:	602b      	streq	r3, [r5, #0]
 800209e:	2600      	movs	r6, #0
 80020a0:	f8d8 3000 	ldr.w	r3, [r8]
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	6066      	str	r6, [r4, #4]
 80020a8:	f7ff ffaa 	bl	8002000 <_has_ext_stdout_stderr>
 80020ac:	b130      	cbz	r0, 80020bc <initialise_monitor_handles+0xa4>
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <initialise_monitor_handles+0xb4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80020b6:	682b      	ldr	r3, [r5, #0]
 80020b8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80020bc:	b005      	add	sp, #20
 80020be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020c2:	bf00      	nop
 80020c4:	200001dc 	.word	0x200001dc
 80020c8:	200001d0 	.word	0x200001d0
 80020cc:	200001d4 	.word	0x200001d4
 80020d0:	08002195 	.word	0x08002195
 80020d4:	200001d8 	.word	0x200001d8

080020d8 <_isatty>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	f7ff fd7f 	bl	8001bdc <findslot>
 80020de:	2409      	movs	r4, #9
 80020e0:	4605      	mov	r5, r0
 80020e2:	b920      	cbnz	r0, 80020ee <_isatty+0x16>
 80020e4:	f7ff f846 	bl	8001174 <__errno>
 80020e8:	6004      	str	r4, [r0, #0]
 80020ea:	2000      	movs	r0, #0
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	beab      	bkpt	0x00ab
 80020f4:	4604      	mov	r4, r0
 80020f6:	2c01      	cmp	r4, #1
 80020f8:	4620      	mov	r0, r4
 80020fa:	d0f7      	beq.n	80020ec <_isatty+0x14>
 80020fc:	f7ff f83a 	bl	8001174 <__errno>
 8002100:	2513      	movs	r5, #19
 8002102:	4604      	mov	r4, r0
 8002104:	2600      	movs	r6, #0
 8002106:	4628      	mov	r0, r5
 8002108:	4631      	mov	r1, r6
 800210a:	beab      	bkpt	0x00ab
 800210c:	4605      	mov	r5, r0
 800210e:	6025      	str	r5, [r4, #0]
 8002110:	e7eb      	b.n	80020ea <_isatty+0x12>
	...

08002114 <_init>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr

08002120 <_fini>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	bf00      	nop
 8002124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002126:	bc08      	pop	{r3}
 8002128:	469e      	mov	lr, r3
 800212a:	4770      	bx	lr
