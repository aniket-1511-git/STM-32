
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fe0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800116c  0800116c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001194  08001194  00003034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001194  08001194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800119c  0800119c  00003034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800119c  0800119c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080011a0  080011a0  000021a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  080011a4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003034  2**0
                  CONTENTS
 10 .bss          00000048  20000034  20000034  00003034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  00003034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001830  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000057d  00000000  00000000  00004894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000158  00000000  00000000  00004e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f8  00000000  00000000  00004f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000016be  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000008b7  00000000  00000000  00006726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004d4  00000000  00000000  00007020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000074f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000034 	.word	0x20000034
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001154 	.word	0x08001154

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000038 	.word	0x20000038
 80001c8:	08001154 	.word	0x08001154

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <USART_PeriClockControl>:
#include"STM32Lxx_USARTx_header.h"


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d136      	bne.n	800025c <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	4a38      	ldr	r2, [pc, #224]	@ (80002d4 <USART_PeriClockControl+0xf8>)
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d106      	bne.n	8000204 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 80001f6:	4b38      	ldr	r3, [pc, #224]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80001f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80001fa:	4a37      	ldr	r2, [pc, #220]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80001fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000200:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000202:	e061      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a35      	ldr	r2, [pc, #212]	@ (80002dc <USART_PeriClockControl+0x100>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d106      	bne.n	800021a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800020c:	4b32      	ldr	r3, [pc, #200]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800020e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000210:	4a31      	ldr	r2, [pc, #196]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000216:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000218:	e056      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4a30      	ldr	r2, [pc, #192]	@ (80002e0 <USART_PeriClockControl+0x104>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000222:	4b2d      	ldr	r3, [pc, #180]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000226:	4a2c      	ldr	r2, [pc, #176]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800022c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800022e:	e04b      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a2c      	ldr	r2, [pc, #176]	@ (80002e4 <USART_PeriClockControl+0x108>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d106      	bne.n	8000246 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000238:	4b27      	ldr	r3, [pc, #156]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800023a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800023c:	4a26      	ldr	r2, [pc, #152]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800023e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000242:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000244:	e040      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	4a27      	ldr	r2, [pc, #156]	@ (80002e8 <USART_PeriClockControl+0x10c>)
 800024a:	4293      	cmp	r3, r2
 800024c:	d13c      	bne.n	80002c8 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 800024e:	4b22      	ldr	r3, [pc, #136]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000252:	4a21      	ldr	r2, [pc, #132]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800025a:	e035      	b.n	80002c8 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <USART_PeriClockControl+0xf8>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d106      	bne.n	8000272 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000264:	4b1c      	ldr	r3, [pc, #112]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000268:	4a1b      	ldr	r2, [pc, #108]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800026a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800026e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000270:	e02a      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4a19      	ldr	r2, [pc, #100]	@ (80002dc <USART_PeriClockControl+0x100>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d106      	bne.n	8000288 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 800027a:	4b17      	ldr	r3, [pc, #92]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 800027c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800027e:	4a16      	ldr	r2, [pc, #88]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000280:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000284:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000286:	e01f      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <USART_PeriClockControl+0x104>)
 800028c:	4293      	cmp	r3, r2
 800028e:	d106      	bne.n	800029e <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 8000290:	4b11      	ldr	r3, [pc, #68]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000294:	4a10      	ldr	r2, [pc, #64]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 8000296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800029a:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800029c:	e014      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <USART_PeriClockControl+0x108>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80002a6:	4b0c      	ldr	r3, [pc, #48]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002aa:	4a0b      	ldr	r2, [pc, #44]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002ac:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80002b0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002b2:	e009      	b.n	80002c8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <USART_PeriClockControl+0x10c>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d105      	bne.n	80002c8 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002c0:	4a05      	ldr	r2, [pc, #20]	@ (80002d8 <USART_PeriClockControl+0xfc>)
 80002c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80002c6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40013800 	.word	0x40013800
 80002d8:	40021000 	.word	0x40021000
 80002dc:	40004400 	.word	0x40004400
 80002e0:	40004800 	.word	0x40004800
 80002e4:	40004c00 	.word	0x40004c00
 80002e8:	40005000 	.word	0x40005000

080002ec <USART_Init>:
}

*/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]

		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff6c 	bl	80001dc <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d104      	bne.n	8000316 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e010      	b.n	8000338 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d104      	bne.n	8000328 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e007      	b.n	8000338 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	791b      	ldrb	r3, [r3, #4]
 800032c:	2b02      	cmp	r3, #2
 800032e:	d103      	bne.n	8000338 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 030c 	orr.w	r3, r3, #12
 8000336:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7b5b      	ldrb	r3, [r3, #13]
 800033c:	031b      	lsls	r3, r3, #12
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b9b      	ldrb	r3, [r3, #14]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d104      	bne.n	8000356 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e00b      	b.n	800036e <USART_Init+0x82>

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	7b9b      	ldrb	r3, [r3, #14]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d107      	bne.n	800036e <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000364:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800036c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	7b1b      	ldrb	r3, [r3, #12]
 800037e:	031b      	lsls	r3, r3, #12
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	4313      	orrs	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68fa      	ldr	r2, [r7, #12]
 800038c:	605a      	str	r2, [r3, #4]

		tempreg=0;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	7bdb      	ldrb	r3, [r3, #15]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d104      	bne.n	80003a4 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e014      	b.n	80003ce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	7bdb      	ldrb	r3, [r3, #15]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d104      	bne.n	80003b6 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e00b      	b.n	80003ce <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	7bdb      	ldrb	r3, [r3, #15]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d107      	bne.n	80003ce <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003c4:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003cc:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	68fa      	ldr	r2, [r7, #12]
 80003d4:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2223      	movs	r2, #35	@ 0x23
 80003dc:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e031      	b.n	800045c <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80003f8:	bf00      	nop
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2180      	movs	r1, #128	@ 0x80
 8000400:	4618      	mov	r0, r3
 8000402:	f000 facc 	bl	800099e <USART_GetFlagStatus>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f6      	beq.n	80003fa <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	7b5b      	ldrb	r3, [r3, #13]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d118      	bne.n	8000446 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	7b9b      	ldrb	r3, [r3, #14]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d106      	bne.n	800043e <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	3301      	adds	r3, #1
 8000434:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	e00b      	b.n	8000456 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	3301      	adds	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	e007      	b.n	8000456 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	781a      	ldrb	r2, [r3, #0]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3301      	adds	r3, #1
 8000454:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	d3c9      	bcc.n	80003f8 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000464:	bf00      	nop
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2140      	movs	r1, #64	@ 0x40
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fa96 	bl	800099e <USART_GetFlagStatus>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f6      	beq.n	8000466 <USART_SendData+0x80>
}
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <USART_ReceiveDataIT>:

	return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000482:	b480      	push	{r7}
 8000484:	b087      	sub	sp, #28
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000494:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000496:	7dfb      	ldrb	r3, [r7, #23]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d014      	beq.n	80004c6 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2201      	movs	r2, #1
 80004ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		(void)pUSARTHandle->pUSARTx->RDR;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24

		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f042 0220 	orr.w	r2, r2, #32
 80004c4:	601a      	str	r2, [r3, #0]

	}

	return rxstate;
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	371c      	adds	r7, #28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <USART_IRQInterruptConfig>:


void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	460a      	mov	r2, r1
 80004de:	71fb      	strb	r3, [r7, #7]
 80004e0:	4613      	mov	r3, r2
 80004e2:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d133      	bne.n	8000552 <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	2b1f      	cmp	r3, #31
 80004ee:	d80a      	bhi.n	8000506 <USART_IRQInterruptConfig+0x32>
		{
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80004f0:	4b35      	ldr	r3, [pc, #212]	@ (80005c8 <USART_IRQInterruptConfig+0xf4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	2101      	movs	r1, #1
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	4611      	mov	r1, r2
 80004fe:	4a32      	ldr	r2, [pc, #200]	@ (80005c8 <USART_IRQInterruptConfig+0xf4>)
 8000500:	430b      	orrs	r3, r1
 8000502:	6013      	str	r3, [r2, #0]
		{
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000504:	e059      	b.n	80005ba <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b1f      	cmp	r3, #31
 800050a:	d90f      	bls.n	800052c <USART_IRQInterruptConfig+0x58>
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000510:	d80c      	bhi.n	800052c <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000512:	4b2e      	ldr	r3, [pc, #184]	@ (80005cc <USART_IRQInterruptConfig+0xf8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	79fa      	ldrb	r2, [r7, #7]
 8000518:	f002 021f 	and.w	r2, r2, #31
 800051c:	2101      	movs	r1, #1
 800051e:	fa01 f202 	lsl.w	r2, r1, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4a29      	ldr	r2, [pc, #164]	@ (80005cc <USART_IRQInterruptConfig+0xf8>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e046      	b.n	80005ba <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000530:	d943      	bls.n	80005ba <USART_IRQInterruptConfig+0xe6>
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b5f      	cmp	r3, #95	@ 0x5f
 8000536:	d840      	bhi.n	80005ba <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000538:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <USART_IRQInterruptConfig+0xfc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	79fa      	ldrb	r2, [r7, #7]
 800053e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a21      	ldr	r2, [pc, #132]	@ (80005d0 <USART_IRQInterruptConfig+0xfc>)
 800054c:	430b      	orrs	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	e033      	b.n	80005ba <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b1f      	cmp	r3, #31
 8000556:	d80a      	bhi.n	800056e <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000558:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <USART_IRQInterruptConfig+0x100>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	79fa      	ldrb	r2, [r7, #7]
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a1b      	ldr	r2, [pc, #108]	@ (80005d4 <USART_IRQInterruptConfig+0x100>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	e025      	b.n	80005ba <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b1f      	cmp	r3, #31
 8000572:	d90f      	bls.n	8000594 <USART_IRQInterruptConfig+0xc0>
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b3f      	cmp	r3, #63	@ 0x3f
 8000578:	d80c      	bhi.n	8000594 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <USART_IRQInterruptConfig+0x104>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	79fa      	ldrb	r2, [r7, #7]
 8000580:	f002 021f 	and.w	r2, r2, #31
 8000584:	2101      	movs	r1, #1
 8000586:	fa01 f202 	lsl.w	r2, r1, r2
 800058a:	4611      	mov	r1, r2
 800058c:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <USART_IRQInterruptConfig+0x104>)
 800058e:	430b      	orrs	r3, r1
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e012      	b.n	80005ba <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b05      	cmp	r3, #5
 8000598:	d90f      	bls.n	80005ba <USART_IRQInterruptConfig+0xe6>
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b5f      	cmp	r3, #95	@ 0x5f
 800059e:	d80c      	bhi.n	80005ba <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <USART_IRQInterruptConfig+0x108>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	79fa      	ldrb	r2, [r7, #7]
 80005a6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	4611      	mov	r1, r2
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <USART_IRQInterruptConfig+0x108>)
 80005b4:	430b      	orrs	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	e7ff      	b.n	80005ba <USART_IRQInterruptConfig+0xe6>
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100
 80005cc:	e000e104 	.word	0xe000e104
 80005d0:	e000e10c 	.word	0xe000e10c
 80005d4:	e000e180 	.word	0xe000e180
 80005d8:	e000e184 	.word	0xe000e184
 80005dc:	e000e18c 	.word	0xe000e18c

080005e0 <USART_IRQHandling>:
	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	uint32_t temp1 , temp2,temp3;
	uint16_t *pdata;

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_TC);  /*TC flag */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005f2:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005fe:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d021      	beq.n	800064a <USART_IRQHandling+0x6a>
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d01e      	beq.n	800064a <USART_IRQHandling+0x6a>
	{
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d119      	bne.n	800064a <USART_IRQHandling+0x6a>
		{
			if(! pUSARTHandle->TxLen )
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d115      	bne.n	800064a <USART_IRQHandling+0x6a>
			{
				pUSARTHandle->pUSARTx->ISR &= ~( 1 << USART_ISR_TC);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	69da      	ldr	r2, [r3, #28]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800062c:	61da      	str	r2, [r3, #28]
				pUSARTHandle->TxBusyState = USART_READY;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
				pUSARTHandle->pTxBuffer = NULL;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
				pUSARTHandle->TxLen = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000642:	2100      	movs	r1, #0
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f000 fcf7 	bl	8001038 <USART_ApplicationEventCallback>
			}
		}
	}
	temp1=0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
	temp2=0;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_TXE);  /*TXE flag */
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065c:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000668:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2 )
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d055      	beq.n	800071c <USART_IRQHandling+0x13c>
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d052      	beq.n	800071c <USART_IRQHandling+0x13c>
	{
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d14d      	bne.n	800071c <USART_IRQHandling+0x13c>
		{
			if(pUSARTHandle->TxLen > 0)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d03d      	beq.n	8000704 <USART_IRQHandling+0x124>
			{
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7b5b      	ldrb	r3, [r3, #13]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d129      	bne.n	80006e4 <USART_IRQHandling+0x104>
				{
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7b9b      	ldrb	r3, [r3, #14]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10f      	bne.n	80006ce <USART_IRQHandling+0xee>
					{
						pUSARTHandle->pTxBuffer++;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	691b      	ldr	r3, [r3, #16]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	1e9a      	subs	r2, r3, #2
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	619a      	str	r2, [r3, #24]
 80006cc:	e01a      	b.n	8000704 <USART_IRQHandling+0x124>
					}
					else
					{
						pUSARTHandle->pTxBuffer++;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	1e5a      	subs	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	619a      	str	r2, [r3, #24]
 80006e2:	e00f      	b.n	8000704 <USART_IRQHandling+0x124>
					}
				}
				else
				{
					pUSARTHandle->pUSARTx->TDR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
					pUSARTHandle->pTxBuffer++;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d107      	bne.n	800071c <USART_IRQHandling+0x13c>
			{
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800071a:	601a      	str	r2, [r3, #0]
			}
		}
	}
	temp1=0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
		temp2=0;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_RXNE);  /* RXNE flag*/
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0320 	and.w	r3, r3, #32
 800072e:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f003 0320 	and.w	r3, r3, #32
 800073a:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2 )
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d073      	beq.n	800082a <USART_IRQHandling+0x24a>
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d070      	beq.n	800082a <USART_IRQHandling+0x24a>
	{
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800074e:	2b01      	cmp	r3, #1
 8000750:	d16b      	bne.n	800082a <USART_IRQHandling+0x24a>
		{
			if(pUSARTHandle->RxLen > 0)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d053      	beq.n	8000802 <USART_IRQHandling+0x222>
			{
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7b5b      	ldrb	r3, [r3, #13]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d12f      	bne.n	80007c2 <USART_IRQHandling+0x1e2>
				{
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7b9b      	ldrb	r3, [r3, #14]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d119      	bne.n	800079e <USART_IRQHandling+0x1be>
					{
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->RDR  & (uint16_t)0x01FF);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000770:	b29a      	uxth	r2, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800077a:	b292      	uxth	r2, r2
 800077c:	801a      	strh	r2, [r3, #0]
						pUSARTHandle->pRxBuffer++;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	1e9a      	subs	r2, r3, #2
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	61da      	str	r2, [r3, #28]
 800079c:	e031      	b.n	8000802 <USART_IRQHandling+0x222>
					}
					else
					{
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	1e5a      	subs	r2, r3, #1
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	61da      	str	r2, [r3, #28]
 80007c0:	e01f      	b.n	8000802 <USART_IRQHandling+0x222>
					}
				}
				else
				{
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7b9b      	ldrb	r3, [r3, #14]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d107      	bne.n	80007da <USART_IRQHandling+0x1fa>
					{
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0xFF);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e009      	b.n	80007ee <USART_IRQHandling+0x20e>
					}
					else
					{
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->RDR  & (uint8_t)0x7F);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	701a      	strb	r2, [r3, #0]
					}
					pUSARTHandle->pRxBuffer++;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	1e5a      	subs	r2, r3, #1
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	61da      	str	r2, [r3, #28]
				}
			}

			if(! pUSARTHandle->RxLen)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10f      	bne.n	800082a <USART_IRQHandling+0x24a>
			{
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f022 0220 	bic.w	r2, r2, #32
 8000818:	601a      	str	r2, [r3, #0]
				pUSARTHandle->RxBusyState = USART_READY;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8000822:	2101      	movs	r1, #1
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 fc07 	bl	8001038 <USART_ApplicationEventCallback>
			}
		}
	}
	temp1=0;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
		temp2=0;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_CTS);  /*CTS flag  not for UART4 and UART5*/
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800083c:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000848:	613b      	str	r3, [r7, #16]
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000854:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 &&temp3)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d011      	beq.n	8000880 <USART_IRQHandling+0x2a0>
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00e      	beq.n	8000880 <USART_IRQHandling+0x2a0>
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00b      	beq.n	8000880 <USART_IRQHandling+0x2a0>
	{
		pUSARTHandle->pUSARTx->ISR &=  ~( 1 << USART_ISR_CTS);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	69da      	ldr	r2, [r3, #28]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000876:	61da      	str	r2, [r3, #28]
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8000878:	2103      	movs	r1, #3
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 fbdc 	bl	8001038 <USART_ApplicationEventCallback>
	}
	temp1=0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
		temp2=0;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
		temp3=0;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]

	temp1 = pUSARTHandle->pUSARTx->ISR & ( 1 << USART_ISR_IDLE);     /*IDLE detection flag */
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 0310 	and.w	r3, r3, #16
 8000896:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f003 0310 	and.w	r3, r3, #16
 80008a2:	613b      	str	r3, [r7, #16]
	if(temp1 && temp2)
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00f      	beq.n	80008ca <USART_IRQHandling+0x2ea>
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00c      	beq.n	80008ca <USART_IRQHandling+0x2ea>
	{
		temp1 = pUSARTHandle->pUSARTx->ISR &= ~( 1 << USART_ISR_IDLE);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	f023 0310 	bic.w	r3, r3, #16
 80008be:	61d3      	str	r3, [r2, #28]
 80008c0:	617b      	str	r3, [r7, #20]
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 80008c2:	2102      	movs	r1, #2
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fbb7 	bl	8001038 <USART_ApplicationEventCallback>
	}
	temp1=0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
		temp2=0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]

	temp1 = pUSARTHandle->pUSARTx->ISR & USART_ISR_ORE;		/*Overrun detection flag */
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	f003 0303 	and.w	r3, r3, #3
 80008dc:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0305 	and.w	r3, r3, #5
 80008e8:	613b      	str	r3, [r7, #16]
	if(temp1  && temp2 )
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d006      	beq.n	80008fe <USART_IRQHandling+0x31e>
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <USART_IRQHandling+0x31e>
	{
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80008f6:	2107      	movs	r1, #7
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 fb9d 	bl	8001038 <USART_ApplicationEventCallback>
	}
	temp1=0;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
		temp2=0;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;	/*Error Flag */
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	613b      	str	r3, [r7, #16]
	if(temp2 )
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d01e      	beq.n	8000956 <USART_IRQHandling+0x376>
	{
		temp1 = pUSARTHandle->pUSARTx->ISR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_ISR_FE))
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <USART_IRQHandling+0x352>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 800092a:	2105      	movs	r1, #5
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fb83 	bl	8001038 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_ISR_NF) )
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <USART_IRQHandling+0x364>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 800093c:	2106      	movs	r1, #6
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fb7a 	bl	8001038 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_ISR_ORE) )
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	2b00      	cmp	r3, #0
 800094c:	d003      	beq.n	8000956 <USART_IRQHandling+0x376>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800094e:	2107      	movs	r1, #7
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fb71 	bl	8001038 <USART_ApplicationEventCallback>
		}
	}
	temp1=0;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
		temp2=0;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]

}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <USART_PeripheralControl>:



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d106      	bne.n	8000986 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f043 0201 	orr.w	r2, r3, #1
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 8000984:	e005      	b.n	8000992 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f023 0201 	bic.w	r2, r3, #1
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 800099e:	b480      	push	{r7}
 80009a0:	b083      	sub	sp, #12
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69da      	ldr	r2, [r3, #28]
 80009ae:	78fb      	ldrb	r3, [r7, #3]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <USART_GetFlagStatus+0x1c>
	{
		return SET;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d157      	bne.n	8000a8a <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009e0:	d106      	bne.n	80009f0 <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 80009e2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a59      	ldr	r2, [pc, #356]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 80009ee:	e0a6      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a57      	ldr	r2, [pc, #348]	@ (8000b50 <GPIO_PeriClockControl+0x188>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d106      	bne.n	8000a06 <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 80009f8:	4b54      	ldr	r3, [pc, #336]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a53      	ldr	r2, [pc, #332]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a04:	e09b      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a52      	ldr	r2, [pc, #328]	@ (8000b54 <GPIO_PeriClockControl+0x18c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 8000a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a4e      	ldr	r2, [pc, #312]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a1a:	e090      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a4e      	ldr	r2, [pc, #312]	@ (8000b58 <GPIO_PeriClockControl+0x190>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d106      	bne.n	8000a32 <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 8000a24:	4b49      	ldr	r3, [pc, #292]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a28:	4a48      	ldr	r2, [pc, #288]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a30:	e085      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a49      	ldr	r2, [pc, #292]	@ (8000b5c <GPIO_PeriClockControl+0x194>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 8000a3a:	4b44      	ldr	r3, [pc, #272]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a43      	ldr	r2, [pc, #268]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a40:	f043 0310 	orr.w	r3, r3, #16
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a46:	e07a      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a45      	ldr	r2, [pc, #276]	@ (8000b60 <GPIO_PeriClockControl+0x198>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d106      	bne.n	8000a5e <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 8000a50:	4b3e      	ldr	r3, [pc, #248]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a3d      	ldr	r2, [pc, #244]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a5c:	e06f      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a40      	ldr	r2, [pc, #256]	@ (8000b64 <GPIO_PeriClockControl+0x19c>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d106      	bne.n	8000a74 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 8000a66:	4b39      	ldr	r3, [pc, #228]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6a:	4a38      	ldr	r2, [pc, #224]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a72:	e064      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a3c      	ldr	r2, [pc, #240]	@ (8000b68 <GPIO_PeriClockControl+0x1a0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d160      	bne.n	8000b3e <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 8000a7c:	4b33      	ldr	r3, [pc, #204]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a80:	4a32      	ldr	r2, [pc, #200]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a88:	e059      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d156      	bne.n	8000b3e <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a96:	d106      	bne.n	8000aa6 <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000aa4:	e04b      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a29      	ldr	r2, [pc, #164]	@ (8000b50 <GPIO_PeriClockControl+0x188>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d106      	bne.n	8000abc <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a26      	ldr	r2, [pc, #152]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000ab4:	f023 0302 	bic.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000aba:	e040      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a25      	ldr	r2, [pc, #148]	@ (8000b54 <GPIO_PeriClockControl+0x18c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000aca:	f023 0304 	bic.w	r3, r3, #4
 8000ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000ad0:	e035      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a20      	ldr	r2, [pc, #128]	@ (8000b58 <GPIO_PeriClockControl+0x190>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d106      	bne.n	8000ae8 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000ae0:	f023 0308 	bic.w	r3, r3, #8
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000ae6:	e02a      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <GPIO_PeriClockControl+0x194>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 8000af0:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a15      	ldr	r2, [pc, #84]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000af6:	f023 0310 	bic.w	r3, r3, #16
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000afc:	e01f      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <GPIO_PeriClockControl+0x198>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000b0c:	f023 0320 	bic.w	r3, r3, #32
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b12:	e014      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <GPIO_PeriClockControl+0x19c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b20:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b28:	e009      	b.n	8000b3e <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <GPIO_PeriClockControl+0x1a0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d105      	bne.n	8000b3e <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <GPIO_PeriClockControl+0x184>)
 8000b38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	48000400 	.word	0x48000400
 8000b54:	48000800 	.word	0x48000800
 8000b58:	48000c00 	.word	0x48000c00
 8000b5c:	48001000 	.word	0x48001000
 8000b60:	48001400 	.word	0x48001400
 8000b64:	48001800 	.word	0x48001800
 8000b68:	48001c00 	.word	0x48001c00

08000b6c <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff22 	bl	80009c8 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	795b      	ldrb	r3, [r3, #5]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d822      	bhi.n	8000bd2 <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	795b      	ldrb	r3, [r3, #5]
 8000b90:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b9c:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2103      	movs	r1, #3
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	6819      	ldr	r1, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	e0e1      	b.n	8000d96 <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	795b      	ldrb	r3, [r3, #5]
 8000bd6:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000be2:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	400a      	ands	r2, r1
 8000c00:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6819      	ldr	r1, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	795b      	ldrb	r3, [r3, #5]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d117      	bne.n	8000c4e <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c1e:	4b47      	ldr	r3, [pc, #284]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	7912      	ldrb	r2, [r2, #4]
 8000c26:	4611      	mov	r1, r2
 8000c28:	2201      	movs	r2, #1
 8000c2a:	408a      	lsls	r2, r1
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4a43      	ldr	r2, [pc, #268]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c30:	430b      	orrs	r3, r1
 8000c32:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c34:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	7912      	ldrb	r2, [r2, #4]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	2201      	movs	r2, #1
 8000c40:	408a      	lsls	r2, r1
 8000c42:	43d2      	mvns	r2, r2
 8000c44:	4611      	mov	r1, r2
 8000c46:	4a3d      	ldr	r2, [pc, #244]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c48:	400b      	ands	r3, r1
 8000c4a:	6093      	str	r3, [r2, #8]
 8000c4c:	e035      	b.n	8000cba <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	795b      	ldrb	r3, [r3, #5]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d117      	bne.n	8000c86 <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c56:	4b39      	ldr	r3, [pc, #228]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	7912      	ldrb	r2, [r2, #4]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	2201      	movs	r2, #1
 8000c62:	408a      	lsls	r2, r1
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a35      	ldr	r2, [pc, #212]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c6c:	4b33      	ldr	r3, [pc, #204]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	7912      	ldrb	r2, [r2, #4]
 8000c74:	4611      	mov	r1, r2
 8000c76:	2201      	movs	r2, #1
 8000c78:	408a      	lsls	r2, r1
 8000c7a:	43d2      	mvns	r2, r2
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c80:	400b      	ands	r3, r1
 8000c82:	60d3      	str	r3, [r2, #12]
 8000c84:	e019      	b.n	8000cba <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	795b      	ldrb	r3, [r3, #5]
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d115      	bne.n	8000cba <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	7912      	ldrb	r2, [r2, #4]
 8000c96:	4611      	mov	r1, r2
 8000c98:	2201      	movs	r2, #1
 8000c9a:	408a      	lsls	r2, r1
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4a27      	ldr	r2, [pc, #156]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000ca4:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	7912      	ldrb	r2, [r2, #4]
 8000cac:	4611      	mov	r1, r2
 8000cae:	2201      	movs	r2, #1
 8000cb0:	408a      	lsls	r2, r1
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4a21      	ldr	r2, [pc, #132]	@ (8000d3c <GPIO_Init+0x1d0>)
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cd4:	d042      	beq.n	8000d5c <GPIO_Init+0x1f0>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a19      	ldr	r2, [pc, #100]	@ (8000d40 <GPIO_Init+0x1d4>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d02b      	beq.n	8000d38 <GPIO_Init+0x1cc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <GPIO_Init+0x1d8>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d024      	beq.n	8000d34 <GPIO_Init+0x1c8>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a16      	ldr	r2, [pc, #88]	@ (8000d48 <GPIO_Init+0x1dc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d01d      	beq.n	8000d30 <GPIO_Init+0x1c4>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <GPIO_Init+0x1e0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d016      	beq.n	8000d2c <GPIO_Init+0x1c0>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <GPIO_Init+0x1e4>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d00f      	beq.n	8000d28 <GPIO_Init+0x1bc>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a11      	ldr	r2, [pc, #68]	@ (8000d54 <GPIO_Init+0x1e8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d008      	beq.n	8000d24 <GPIO_Init+0x1b8>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a10      	ldr	r2, [pc, #64]	@ (8000d58 <GPIO_Init+0x1ec>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <GPIO_Init+0x1b4>
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	e01e      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d20:	2300      	movs	r3, #0
 8000d22:	e01c      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d24:	2306      	movs	r3, #6
 8000d26:	e01a      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d28:	2305      	movs	r3, #5
 8000d2a:	e018      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e016      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d30:	2303      	movs	r3, #3
 8000d32:	e014      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e012      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e010      	b.n	8000d5e <GPIO_Init+0x1f2>
 8000d3c:	40010400 	.word	0x40010400
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	48001400 	.word	0x48001400
 8000d54:	48001800 	.word	0x48001800
 8000d58:	48001c00 	.word	0x48001c00
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000d60:	4b5d      	ldr	r3, [pc, #372]	@ (8000ed8 <GPIO_Init+0x36c>)
 8000d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d64:	4a5c      	ldr	r2, [pc, #368]	@ (8000ed8 <GPIO_Init+0x36c>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000d6c:	7c7a      	ldrb	r2, [r7, #17]
 8000d6e:	7cbb      	ldrb	r3, [r7, #18]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	fa02 f103 	lsl.w	r1, r2, r3
 8000d76:	4a59      	ldr	r2, [pc, #356]	@ (8000edc <GPIO_Init+0x370>)
 8000d78:	7cfb      	ldrb	r3, [r7, #19]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000d80:	4b57      	ldr	r3, [pc, #348]	@ (8000ee0 <GPIO_Init+0x374>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	7912      	ldrb	r2, [r2, #4]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	408a      	lsls	r2, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4a53      	ldr	r2, [pc, #332]	@ (8000ee0 <GPIO_Init+0x374>)
 8000d92:	430b      	orrs	r3, r1
 8000d94:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	791b      	ldrb	r3, [r3, #4]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000daa:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	791b      	ldrb	r3, [r3, #4]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2103      	movs	r1, #3
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	400a      	ands	r2, r1
 8000dc8:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6899      	ldr	r1, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	79db      	ldrb	r3, [r3, #7]
 8000de2:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000dee:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68d9      	ldr	r1, [r3, #12]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a1b      	ldrb	r3, [r3, #8]
 8000e26:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	791b      	ldrb	r3, [r3, #4]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000e30:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	791b      	ldrb	r3, [r3, #4]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	2301      	movs	r3, #1
 8000e40:	408b      	lsls	r3, r1
 8000e42:	43db      	mvns	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	400a      	ands	r2, r1
 8000e4c:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6859      	ldr	r1, [r3, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	795b      	ldrb	r3, [r3, #5]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d132      	bne.n	8000ed0 <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	791b      	ldrb	r3, [r3, #4]
 8000e6e:	08db      	lsrs	r3, r3, #3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	3208      	adds	r2, #8
 8000e86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	210f      	movs	r1, #15
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4011      	ands	r1, r2
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	3208      	adds	r2, #8
 8000eae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7a5b      	ldrb	r3, [r3, #9]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4311      	orrs	r1, r2
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <delay>:

USART_Handle_t usart2_handle;


void delay(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
    for(uint32_t i = 0 ; i < 250000 ; i++);
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	e002      	b.n	8000ef6 <delay+0x12>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <delay+0x28>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d9f8      	bls.n	8000ef0 <delay+0xc>
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	0003d08f 	.word	0x0003d08f

08000f10 <USART2_Init>:


void USART2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <USART2_Init+0x3c>)
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <USART2_Init+0x40>)
 8000f18:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <USART2_Init+0x3c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f20:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <USART2_Init+0x3c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <USART2_Init+0x3c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <USART2_Init+0x3c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <USART2_Init+0x3c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <USART2_Init+0x3c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 8000f40:	4802      	ldr	r0, [pc, #8]	@ (8000f4c <USART2_Init+0x3c>)
 8000f42:	f7ff f9d3 	bl	80002ec <USART_Init>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000058 	.word	0x20000058
 8000f50:	40004400 	.word	0x40004400

08000f54 <USART2_GPIOInit>:


void USART2_GPIOInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 f8ca 	bl	80010fa <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000f66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f6a:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000f70:	2300      	movs	r3, #0
 8000f72:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f74:	2301      	movs	r3, #1
 8000f76:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	737b      	strb	r3, [r7, #13]

    // TX pin (PA2)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000f80:	2302      	movs	r3, #2
 8000f82:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN(); // enable clock for GPIOA
 8000f84:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <USART2_GPIOInit+0x58>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <USART2_GPIOInit+0x58>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fdea 	bl	8000b6c <GPIO_Init>

    // RX pin (PA3)
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fde4 	bl	8000b6c <GPIO_Init>
}
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000

08000fb0 <main>:

int main(void)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0


    USART2_GPIOInit();
 8000fb6:	f7ff ffcd 	bl	8000f54 <USART2_GPIOInit>
    USART2_Init();
 8000fba:	f7ff ffa9 	bl	8000f10 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2, ENABLE);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2026      	movs	r0, #38	@ 0x26
 8000fc2:	f7ff fa87 	bl	80004d4 <USART_IRQInterruptConfig>
    USART_PeripheralControl(USART2, ENABLE);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <main+0x60>)
 8000fca:	f7ff fccc 	bl	8000966 <USART_PeripheralControl>
    USART_SendData(&usart2_handle, msg, strlen((char*)msg));
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <main+0x64>)
 8000fd0:	f7ff f8fc 	bl	80001cc <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	490e      	ldr	r1, [pc, #56]	@ (8001014 <main+0x64>)
 8000fda:	480f      	ldr	r0, [pc, #60]	@ (8001018 <main+0x68>)
 8000fdc:	f7ff fa03 	bl	80003e6 <USART_SendData>
    uint8_t msg[] = "ENTER CHAR:\r\n";
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <main+0x6c>)
 8000fe2:	463c      	mov	r4, r7
 8000fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fe6:	c407      	stmia	r4!, {r0, r1, r2}
 8000fe8:	8023      	strh	r3, [r4, #0]
    USART_SendData(&usart2_handle, msg, strlen((char*)msg));
 8000fea:	463b      	mov	r3, r7
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f8ed 	bl	80001cc <strlen>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	@ (8001018 <main+0x68>)
 8000ffa:	f7ff f9f4 	bl	80003e6 <USART_SendData>
    delay();
 8000ffe:	f7ff ff71 	bl	8000ee4 <delay>
    USART_ReceiveDataIT(&usart2_handle, rxData, 5);
 8001002:	2205      	movs	r2, #5
 8001004:	4906      	ldr	r1, [pc, #24]	@ (8001020 <main+0x70>)
 8001006:	4804      	ldr	r0, [pc, #16]	@ (8001018 <main+0x68>)
 8001008:	f7ff fa3b 	bl	8000482 <USART_ReceiveDataIT>

    while(1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <main+0x5c>
 8001010:	40004400 	.word	0x40004400
 8001014:	20000000 	.word	0x20000000
 8001018:	20000058 	.word	0x20000058
 800101c:	0800116c 	.word	0x0800116c
 8001020:	20000050 	.word	0x20000050

08001024 <USART2_IRQHandler>:
    {
    }
}
void USART2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    USART_IRQHandling(&usart2_handle);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <USART2_IRQHandler+0x10>)
 800102a:	f7ff fad9 	bl	80005e0 <USART_IRQHandling>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000058 	.word	0x20000058

08001038 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle, uint8_t ApEv)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
    if (ApEv == USART_EVENT_RX_CMPLT)
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d122      	bne.n	8001090 <USART_ApplicationEventCallback+0x58>
    {
        char msg[] = "Interrupt Trigger\r\n";
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <USART_ApplicationEventCallback+0x60>)
 800104c:	f107 040c 	add.w	r4, r7, #12
 8001050:	461d      	mov	r5, r3
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	6023      	str	r3, [r4, #0]
        USART_SendData(pUSARTHandle, (uint8_t*)msg, strlen(msg));
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f8b4 	bl	80001cc <strlen>
 8001064:	4602      	mov	r2, r0
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff f9ba 	bl	80003e6 <USART_SendData>
        USART_ReceiveDataIT(pUSARTHandle, rxData, 5);
 8001072:	2205      	movs	r2, #5
 8001074:	4909      	ldr	r1, [pc, #36]	@ (800109c <USART_ApplicationEventCallback+0x64>)
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fa03 	bl	8000482 <USART_ReceiveDataIT>
        USART_SendData(&usart2_handle, rxData, 5);
 800107c:	2205      	movs	r2, #5
 800107e:	4907      	ldr	r1, [pc, #28]	@ (800109c <USART_ApplicationEventCallback+0x64>)
 8001080:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <USART_ApplicationEventCallback+0x68>)
 8001082:	f7ff f9b0 	bl	80003e6 <USART_SendData>
        USART_SendData(pUSARTHandle, (uint8_t*)"\r\n", 2);
 8001086:	2202      	movs	r2, #2
 8001088:	4906      	ldr	r1, [pc, #24]	@ (80010a4 <USART_ApplicationEventCallback+0x6c>)
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff f9ab 	bl	80003e6 <USART_SendData>
    }
}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bdb0      	pop	{r4, r5, r7, pc}
 8001098:	08001180 	.word	0x08001180
 800109c:	20000050 	.word	0x20000050
 80010a0:	20000058 	.word	0x20000058
 80010a4:	0800117c 	.word	0x0800117c

080010a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a8:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LoopForever+0xe>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	@ (80010f4 <LoopForever+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010d6:	f000 f819 	bl	800110c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80010da:	f7ff ff69 	bl	8000fb0 <main>

080010de <LoopForever>:

LoopForever:
  b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   r0, =_estack
 80010e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80010ec:	080011a4 	.word	0x080011a4
  ldr r2, =_sbss
 80010f0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80010f4:	2000007c 	.word	0x2000007c

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>

080010fa <memset>:
 80010fa:	4402      	add	r2, r0
 80010fc:	4603      	mov	r3, r0
 80010fe:	4293      	cmp	r3, r2
 8001100:	d100      	bne.n	8001104 <memset+0xa>
 8001102:	4770      	bx	lr
 8001104:	f803 1b01 	strb.w	r1, [r3], #1
 8001108:	e7f9      	b.n	80010fe <memset+0x4>
	...

0800110c <__libc_init_array>:
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	4d0d      	ldr	r5, [pc, #52]	@ (8001144 <__libc_init_array+0x38>)
 8001110:	4c0d      	ldr	r4, [pc, #52]	@ (8001148 <__libc_init_array+0x3c>)
 8001112:	1b64      	subs	r4, r4, r5
 8001114:	10a4      	asrs	r4, r4, #2
 8001116:	2600      	movs	r6, #0
 8001118:	42a6      	cmp	r6, r4
 800111a:	d109      	bne.n	8001130 <__libc_init_array+0x24>
 800111c:	4d0b      	ldr	r5, [pc, #44]	@ (800114c <__libc_init_array+0x40>)
 800111e:	4c0c      	ldr	r4, [pc, #48]	@ (8001150 <__libc_init_array+0x44>)
 8001120:	f000 f818 	bl	8001154 <_init>
 8001124:	1b64      	subs	r4, r4, r5
 8001126:	10a4      	asrs	r4, r4, #2
 8001128:	2600      	movs	r6, #0
 800112a:	42a6      	cmp	r6, r4
 800112c:	d105      	bne.n	800113a <__libc_init_array+0x2e>
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	f855 3b04 	ldr.w	r3, [r5], #4
 8001134:	4798      	blx	r3
 8001136:	3601      	adds	r6, #1
 8001138:	e7ee      	b.n	8001118 <__libc_init_array+0xc>
 800113a:	f855 3b04 	ldr.w	r3, [r5], #4
 800113e:	4798      	blx	r3
 8001140:	3601      	adds	r6, #1
 8001142:	e7f2      	b.n	800112a <__libc_init_array+0x1e>
 8001144:	0800119c 	.word	0x0800119c
 8001148:	0800119c 	.word	0x0800119c
 800114c:	0800119c 	.word	0x0800119c
 8001150:	080011a0 	.word	0x080011a0

08001154 <_init>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	bf00      	nop
 8001158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115a:	bc08      	pop	{r3}
 800115c:	469e      	mov	lr, r3
 800115e:	4770      	bx	lr

08001160 <_fini>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	bf00      	nop
 8001164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001166:	bc08      	pop	{r3}
 8001168:	469e      	mov	lr, r3
 800116a:	4770      	bx	lr
