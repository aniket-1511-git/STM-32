
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001734  08001734  00002734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001778  08001778  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001778  08001778  00002778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001780  08001780  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001780  08001780  00002780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001784  08001784  00002784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001788  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          0000018c  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00003050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001fcf  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000756  00000000  00000000  0000504f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  000057a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000125  00000000  00000000  00005948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d56  00000000  00000000  00005a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000a86  00000000  00000000  000077c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00008249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a98  00000000  00000000  0000828c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00008d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800171c 	.word	0x0800171c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	0800171c 	.word	0x0800171c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ADC_init>:
*********************************************************************************************************************/


/************************************************ end of Function Definitions ****************************************/
void ADC_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	GPIOA_PCLK_EN();
 8000284:	4b3e      	ldr	r3, [pc, #248]	@ (8000380 <ADC_init+0x100>)
 8000286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000288:	4a3d      	ldr	r2, [pc, #244]	@ (8000380 <ADC_init+0x100>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000290:	4b3b      	ldr	r3, [pc, #236]	@ (8000380 <ADC_init+0x100>)
 8000292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000294:	4a3a      	ldr	r2, [pc, #232]	@ (8000380 <ADC_init+0x100>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800029a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOA->MODER |= (3U <<(0*2));
 800029c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a6:	f043 0303 	orr.w	r3, r3, #3
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3U <<(0*2));
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002b6:	f023 0303 	bic.w	r3, r3, #3
 80002ba:	60d3      	str	r3, [r2, #12]
	GPIOA->ASCR  |= (1U <<(0));
 80002bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002c2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

	ADCOM->CCR &=~ ADC_CCR_CKMODE;
 80002cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000384 <ADC_init+0x104>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a2c      	ldr	r2, [pc, #176]	@ (8000384 <ADC_init+0x104>)
 80002d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80002d6:	6093      	str	r3, [r2, #8]
	ADCOM->CCR |= ADC_CCR_CKMODE_DIV1;
 80002d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000384 <ADC_init+0x104>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a29      	ldr	r2, [pc, #164]	@ (8000384 <ADC_init+0x104>)
 80002de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002e2:	6093      	str	r3, [r2, #8]

	ADC1->CR &=~ ADC_CR_DEEPPWD;
 80002e4:	4b28      	ldr	r3, [pc, #160]	@ (8000388 <ADC_init+0x108>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a27      	ldr	r2, [pc, #156]	@ (8000388 <ADC_init+0x108>)
 80002ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80002ee:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN;
 80002f0:	4b25      	ldr	r3, [pc, #148]	@ (8000388 <ADC_init+0x108>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a24      	ldr	r2, [pc, #144]	@ (8000388 <ADC_init+0x108>)
 80002f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002fa:	6093      	str	r3, [r2, #8]

	ADC_delay();
 80002fc:	f000 f86a 	bl	80003d4 <ADC_delay>

	ADC1->CR |= ADC_CR_ADCAL;
 8000300:	4b21      	ldr	r3, [pc, #132]	@ (8000388 <ADC_init+0x108>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a20      	ldr	r2, [pc, #128]	@ (8000388 <ADC_init+0x108>)
 8000306:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800030a:	6093      	str	r3, [r2, #8]
	while(ADC1->CR & ADC_CR_ADCAL);
 800030c:	bf00      	nop
 800030e:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <ADC_init+0x108>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	2b00      	cmp	r3, #0
 8000314:	dbfb      	blt.n	800030e <ADC_init+0x8e>

	ADC1->SMPR1 &=~(0x7U <<(5*3));
 8000316:	4b1c      	ldr	r3, [pc, #112]	@ (8000388 <ADC_init+0x108>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a1b      	ldr	r2, [pc, #108]	@ (8000388 <ADC_init+0x108>)
 800031c:	f423 3360 	bic.w	r3, r3, #229376	@ 0x38000
 8000320:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |=(0x2U <<(5*3));
 8000322:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <ADC_init+0x108>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <ADC_init+0x108>)
 8000328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800032c:	6153      	str	r3, [r2, #20]

	ADC1->SQR1 &=~(ADC_SQR1_L);
 800032e:	4b16      	ldr	r3, [pc, #88]	@ (8000388 <ADC_init+0x108>)
 8000330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000332:	4a15      	ldr	r2, [pc, #84]	@ (8000388 <ADC_init+0x108>)
 8000334:	f023 030f 	bic.w	r3, r3, #15
 8000338:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 &=~(0x1FU << 6U);
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <ADC_init+0x108>)
 800033c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800033e:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <ADC_init+0x108>)
 8000340:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8000344:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR1 |= (5U<<6U);
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <ADC_init+0x108>)
 8000348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800034a:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <ADC_init+0x108>)
 800034c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8000350:	62d3      	str	r3, [r2, #44]	@ 0x2c

	ADC1->ISR |= ADC_ISR_ADRDY;
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <ADC_init+0x108>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a0c      	ldr	r2, [pc, #48]	@ (8000388 <ADC_init+0x108>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6013      	str	r3, [r2, #0]
	ADC1->CR  |=(ADC_CR_ADEN);
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <ADC_init+0x108>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <ADC_init+0x108>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR &ADC_ISR_ADRDY));
 800036a:	bf00      	nop
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <ADC_init+0x108>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	2b00      	cmp	r3, #0
 8000376:	d0f9      	beq.n	800036c <ADC_init+0xec>

}
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	50040300 	.word	0x50040300
 8000388:	50040000 	.word	0x50040000

0800038c <ADC_startConvertion>:
void ADC_startConvertion(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	ADC1->CR |= (1<<2);
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <ADC_startConvertion+0x1c>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <ADC_startConvertion+0x1c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6093      	str	r3, [r2, #8]
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	50040000 	.word	0x50040000

080003ac <ADC_read>:
uint16_t ADC_read(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	while(!(ADC1->ISR & ADC_ISR_EOC));
 80003b0:	bf00      	nop
 80003b2:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <ADC_read+0x24>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f003 0304 	and.w	r3, r3, #4
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d0f9      	beq.n	80003b2 <ADC_read+0x6>

	return (uint16_t)ADC1->DR;
 80003be:	4b04      	ldr	r3, [pc, #16]	@ (80003d0 <ADC_read+0x24>)
 80003c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003c2:	b29b      	uxth	r3, r3
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	50040000 	.word	0x50040000

080003d4 <ADC_delay>:

void ADC_delay(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	for (volatile int i = 0; i < 1000; i++);
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e002      	b.n	80003e6 <ADC_delay+0x12>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80003ec:	dbf8      	blt.n	80003e0 <ADC_delay+0xc>
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <USART_PeriClockControl>:
#include"STM32Lxx_USARTx_header.h"


void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d136      	bne.n	800047c <USART_PeriClockControl+0x80>
	{
		if(pUSARTx == USART1)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a38      	ldr	r2, [pc, #224]	@ (80004f4 <USART_PeriClockControl+0xf8>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000416:	4b38      	ldr	r3, [pc, #224]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800041a:	4a37      	ldr	r2, [pc, #220]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 800041c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000420:	6613      	str	r3, [r2, #96]	@ 0x60
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
	}
}
 8000422:	e061      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a35      	ldr	r2, [pc, #212]	@ (80004fc <USART_PeriClockControl+0x100>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800042c:	4b32      	ldr	r3, [pc, #200]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 800042e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000430:	4a31      	ldr	r2, [pc, #196]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000436:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000438:	e056      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a30      	ldr	r2, [pc, #192]	@ (8000500 <USART_PeriClockControl+0x104>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000442:	4b2d      	ldr	r3, [pc, #180]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000446:	4a2c      	ldr	r2, [pc, #176]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800044c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800044e:	e04b      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a2c      	ldr	r2, [pc, #176]	@ (8000504 <USART_PeriClockControl+0x108>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000458:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 800045a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800045c:	4a26      	ldr	r2, [pc, #152]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 800045e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000462:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000464:	e040      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a27      	ldr	r2, [pc, #156]	@ (8000508 <USART_PeriClockControl+0x10c>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d13c      	bne.n	80004e8 <USART_PeriClockControl+0xec>
			UART5_PCLK_EN();
 800046e:	4b22      	ldr	r3, [pc, #136]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000472:	4a21      	ldr	r2, [pc, #132]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000478:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800047a:	e035      	b.n	80004e8 <USART_PeriClockControl+0xec>
		if(pUSARTx == USART1)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a1d      	ldr	r2, [pc, #116]	@ (80004f4 <USART_PeriClockControl+0xf8>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <USART_PeriClockControl+0x96>
			USART1_PCLK_DI();
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 8000486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000488:	4a1b      	ldr	r2, [pc, #108]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 800048a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800048e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000490:	e02a      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART2)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a19      	ldr	r2, [pc, #100]	@ (80004fc <USART_PeriClockControl+0x100>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <USART_PeriClockControl+0xac>
			USART2_PCLK_DI();
 800049a:	4b17      	ldr	r3, [pc, #92]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 800049c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049e:	4a16      	ldr	r2, [pc, #88]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80004a4:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80004a6:	e01f      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == USART3)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a15      	ldr	r2, [pc, #84]	@ (8000500 <USART_PeriClockControl+0x104>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <USART_PeriClockControl+0xc2>
			USART3_PCLK_DI();
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b4:	4a10      	ldr	r2, [pc, #64]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80004ba:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80004bc:	e014      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART4)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a10      	ldr	r2, [pc, #64]	@ (8000504 <USART_PeriClockControl+0x108>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <USART_PeriClockControl+0xd8>
			UART4_PCLK_DI();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004ca:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004cc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80004d0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80004d2:	e009      	b.n	80004e8 <USART_PeriClockControl+0xec>
		else if(pUSARTx == UART5)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000508 <USART_PeriClockControl+0x10c>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d105      	bne.n	80004e8 <USART_PeriClockControl+0xec>
			UART5_PCLK_DI();
 80004dc:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e0:	4a05      	ldr	r2, [pc, #20]	@ (80004f8 <USART_PeriClockControl+0xfc>)
 80004e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80004e6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40013800 	.word	0x40013800
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40004400 	.word	0x40004400
 8000500:	40004800 	.word	0x40004800
 8000504:	40004c00 	.word	0x40004c00
 8000508:	40005000 	.word	0x40005000

0800050c <USART_Init>:
}

*/

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
		uint32_t tempreg=0;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]

		 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2101      	movs	r1, #1
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff ff6c 	bl	80003fc <USART_PeriClockControl>

		if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d104      	bne.n	8000536 <USART_Init+0x2a>
		{
			tempreg|= (1 << USART_CR1_RE);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e010      	b.n	8000558 <USART_Init+0x4c>
		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d104      	bne.n	8000548 <USART_Init+0x3c>
		{
			tempreg |= ( 1 << USART_CR1_TE );
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f043 0308 	orr.w	r3, r3, #8
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e007      	b.n	8000558 <USART_Init+0x4c>

		}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d103      	bne.n	8000558 <USART_Init+0x4c>
		{
			tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f043 030c 	orr.w	r3, r3, #12
 8000556:	60fb      	str	r3, [r7, #12]
		}

		tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7b5b      	ldrb	r3, [r3, #13]
 800055c:	031b      	lsls	r3, r3, #12
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	4313      	orrs	r3, r2
 8000562:	60fb      	str	r3, [r7, #12]

		if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	7b9b      	ldrb	r3, [r3, #14]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d104      	bne.n	8000576 <USART_Init+0x6a>
		{
			tempreg |= ( 1 << USART_CR1_PCE);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e00b      	b.n	800058e <USART_Init+0x82>

		}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7b9b      	ldrb	r3, [r3, #14]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d107      	bne.n	800058e <USART_Init+0x82>
		{
		    tempreg |= ( 1 << USART_CR1_PCE);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000584:	60fb      	str	r3, [r7, #12]
		    tempreg |= ( 1 << USART_CR1_PS);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800058c:	60fb      	str	r3, [r7, #12]
		}


		pUSARTHandle->pUSARTx->CR1 = tempreg;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	601a      	str	r2, [r3, #0]
		tempreg=0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
		tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7b1b      	ldrb	r3, [r3, #12]
 800059e:	031b      	lsls	r3, r3, #12
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	60fb      	str	r3, [r7, #12]
		pUSARTHandle->pUSARTx->CR2 = tempreg;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	605a      	str	r2, [r3, #4]

		tempreg=0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]


		if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7bdb      	ldrb	r3, [r3, #15]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d104      	bne.n	80005c4 <USART_Init+0xb8>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	e014      	b.n	80005ee <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7bdb      	ldrb	r3, [r3, #15]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d104      	bne.n	80005d6 <USART_Init+0xca>
		{
			tempreg |= ( 1 << USART_CR3_RTSE);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	e00b      	b.n	80005ee <USART_Init+0xe2>
		}
		else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7bdb      	ldrb	r3, [r3, #15]
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d107      	bne.n	80005ee <USART_Init+0xe2>
		{
			tempreg |= ( 1 << USART_CR3_CTSE);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e4:	60fb      	str	r3, [r7, #12]
			tempreg |= ( 1 << USART_CR3_RTSE);
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005ec:	60fb      	str	r3, [r7, #12]
		}

		pUSARTHandle->pUSARTx->CR3 = tempreg;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	609a      	str	r2, [r3, #8]
		pUSARTHandle->pUSARTx->BRR=0X23;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2223      	movs	r2, #35	@ 0x23
 80005fc:	60da      	str	r2, [r3, #12]
	//	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b086      	sub	sp, #24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e031      	b.n	800067c <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000618:	bf00      	nop
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2180      	movs	r1, #128	@ 0x80
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f85a 	bl	80006da <USART_GetFlagStatus>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0f6      	beq.n	800061a <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	7b5b      	ldrb	r3, [r3, #13]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d118      	bne.n	8000666 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000646:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	7b9b      	ldrb	r3, [r3, #14]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d106      	bne.n	800065e <USART_SendData+0x58>
			{
				pTxBuffer++;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	3301      	adds	r3, #1
 8000654:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	3301      	adds	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	e00b      	b.n	8000676 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3301      	adds	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	e007      	b.n	8000676 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	3301      	adds	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	429a      	cmp	r2, r3
 8000682:	d3c9      	bcc.n	8000618 <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000684:	bf00      	nop
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2140      	movs	r1, #64	@ 0x40
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f824 	bl	80006da <USART_GetFlagStatus>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f6      	beq.n	8000686 <USART_SendData+0x80>
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <USART_PeripheralControl>:
}



void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b083      	sub	sp, #12
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d106      	bne.n	80006c2 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |=(1<<USART_CR1_UE);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f043 0201 	orr.w	r2, r3, #1
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	601a      	str	r2, [r3, #0]
	}else{
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
	}
}
 80006c0:	e005      	b.n	80006ce <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &=~(1<<USART_CR1_UE);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f023 0201 	bic.w	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	460b      	mov	r3, r1
 80006e4:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	69da      	ldr	r2, [r3, #28]
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	4013      	ands	r3, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e000      	b.n	80006f8 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d157      	bne.n	80007c6 <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800071c:	d106      	bne.n	800072c <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 800071e:	4b5a      	ldr	r3, [pc, #360]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a59      	ldr	r2, [pc, #356]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 800072a:	e0a6      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a57      	ldr	r2, [pc, #348]	@ (800088c <GPIO_PeriClockControl+0x188>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 8000734:	4b54      	ldr	r3, [pc, #336]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000738:	4a53      	ldr	r2, [pc, #332]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000740:	e09b      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a52      	ldr	r2, [pc, #328]	@ (8000890 <GPIO_PeriClockControl+0x18c>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 800074a:	4b4f      	ldr	r3, [pc, #316]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a4e      	ldr	r2, [pc, #312]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000756:	e090      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a4e      	ldr	r2, [pc, #312]	@ (8000894 <GPIO_PeriClockControl+0x190>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 8000760:	4b49      	ldr	r3, [pc, #292]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000764:	4a48      	ldr	r2, [pc, #288]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800076c:	e085      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a49      	ldr	r2, [pc, #292]	@ (8000898 <GPIO_PeriClockControl+0x194>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a43      	ldr	r2, [pc, #268]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000782:	e07a      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a45      	ldr	r2, [pc, #276]	@ (800089c <GPIO_PeriClockControl+0x198>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 800078c:	4b3e      	ldr	r3, [pc, #248]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000790:	4a3d      	ldr	r2, [pc, #244]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000798:	e06f      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a40      	ldr	r2, [pc, #256]	@ (80008a0 <GPIO_PeriClockControl+0x19c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d106      	bne.n	80007b0 <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	4a38      	ldr	r2, [pc, #224]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007ae:	e064      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a3c      	ldr	r2, [pc, #240]	@ (80008a4 <GPIO_PeriClockControl+0x1a0>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d160      	bne.n	800087a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 80007b8:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	4a32      	ldr	r2, [pc, #200]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007c4:	e059      	b.n	800087a <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d156      	bne.n	800087a <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80007d2:	d106      	bne.n	80007e2 <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 80007d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d8:	4a2b      	ldr	r2, [pc, #172]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007e0:	e04b      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a29      	ldr	r2, [pc, #164]	@ (800088c <GPIO_PeriClockControl+0x188>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d106      	bne.n	80007f8 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a26      	ldr	r2, [pc, #152]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 80007f0:	f023 0302 	bic.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80007f6:	e040      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a25      	ldr	r2, [pc, #148]	@ (8000890 <GPIO_PeriClockControl+0x18c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d106      	bne.n	800080e <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 8000800:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000804:	4a20      	ldr	r2, [pc, #128]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000806:	f023 0304 	bic.w	r3, r3, #4
 800080a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800080c:	e035      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4a20      	ldr	r2, [pc, #128]	@ (8000894 <GPIO_PeriClockControl+0x190>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d106      	bne.n	8000824 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a1b      	ldr	r2, [pc, #108]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800081c:	f023 0308 	bic.w	r3, r3, #8
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000822:	e02a      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <GPIO_PeriClockControl+0x194>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d106      	bne.n	800083a <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000832:	f023 0310 	bic.w	r3, r3, #16
 8000836:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000838:	e01f      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a17      	ldr	r2, [pc, #92]	@ (800089c <GPIO_PeriClockControl+0x198>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	4a10      	ldr	r2, [pc, #64]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000848:	f023 0320 	bic.w	r3, r3, #32
 800084c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800084e:	e014      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <GPIO_PeriClockControl+0x19c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000858:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 800085e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000864:	e009      	b.n	800087a <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <GPIO_PeriClockControl+0x1a0>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d105      	bne.n	800087a <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a05      	ldr	r2, [pc, #20]	@ (8000888 <GPIO_PeriClockControl+0x184>)
 8000874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40021000 	.word	0x40021000
 800088c:	48000400 	.word	0x48000400
 8000890:	48000800 	.word	0x48000800
 8000894:	48000c00 	.word	0x48000c00
 8000898:	48001000 	.word	0x48001000
 800089c:	48001400 	.word	0x48001400
 80008a0:	48001800 	.word	0x48001800
 80008a4:	48001c00 	.word	0x48001c00

080008a8 <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff22 	bl	8000704 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d822      	bhi.n	800090e <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80008d8:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2103      	movs	r1, #3
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	400a      	ands	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6819      	ldr	r1, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e0e1      	b.n	8000ad2 <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 800091e:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	791b      	ldrb	r3, [r3, #4]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2103      	movs	r1, #3
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	400a      	ands	r2, r1
 800093c:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6819      	ldr	r1, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	430a      	orrs	r2, r1
 800094c:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d117      	bne.n	800098a <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800095a:	4b47      	ldr	r3, [pc, #284]	@ (8000a78 <GPIO_Init+0x1d0>)
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	7912      	ldrb	r2, [r2, #4]
 8000962:	4611      	mov	r1, r2
 8000964:	2201      	movs	r2, #1
 8000966:	408a      	lsls	r2, r1
 8000968:	4611      	mov	r1, r2
 800096a:	4a43      	ldr	r2, [pc, #268]	@ (8000a78 <GPIO_Init+0x1d0>)
 800096c:	430b      	orrs	r3, r1
 800096e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000970:	4b41      	ldr	r3, [pc, #260]	@ (8000a78 <GPIO_Init+0x1d0>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7912      	ldrb	r2, [r2, #4]
 8000978:	4611      	mov	r1, r2
 800097a:	2201      	movs	r2, #1
 800097c:	408a      	lsls	r2, r1
 800097e:	43d2      	mvns	r2, r2
 8000980:	4611      	mov	r1, r2
 8000982:	4a3d      	ldr	r2, [pc, #244]	@ (8000a78 <GPIO_Init+0x1d0>)
 8000984:	400b      	ands	r3, r1
 8000986:	6093      	str	r3, [r2, #8]
 8000988:	e035      	b.n	80009f6 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	795b      	ldrb	r3, [r3, #5]
 800098e:	2b05      	cmp	r3, #5
 8000990:	d117      	bne.n	80009c2 <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000992:	4b39      	ldr	r3, [pc, #228]	@ (8000a78 <GPIO_Init+0x1d0>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	7912      	ldrb	r2, [r2, #4]
 800099a:	4611      	mov	r1, r2
 800099c:	2201      	movs	r2, #1
 800099e:	408a      	lsls	r2, r1
 80009a0:	4611      	mov	r1, r2
 80009a2:	4a35      	ldr	r2, [pc, #212]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009a4:	430b      	orrs	r3, r1
 80009a6:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80009a8:	4b33      	ldr	r3, [pc, #204]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	7912      	ldrb	r2, [r2, #4]
 80009b0:	4611      	mov	r1, r2
 80009b2:	2201      	movs	r2, #1
 80009b4:	408a      	lsls	r2, r1
 80009b6:	43d2      	mvns	r2, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009bc:	400b      	ands	r3, r1
 80009be:	60d3      	str	r3, [r2, #12]
 80009c0:	e019      	b.n	80009f6 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	795b      	ldrb	r3, [r3, #5]
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d115      	bne.n	80009f6 <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80009ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	7912      	ldrb	r2, [r2, #4]
 80009d2:	4611      	mov	r1, r2
 80009d4:	2201      	movs	r2, #1
 80009d6:	408a      	lsls	r2, r1
 80009d8:	4611      	mov	r1, r2
 80009da:	4a27      	ldr	r2, [pc, #156]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009dc:	430b      	orrs	r3, r1
 80009de:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80009e0:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	7912      	ldrb	r2, [r2, #4]
 80009e8:	4611      	mov	r1, r2
 80009ea:	2201      	movs	r2, #1
 80009ec:	408a      	lsls	r2, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <GPIO_Init+0x1d0>)
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a10:	d042      	beq.n	8000a98 <GPIO_Init+0x1f0>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a19      	ldr	r2, [pc, #100]	@ (8000a7c <GPIO_Init+0x1d4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d02b      	beq.n	8000a74 <GPIO_Init+0x1cc>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a17      	ldr	r2, [pc, #92]	@ (8000a80 <GPIO_Init+0x1d8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d024      	beq.n	8000a70 <GPIO_Init+0x1c8>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <GPIO_Init+0x1dc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d01d      	beq.n	8000a6c <GPIO_Init+0x1c4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <GPIO_Init+0x1e0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d016      	beq.n	8000a68 <GPIO_Init+0x1c0>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <GPIO_Init+0x1e4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d00f      	beq.n	8000a64 <GPIO_Init+0x1bc>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <GPIO_Init+0x1e8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d008      	beq.n	8000a60 <GPIO_Init+0x1b8>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <GPIO_Init+0x1ec>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <GPIO_Init+0x1b4>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e01e      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e01c      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a60:	2306      	movs	r3, #6
 8000a62:	e01a      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a64:	2305      	movs	r3, #5
 8000a66:	e018      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e016      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e014      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e012      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e010      	b.n	8000a9a <GPIO_Init+0x1f2>
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	48000800 	.word	0x48000800
 8000a84:	48000c00 	.word	0x48000c00
 8000a88:	48001000 	.word	0x48001000
 8000a8c:	48001400 	.word	0x48001400
 8000a90:	48001800 	.word	0x48001800
 8000a94:	48001c00 	.word	0x48001c00
 8000a98:	2300      	movs	r3, #0
 8000a9a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a9c:	4b5d      	ldr	r3, [pc, #372]	@ (8000c14 <GPIO_Init+0x36c>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa0:	4a5c      	ldr	r2, [pc, #368]	@ (8000c14 <GPIO_Init+0x36c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000aa8:	7c7a      	ldrb	r2, [r7, #17]
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	fa02 f103 	lsl.w	r1, r2, r3
 8000ab2:	4a59      	ldr	r2, [pc, #356]	@ (8000c18 <GPIO_Init+0x370>)
 8000ab4:	7cfb      	ldrb	r3, [r7, #19]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000abc:	4b57      	ldr	r3, [pc, #348]	@ (8000c1c <GPIO_Init+0x374>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	687a      	ldr	r2, [r7, #4]
 8000ac2:	7912      	ldrb	r2, [r2, #4]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	408a      	lsls	r2, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a53      	ldr	r2, [pc, #332]	@ (8000c1c <GPIO_Init+0x374>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	799b      	ldrb	r3, [r3, #6]
 8000ada:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	791b      	ldrb	r3, [r3, #4]
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000ae6:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	791b      	ldrb	r3, [r3, #4]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2103      	movs	r1, #3
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4619      	mov	r1, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	400a      	ands	r2, r1
 8000b04:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6899      	ldr	r1, [r3, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	430a      	orrs	r2, r1
 8000b14:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	79db      	ldrb	r3, [r3, #7]
 8000b1e:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000b2a:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2103      	movs	r1, #3
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	4619      	mov	r1, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	400a      	ands	r2, r1
 8000b48:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68d9      	ldr	r1, [r3, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7a1b      	ldrb	r3, [r3, #8]
 8000b62:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	791b      	ldrb	r3, [r3, #4]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000b6c:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	408b      	lsls	r3, r1
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	4619      	mov	r1, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	400a      	ands	r2, r1
 8000b88:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6859      	ldr	r1, [r3, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	430a      	orrs	r2, r1
 8000b98:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	795b      	ldrb	r3, [r3, #5]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d132      	bne.n	8000c0c <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	791b      	ldrb	r3, [r3, #4]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	210f      	movs	r1, #15
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4011      	ands	r1, r2
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	3208      	adds	r2, #8
 8000bea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7a5b      	ldrb	r3, [r3, #9]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4311      	orrs	r1, r2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	3208      	adds	r2, #8
 8000c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	40010400 	.word	0x40010400

08000c20 <USART2_GPIOInits>:
void delay(void)
{
    for(uint32_t i = 0 ; i < 250000 ; i++);
}
void USART2_GPIOInits(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
    GPIO_Handle_t usart2_gpio;
    memset(&usart2_gpio,0,sizeof(usart2_gpio));
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	220c      	movs	r2, #12
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f9a5 	bl	8000f7c <memset>

    usart2_gpio.pGPIOx = GPIOA;
 8000c32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c36:	607b      	str	r3, [r7, #4]
    usart2_gpio.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	727b      	strb	r3, [r7, #9]
    usart2_gpio.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	733b      	strb	r3, [r7, #12]
    usart2_gpio.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c40:	2301      	movs	r3, #1
 8000c42:	72fb      	strb	r3, [r7, #11]
    usart2_gpio.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c44:	2302      	movs	r3, #2
 8000c46:	72bb      	strb	r3, [r7, #10]
    usart2_gpio.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	737b      	strb	r3, [r7, #13]

    // PA2 USART2 TX
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	723b      	strb	r3, [r7, #8]
    GPIOA_PCLK_EN();
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <USART2_GPIOInits+0x58>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c54:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <USART2_GPIOInits+0x58>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    GPIO_Init(&usart2_gpio);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe22 	bl	80008a8 <GPIO_Init>

    // PA3 USART2 RX
    usart2_gpio.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000c64:	2303      	movs	r3, #3
 8000c66:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&usart2_gpio);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fe1c 	bl	80008a8 <GPIO_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000

08000c7c <USART2_Init>:
void USART2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
    usart2_handle.pUSARTx = USART2;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <USART2_Init+0x3c>)
 8000c82:	4a0e      	ldr	r2, [pc, #56]	@ (8000cbc <USART2_Init+0x40>)
 8000c84:	601a      	str	r2, [r3, #0]
    usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <USART2_Init+0x3c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c8c:	609a      	str	r2, [r3, #8]
    usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <USART2_Init+0x3c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	73da      	strb	r2, [r3, #15]
    usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <USART2_Init+0x3c>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	711a      	strb	r2, [r3, #4]
    usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <USART2_Init+0x3c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	731a      	strb	r2, [r3, #12]
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <USART2_Init+0x3c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	735a      	strb	r2, [r3, #13]
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000ca6:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <USART2_Init+0x3c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	739a      	strb	r2, [r3, #14]
    USART_Init(&usart2_handle);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <USART2_Init+0x3c>)
 8000cae:	f7ff fc2d 	bl	800050c <USART_Init>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000006c 	.word	0x2000006c
 8000cbc:	40004400 	.word	0x40004400

08000cc0 <main>:


int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
	uint16_t adcValue = RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	82fb      	strh	r3, [r7, #22]
	uint8_t data[20];
	USART2_GPIOInits();
 8000cca:	f7ff ffa9 	bl	8000c20 <USART2_GPIOInits>
	USART2_Init();
 8000cce:	f7ff ffd5 	bl	8000c7c <USART2_Init>
	USART_PeripheralControl(USART2, ENABLE);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <main+0x50>)
 8000cd6:	f7ff fce4 	bl	80006a2 <USART_PeripheralControl>
	ADC_init();
 8000cda:	f7ff fad1 	bl	8000280 <ADC_init>
	ADC_startConvertion();
 8000cde:	f7ff fb55 	bl	800038c <ADC_startConvertion>
    while(1)
    {
    	adcValue = ADC_read();
 8000ce2:	f7ff fb63 	bl	80003ac <ADC_read>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	82fb      	strh	r3, [r7, #22]
    	sprintf((char *)data,"ADC Value: %u\r\n", adcValue);
 8000cea:	8afa      	ldrh	r2, [r7, #22]
 8000cec:	463b      	mov	r3, r7
 8000cee:	4909      	ldr	r1, [pc, #36]	@ (8000d14 <main+0x54>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f921 	bl	8000f38 <siprintf>
    	USART_SendData(&usart2_handle, data, strlen((char *)data));
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa69 	bl	80001d0 <strlen>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <main+0x58>)
 8000d06:	f7ff fc7e 	bl	8000606 <USART_SendData>
    	adcValue = ADC_read();
 8000d0a:	bf00      	nop
 8000d0c:	e7e9      	b.n	8000ce2 <main+0x22>
 8000d0e:	bf00      	nop
 8000d10:	40004400 	.word	0x40004400
 8000d14:	08001734 	.word	0x08001734
 8000d18:	2000006c 	.word	0x2000006c

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	@ (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f000 f92e 	bl	8000fac <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	@ (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20018000 	.word	0x20018000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000090 	.word	0x20000090
 8000d84:	200001e0 	.word	0x200001e0

08000d88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d8c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000db6:	f000 f8ff 	bl	8000fb8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000dba:	f7ff ff81 	bl	8000cc0 <main>

08000dbe <LoopForever>:

LoopForever:
  b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000dcc:	08001788 	.word	0x08001788
  ldr r2, =_sbss
 8000dd0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000dd4:	200001dc 	.word	0x200001dc

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>
	...

08000ddc <sbrk_aligned>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	4e0f      	ldr	r6, [pc, #60]	@ (8000e1c <sbrk_aligned+0x40>)
 8000de0:	460c      	mov	r4, r1
 8000de2:	6831      	ldr	r1, [r6, #0]
 8000de4:	4605      	mov	r5, r0
 8000de6:	b911      	cbnz	r1, 8000dee <sbrk_aligned+0x12>
 8000de8:	f000 f8d0 	bl	8000f8c <_sbrk_r>
 8000dec:	6030      	str	r0, [r6, #0]
 8000dee:	4621      	mov	r1, r4
 8000df0:	4628      	mov	r0, r5
 8000df2:	f000 f8cb 	bl	8000f8c <_sbrk_r>
 8000df6:	1c43      	adds	r3, r0, #1
 8000df8:	d103      	bne.n	8000e02 <sbrk_aligned+0x26>
 8000dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8000dfe:	4620      	mov	r0, r4
 8000e00:	bd70      	pop	{r4, r5, r6, pc}
 8000e02:	1cc4      	adds	r4, r0, #3
 8000e04:	f024 0403 	bic.w	r4, r4, #3
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d0f8      	beq.n	8000dfe <sbrk_aligned+0x22>
 8000e0c:	1a21      	subs	r1, r4, r0
 8000e0e:	4628      	mov	r0, r5
 8000e10:	f000 f8bc 	bl	8000f8c <_sbrk_r>
 8000e14:	3001      	adds	r0, #1
 8000e16:	d1f2      	bne.n	8000dfe <sbrk_aligned+0x22>
 8000e18:	e7ef      	b.n	8000dfa <sbrk_aligned+0x1e>
 8000e1a:	bf00      	nop
 8000e1c:	20000094 	.word	0x20000094

08000e20 <_malloc_r>:
 8000e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e24:	1ccd      	adds	r5, r1, #3
 8000e26:	f025 0503 	bic.w	r5, r5, #3
 8000e2a:	3508      	adds	r5, #8
 8000e2c:	2d0c      	cmp	r5, #12
 8000e2e:	bf38      	it	cc
 8000e30:	250c      	movcc	r5, #12
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	4606      	mov	r6, r0
 8000e36:	db01      	blt.n	8000e3c <_malloc_r+0x1c>
 8000e38:	42a9      	cmp	r1, r5
 8000e3a:	d904      	bls.n	8000e46 <_malloc_r+0x26>
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	6033      	str	r3, [r6, #0]
 8000e40:	2000      	movs	r0, #0
 8000e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f1c <_malloc_r+0xfc>
 8000e4a:	f000 f869 	bl	8000f20 <__malloc_lock>
 8000e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e52:	461c      	mov	r4, r3
 8000e54:	bb44      	cbnz	r4, 8000ea8 <_malloc_r+0x88>
 8000e56:	4629      	mov	r1, r5
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f7ff ffbf 	bl	8000ddc <sbrk_aligned>
 8000e5e:	1c43      	adds	r3, r0, #1
 8000e60:	4604      	mov	r4, r0
 8000e62:	d158      	bne.n	8000f16 <_malloc_r+0xf6>
 8000e64:	f8d8 4000 	ldr.w	r4, [r8]
 8000e68:	4627      	mov	r7, r4
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	d143      	bne.n	8000ef6 <_malloc_r+0xd6>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d04b      	beq.n	8000f0a <_malloc_r+0xea>
 8000e72:	6823      	ldr	r3, [r4, #0]
 8000e74:	4639      	mov	r1, r7
 8000e76:	4630      	mov	r0, r6
 8000e78:	eb04 0903 	add.w	r9, r4, r3
 8000e7c:	f000 f886 	bl	8000f8c <_sbrk_r>
 8000e80:	4581      	cmp	r9, r0
 8000e82:	d142      	bne.n	8000f0a <_malloc_r+0xea>
 8000e84:	6821      	ldr	r1, [r4, #0]
 8000e86:	1a6d      	subs	r5, r5, r1
 8000e88:	4629      	mov	r1, r5
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	f7ff ffa6 	bl	8000ddc <sbrk_aligned>
 8000e90:	3001      	adds	r0, #1
 8000e92:	d03a      	beq.n	8000f0a <_malloc_r+0xea>
 8000e94:	6823      	ldr	r3, [r4, #0]
 8000e96:	442b      	add	r3, r5
 8000e98:	6023      	str	r3, [r4, #0]
 8000e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	bb62      	cbnz	r2, 8000efc <_malloc_r+0xdc>
 8000ea2:	f8c8 7000 	str.w	r7, [r8]
 8000ea6:	e00f      	b.n	8000ec8 <_malloc_r+0xa8>
 8000ea8:	6822      	ldr	r2, [r4, #0]
 8000eaa:	1b52      	subs	r2, r2, r5
 8000eac:	d420      	bmi.n	8000ef0 <_malloc_r+0xd0>
 8000eae:	2a0b      	cmp	r2, #11
 8000eb0:	d917      	bls.n	8000ee2 <_malloc_r+0xc2>
 8000eb2:	1961      	adds	r1, r4, r5
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	6025      	str	r5, [r4, #0]
 8000eb8:	bf18      	it	ne
 8000eba:	6059      	strne	r1, [r3, #4]
 8000ebc:	6863      	ldr	r3, [r4, #4]
 8000ebe:	bf08      	it	eq
 8000ec0:	f8c8 1000 	streq.w	r1, [r8]
 8000ec4:	5162      	str	r2, [r4, r5]
 8000ec6:	604b      	str	r3, [r1, #4]
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f000 f82f 	bl	8000f2c <__malloc_unlock>
 8000ece:	f104 000b 	add.w	r0, r4, #11
 8000ed2:	1d23      	adds	r3, r4, #4
 8000ed4:	f020 0007 	bic.w	r0, r0, #7
 8000ed8:	1ac2      	subs	r2, r0, r3
 8000eda:	bf1c      	itt	ne
 8000edc:	1a1b      	subne	r3, r3, r0
 8000ede:	50a3      	strne	r3, [r4, r2]
 8000ee0:	e7af      	b.n	8000e42 <_malloc_r+0x22>
 8000ee2:	6862      	ldr	r2, [r4, #4]
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	bf0c      	ite	eq
 8000ee8:	f8c8 2000 	streq.w	r2, [r8]
 8000eec:	605a      	strne	r2, [r3, #4]
 8000eee:	e7eb      	b.n	8000ec8 <_malloc_r+0xa8>
 8000ef0:	4623      	mov	r3, r4
 8000ef2:	6864      	ldr	r4, [r4, #4]
 8000ef4:	e7ae      	b.n	8000e54 <_malloc_r+0x34>
 8000ef6:	463c      	mov	r4, r7
 8000ef8:	687f      	ldr	r7, [r7, #4]
 8000efa:	e7b6      	b.n	8000e6a <_malloc_r+0x4a>
 8000efc:	461a      	mov	r2, r3
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	42a3      	cmp	r3, r4
 8000f02:	d1fb      	bne.n	8000efc <_malloc_r+0xdc>
 8000f04:	2300      	movs	r3, #0
 8000f06:	6053      	str	r3, [r2, #4]
 8000f08:	e7de      	b.n	8000ec8 <_malloc_r+0xa8>
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	6033      	str	r3, [r6, #0]
 8000f0e:	4630      	mov	r0, r6
 8000f10:	f000 f80c 	bl	8000f2c <__malloc_unlock>
 8000f14:	e794      	b.n	8000e40 <_malloc_r+0x20>
 8000f16:	6005      	str	r5, [r0, #0]
 8000f18:	e7d6      	b.n	8000ec8 <_malloc_r+0xa8>
 8000f1a:	bf00      	nop
 8000f1c:	20000098 	.word	0x20000098

08000f20 <__malloc_lock>:
 8000f20:	4801      	ldr	r0, [pc, #4]	@ (8000f28 <__malloc_lock+0x8>)
 8000f22:	f000 b86d 	b.w	8001000 <__retarget_lock_acquire_recursive>
 8000f26:	bf00      	nop
 8000f28:	200001d8 	.word	0x200001d8

08000f2c <__malloc_unlock>:
 8000f2c:	4801      	ldr	r0, [pc, #4]	@ (8000f34 <__malloc_unlock+0x8>)
 8000f2e:	f000 b868 	b.w	8001002 <__retarget_lock_release_recursive>
 8000f32:	bf00      	nop
 8000f34:	200001d8 	.word	0x200001d8

08000f38 <siprintf>:
 8000f38:	b40e      	push	{r1, r2, r3}
 8000f3a:	b510      	push	{r4, lr}
 8000f3c:	b09d      	sub	sp, #116	@ 0x74
 8000f3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000f40:	9002      	str	r0, [sp, #8]
 8000f42:	9006      	str	r0, [sp, #24]
 8000f44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000f48:	480a      	ldr	r0, [pc, #40]	@ (8000f74 <siprintf+0x3c>)
 8000f4a:	9107      	str	r1, [sp, #28]
 8000f4c:	9104      	str	r1, [sp, #16]
 8000f4e:	490a      	ldr	r1, [pc, #40]	@ (8000f78 <siprintf+0x40>)
 8000f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f54:	9105      	str	r1, [sp, #20]
 8000f56:	2400      	movs	r4, #0
 8000f58:	a902      	add	r1, sp, #8
 8000f5a:	6800      	ldr	r0, [r0, #0]
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000f60:	f000 f904 	bl	800116c <_svfiprintf_r>
 8000f64:	9b02      	ldr	r3, [sp, #8]
 8000f66:	701c      	strb	r4, [r3, #0]
 8000f68:	b01d      	add	sp, #116	@ 0x74
 8000f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f6e:	b003      	add	sp, #12
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000000 	.word	0x20000000
 8000f78:	ffff0208 	.word	0xffff0208

08000f7c <memset>:
 8000f7c:	4402      	add	r2, r0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d100      	bne.n	8000f86 <memset+0xa>
 8000f84:	4770      	bx	lr
 8000f86:	f803 1b01 	strb.w	r1, [r3], #1
 8000f8a:	e7f9      	b.n	8000f80 <memset+0x4>

08000f8c <_sbrk_r>:
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4d06      	ldr	r5, [pc, #24]	@ (8000fa8 <_sbrk_r+0x1c>)
 8000f90:	2300      	movs	r3, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	602b      	str	r3, [r5, #0]
 8000f98:	f7ff fec0 	bl	8000d1c <_sbrk>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk_r+0x1a>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	b103      	cbz	r3, 8000fa6 <_sbrk_r+0x1a>
 8000fa4:	6023      	str	r3, [r4, #0]
 8000fa6:	bd38      	pop	{r3, r4, r5, pc}
 8000fa8:	200001d4 	.word	0x200001d4

08000fac <__errno>:
 8000fac:	4b01      	ldr	r3, [pc, #4]	@ (8000fb4 <__errno+0x8>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <__libc_init_array>:
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	4d0d      	ldr	r5, [pc, #52]	@ (8000ff0 <__libc_init_array+0x38>)
 8000fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8000ff4 <__libc_init_array+0x3c>)
 8000fbe:	1b64      	subs	r4, r4, r5
 8000fc0:	10a4      	asrs	r4, r4, #2
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	42a6      	cmp	r6, r4
 8000fc6:	d109      	bne.n	8000fdc <__libc_init_array+0x24>
 8000fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8000ff8 <__libc_init_array+0x40>)
 8000fca:	4c0c      	ldr	r4, [pc, #48]	@ (8000ffc <__libc_init_array+0x44>)
 8000fcc:	f000 fba6 	bl	800171c <_init>
 8000fd0:	1b64      	subs	r4, r4, r5
 8000fd2:	10a4      	asrs	r4, r4, #2
 8000fd4:	2600      	movs	r6, #0
 8000fd6:	42a6      	cmp	r6, r4
 8000fd8:	d105      	bne.n	8000fe6 <__libc_init_array+0x2e>
 8000fda:	bd70      	pop	{r4, r5, r6, pc}
 8000fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe0:	4798      	blx	r3
 8000fe2:	3601      	adds	r6, #1
 8000fe4:	e7ee      	b.n	8000fc4 <__libc_init_array+0xc>
 8000fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fea:	4798      	blx	r3
 8000fec:	3601      	adds	r6, #1
 8000fee:	e7f2      	b.n	8000fd6 <__libc_init_array+0x1e>
 8000ff0:	08001780 	.word	0x08001780
 8000ff4:	08001780 	.word	0x08001780
 8000ff8:	08001780 	.word	0x08001780
 8000ffc:	08001784 	.word	0x08001784

08001000 <__retarget_lock_acquire_recursive>:
 8001000:	4770      	bx	lr

08001002 <__retarget_lock_release_recursive>:
 8001002:	4770      	bx	lr

08001004 <memcpy>:
 8001004:	440a      	add	r2, r1
 8001006:	4291      	cmp	r1, r2
 8001008:	f100 33ff 	add.w	r3, r0, #4294967295
 800100c:	d100      	bne.n	8001010 <memcpy+0xc>
 800100e:	4770      	bx	lr
 8001010:	b510      	push	{r4, lr}
 8001012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800101a:	4291      	cmp	r1, r2
 800101c:	d1f9      	bne.n	8001012 <memcpy+0xe>
 800101e:	bd10      	pop	{r4, pc}

08001020 <_free_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4605      	mov	r5, r0
 8001024:	2900      	cmp	r1, #0
 8001026:	d041      	beq.n	80010ac <_free_r+0x8c>
 8001028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800102c:	1f0c      	subs	r4, r1, #4
 800102e:	2b00      	cmp	r3, #0
 8001030:	bfb8      	it	lt
 8001032:	18e4      	addlt	r4, r4, r3
 8001034:	f7ff ff74 	bl	8000f20 <__malloc_lock>
 8001038:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <_free_r+0x90>)
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	b933      	cbnz	r3, 800104c <_free_r+0x2c>
 800103e:	6063      	str	r3, [r4, #4]
 8001040:	6014      	str	r4, [r2, #0]
 8001042:	4628      	mov	r0, r5
 8001044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001048:	f7ff bf70 	b.w	8000f2c <__malloc_unlock>
 800104c:	42a3      	cmp	r3, r4
 800104e:	d908      	bls.n	8001062 <_free_r+0x42>
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	1821      	adds	r1, r4, r0
 8001054:	428b      	cmp	r3, r1
 8001056:	bf01      	itttt	eq
 8001058:	6819      	ldreq	r1, [r3, #0]
 800105a:	685b      	ldreq	r3, [r3, #4]
 800105c:	1809      	addeq	r1, r1, r0
 800105e:	6021      	streq	r1, [r4, #0]
 8001060:	e7ed      	b.n	800103e <_free_r+0x1e>
 8001062:	461a      	mov	r2, r3
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	b10b      	cbz	r3, 800106c <_free_r+0x4c>
 8001068:	42a3      	cmp	r3, r4
 800106a:	d9fa      	bls.n	8001062 <_free_r+0x42>
 800106c:	6811      	ldr	r1, [r2, #0]
 800106e:	1850      	adds	r0, r2, r1
 8001070:	42a0      	cmp	r0, r4
 8001072:	d10b      	bne.n	800108c <_free_r+0x6c>
 8001074:	6820      	ldr	r0, [r4, #0]
 8001076:	4401      	add	r1, r0
 8001078:	1850      	adds	r0, r2, r1
 800107a:	4283      	cmp	r3, r0
 800107c:	6011      	str	r1, [r2, #0]
 800107e:	d1e0      	bne.n	8001042 <_free_r+0x22>
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	6053      	str	r3, [r2, #4]
 8001086:	4408      	add	r0, r1
 8001088:	6010      	str	r0, [r2, #0]
 800108a:	e7da      	b.n	8001042 <_free_r+0x22>
 800108c:	d902      	bls.n	8001094 <_free_r+0x74>
 800108e:	230c      	movs	r3, #12
 8001090:	602b      	str	r3, [r5, #0]
 8001092:	e7d6      	b.n	8001042 <_free_r+0x22>
 8001094:	6820      	ldr	r0, [r4, #0]
 8001096:	1821      	adds	r1, r4, r0
 8001098:	428b      	cmp	r3, r1
 800109a:	bf04      	itt	eq
 800109c:	6819      	ldreq	r1, [r3, #0]
 800109e:	685b      	ldreq	r3, [r3, #4]
 80010a0:	6063      	str	r3, [r4, #4]
 80010a2:	bf04      	itt	eq
 80010a4:	1809      	addeq	r1, r1, r0
 80010a6:	6021      	streq	r1, [r4, #0]
 80010a8:	6054      	str	r4, [r2, #4]
 80010aa:	e7ca      	b.n	8001042 <_free_r+0x22>
 80010ac:	bd38      	pop	{r3, r4, r5, pc}
 80010ae:	bf00      	nop
 80010b0:	20000098 	.word	0x20000098

080010b4 <__ssputs_r>:
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	688e      	ldr	r6, [r1, #8]
 80010ba:	461f      	mov	r7, r3
 80010bc:	42be      	cmp	r6, r7
 80010be:	680b      	ldr	r3, [r1, #0]
 80010c0:	4682      	mov	sl, r0
 80010c2:	460c      	mov	r4, r1
 80010c4:	4690      	mov	r8, r2
 80010c6:	d82d      	bhi.n	8001124 <__ssputs_r+0x70>
 80010c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80010d0:	d026      	beq.n	8001120 <__ssputs_r+0x6c>
 80010d2:	6965      	ldr	r5, [r4, #20]
 80010d4:	6909      	ldr	r1, [r1, #16]
 80010d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010da:	eba3 0901 	sub.w	r9, r3, r1
 80010de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80010e2:	1c7b      	adds	r3, r7, #1
 80010e4:	444b      	add	r3, r9
 80010e6:	106d      	asrs	r5, r5, #1
 80010e8:	429d      	cmp	r5, r3
 80010ea:	bf38      	it	cc
 80010ec:	461d      	movcc	r5, r3
 80010ee:	0553      	lsls	r3, r2, #21
 80010f0:	d527      	bpl.n	8001142 <__ssputs_r+0x8e>
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff fe94 	bl	8000e20 <_malloc_r>
 80010f8:	4606      	mov	r6, r0
 80010fa:	b360      	cbz	r0, 8001156 <__ssputs_r+0xa2>
 80010fc:	6921      	ldr	r1, [r4, #16]
 80010fe:	464a      	mov	r2, r9
 8001100:	f7ff ff80 	bl	8001004 <memcpy>
 8001104:	89a3      	ldrh	r3, [r4, #12]
 8001106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800110a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800110e:	81a3      	strh	r3, [r4, #12]
 8001110:	6126      	str	r6, [r4, #16]
 8001112:	6165      	str	r5, [r4, #20]
 8001114:	444e      	add	r6, r9
 8001116:	eba5 0509 	sub.w	r5, r5, r9
 800111a:	6026      	str	r6, [r4, #0]
 800111c:	60a5      	str	r5, [r4, #8]
 800111e:	463e      	mov	r6, r7
 8001120:	42be      	cmp	r6, r7
 8001122:	d900      	bls.n	8001126 <__ssputs_r+0x72>
 8001124:	463e      	mov	r6, r7
 8001126:	6820      	ldr	r0, [r4, #0]
 8001128:	4632      	mov	r2, r6
 800112a:	4641      	mov	r1, r8
 800112c:	f000 faa6 	bl	800167c <memmove>
 8001130:	68a3      	ldr	r3, [r4, #8]
 8001132:	1b9b      	subs	r3, r3, r6
 8001134:	60a3      	str	r3, [r4, #8]
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	4433      	add	r3, r6
 800113a:	6023      	str	r3, [r4, #0]
 800113c:	2000      	movs	r0, #0
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	462a      	mov	r2, r5
 8001144:	f000 fab4 	bl	80016b0 <_realloc_r>
 8001148:	4606      	mov	r6, r0
 800114a:	2800      	cmp	r0, #0
 800114c:	d1e0      	bne.n	8001110 <__ssputs_r+0x5c>
 800114e:	6921      	ldr	r1, [r4, #16]
 8001150:	4650      	mov	r0, sl
 8001152:	f7ff ff65 	bl	8001020 <_free_r>
 8001156:	230c      	movs	r3, #12
 8001158:	f8ca 3000 	str.w	r3, [sl]
 800115c:	89a3      	ldrh	r3, [r4, #12]
 800115e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001162:	81a3      	strh	r3, [r4, #12]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	e7e9      	b.n	800113e <__ssputs_r+0x8a>
	...

0800116c <_svfiprintf_r>:
 800116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001170:	4698      	mov	r8, r3
 8001172:	898b      	ldrh	r3, [r1, #12]
 8001174:	061b      	lsls	r3, r3, #24
 8001176:	b09d      	sub	sp, #116	@ 0x74
 8001178:	4607      	mov	r7, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4614      	mov	r4, r2
 800117e:	d510      	bpl.n	80011a2 <_svfiprintf_r+0x36>
 8001180:	690b      	ldr	r3, [r1, #16]
 8001182:	b973      	cbnz	r3, 80011a2 <_svfiprintf_r+0x36>
 8001184:	2140      	movs	r1, #64	@ 0x40
 8001186:	f7ff fe4b 	bl	8000e20 <_malloc_r>
 800118a:	6028      	str	r0, [r5, #0]
 800118c:	6128      	str	r0, [r5, #16]
 800118e:	b930      	cbnz	r0, 800119e <_svfiprintf_r+0x32>
 8001190:	230c      	movs	r3, #12
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	b01d      	add	sp, #116	@ 0x74
 800119a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800119e:	2340      	movs	r3, #64	@ 0x40
 80011a0:	616b      	str	r3, [r5, #20]
 80011a2:	2300      	movs	r3, #0
 80011a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80011a6:	2320      	movs	r3, #32
 80011a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80011ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80011b0:	2330      	movs	r3, #48	@ 0x30
 80011b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001350 <_svfiprintf_r+0x1e4>
 80011b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80011ba:	f04f 0901 	mov.w	r9, #1
 80011be:	4623      	mov	r3, r4
 80011c0:	469a      	mov	sl, r3
 80011c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80011c6:	b10a      	cbz	r2, 80011cc <_svfiprintf_r+0x60>
 80011c8:	2a25      	cmp	r2, #37	@ 0x25
 80011ca:	d1f9      	bne.n	80011c0 <_svfiprintf_r+0x54>
 80011cc:	ebba 0b04 	subs.w	fp, sl, r4
 80011d0:	d00b      	beq.n	80011ea <_svfiprintf_r+0x7e>
 80011d2:	465b      	mov	r3, fp
 80011d4:	4622      	mov	r2, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	4638      	mov	r0, r7
 80011da:	f7ff ff6b 	bl	80010b4 <__ssputs_r>
 80011de:	3001      	adds	r0, #1
 80011e0:	f000 80a7 	beq.w	8001332 <_svfiprintf_r+0x1c6>
 80011e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011e6:	445a      	add	r2, fp
 80011e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80011ea:	f89a 3000 	ldrb.w	r3, [sl]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 809f 	beq.w	8001332 <_svfiprintf_r+0x1c6>
 80011f4:	2300      	movs	r3, #0
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295
 80011fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011fe:	f10a 0a01 	add.w	sl, sl, #1
 8001202:	9304      	str	r3, [sp, #16]
 8001204:	9307      	str	r3, [sp, #28]
 8001206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800120a:	931a      	str	r3, [sp, #104]	@ 0x68
 800120c:	4654      	mov	r4, sl
 800120e:	2205      	movs	r2, #5
 8001210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001214:	484e      	ldr	r0, [pc, #312]	@ (8001350 <_svfiprintf_r+0x1e4>)
 8001216:	f7fe ffe3 	bl	80001e0 <memchr>
 800121a:	9a04      	ldr	r2, [sp, #16]
 800121c:	b9d8      	cbnz	r0, 8001256 <_svfiprintf_r+0xea>
 800121e:	06d0      	lsls	r0, r2, #27
 8001220:	bf44      	itt	mi
 8001222:	2320      	movmi	r3, #32
 8001224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001228:	0711      	lsls	r1, r2, #28
 800122a:	bf44      	itt	mi
 800122c:	232b      	movmi	r3, #43	@ 0x2b
 800122e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001232:	f89a 3000 	ldrb.w	r3, [sl]
 8001236:	2b2a      	cmp	r3, #42	@ 0x2a
 8001238:	d015      	beq.n	8001266 <_svfiprintf_r+0xfa>
 800123a:	9a07      	ldr	r2, [sp, #28]
 800123c:	4654      	mov	r4, sl
 800123e:	2000      	movs	r0, #0
 8001240:	f04f 0c0a 	mov.w	ip, #10
 8001244:	4621      	mov	r1, r4
 8001246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800124a:	3b30      	subs	r3, #48	@ 0x30
 800124c:	2b09      	cmp	r3, #9
 800124e:	d94b      	bls.n	80012e8 <_svfiprintf_r+0x17c>
 8001250:	b1b0      	cbz	r0, 8001280 <_svfiprintf_r+0x114>
 8001252:	9207      	str	r2, [sp, #28]
 8001254:	e014      	b.n	8001280 <_svfiprintf_r+0x114>
 8001256:	eba0 0308 	sub.w	r3, r0, r8
 800125a:	fa09 f303 	lsl.w	r3, r9, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	9304      	str	r3, [sp, #16]
 8001262:	46a2      	mov	sl, r4
 8001264:	e7d2      	b.n	800120c <_svfiprintf_r+0xa0>
 8001266:	9b03      	ldr	r3, [sp, #12]
 8001268:	1d19      	adds	r1, r3, #4
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	9103      	str	r1, [sp, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	bfbb      	ittet	lt
 8001272:	425b      	neglt	r3, r3
 8001274:	f042 0202 	orrlt.w	r2, r2, #2
 8001278:	9307      	strge	r3, [sp, #28]
 800127a:	9307      	strlt	r3, [sp, #28]
 800127c:	bfb8      	it	lt
 800127e:	9204      	strlt	r2, [sp, #16]
 8001280:	7823      	ldrb	r3, [r4, #0]
 8001282:	2b2e      	cmp	r3, #46	@ 0x2e
 8001284:	d10a      	bne.n	800129c <_svfiprintf_r+0x130>
 8001286:	7863      	ldrb	r3, [r4, #1]
 8001288:	2b2a      	cmp	r3, #42	@ 0x2a
 800128a:	d132      	bne.n	80012f2 <_svfiprintf_r+0x186>
 800128c:	9b03      	ldr	r3, [sp, #12]
 800128e:	1d1a      	adds	r2, r3, #4
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	9203      	str	r2, [sp, #12]
 8001294:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001298:	3402      	adds	r4, #2
 800129a:	9305      	str	r3, [sp, #20]
 800129c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001360 <_svfiprintf_r+0x1f4>
 80012a0:	7821      	ldrb	r1, [r4, #0]
 80012a2:	2203      	movs	r2, #3
 80012a4:	4650      	mov	r0, sl
 80012a6:	f7fe ff9b 	bl	80001e0 <memchr>
 80012aa:	b138      	cbz	r0, 80012bc <_svfiprintf_r+0x150>
 80012ac:	9b04      	ldr	r3, [sp, #16]
 80012ae:	eba0 000a 	sub.w	r0, r0, sl
 80012b2:	2240      	movs	r2, #64	@ 0x40
 80012b4:	4082      	lsls	r2, r0
 80012b6:	4313      	orrs	r3, r2
 80012b8:	3401      	adds	r4, #1
 80012ba:	9304      	str	r3, [sp, #16]
 80012bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012c0:	4824      	ldr	r0, [pc, #144]	@ (8001354 <_svfiprintf_r+0x1e8>)
 80012c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80012c6:	2206      	movs	r2, #6
 80012c8:	f7fe ff8a 	bl	80001e0 <memchr>
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d036      	beq.n	800133e <_svfiprintf_r+0x1d2>
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <_svfiprintf_r+0x1ec>)
 80012d2:	bb1b      	cbnz	r3, 800131c <_svfiprintf_r+0x1b0>
 80012d4:	9b03      	ldr	r3, [sp, #12]
 80012d6:	3307      	adds	r3, #7
 80012d8:	f023 0307 	bic.w	r3, r3, #7
 80012dc:	3308      	adds	r3, #8
 80012de:	9303      	str	r3, [sp, #12]
 80012e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012e2:	4433      	add	r3, r6
 80012e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80012e6:	e76a      	b.n	80011be <_svfiprintf_r+0x52>
 80012e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80012ec:	460c      	mov	r4, r1
 80012ee:	2001      	movs	r0, #1
 80012f0:	e7a8      	b.n	8001244 <_svfiprintf_r+0xd8>
 80012f2:	2300      	movs	r3, #0
 80012f4:	3401      	adds	r4, #1
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 0c0a 	mov.w	ip, #10
 80012fe:	4620      	mov	r0, r4
 8001300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001304:	3a30      	subs	r2, #48	@ 0x30
 8001306:	2a09      	cmp	r2, #9
 8001308:	d903      	bls.n	8001312 <_svfiprintf_r+0x1a6>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0c6      	beq.n	800129c <_svfiprintf_r+0x130>
 800130e:	9105      	str	r1, [sp, #20]
 8001310:	e7c4      	b.n	800129c <_svfiprintf_r+0x130>
 8001312:	fb0c 2101 	mla	r1, ip, r1, r2
 8001316:	4604      	mov	r4, r0
 8001318:	2301      	movs	r3, #1
 800131a:	e7f0      	b.n	80012fe <_svfiprintf_r+0x192>
 800131c:	ab03      	add	r3, sp, #12
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	462a      	mov	r2, r5
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <_svfiprintf_r+0x1f0>)
 8001324:	a904      	add	r1, sp, #16
 8001326:	4638      	mov	r0, r7
 8001328:	f3af 8000 	nop.w
 800132c:	1c42      	adds	r2, r0, #1
 800132e:	4606      	mov	r6, r0
 8001330:	d1d6      	bne.n	80012e0 <_svfiprintf_r+0x174>
 8001332:	89ab      	ldrh	r3, [r5, #12]
 8001334:	065b      	lsls	r3, r3, #25
 8001336:	f53f af2d 	bmi.w	8001194 <_svfiprintf_r+0x28>
 800133a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800133c:	e72c      	b.n	8001198 <_svfiprintf_r+0x2c>
 800133e:	ab03      	add	r3, sp, #12
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	462a      	mov	r2, r5
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <_svfiprintf_r+0x1f0>)
 8001346:	a904      	add	r1, sp, #16
 8001348:	4638      	mov	r0, r7
 800134a:	f000 f879 	bl	8001440 <_printf_i>
 800134e:	e7ed      	b.n	800132c <_svfiprintf_r+0x1c0>
 8001350:	08001744 	.word	0x08001744
 8001354:	0800174e 	.word	0x0800174e
 8001358:	00000000 	.word	0x00000000
 800135c:	080010b5 	.word	0x080010b5
 8001360:	0800174a 	.word	0x0800174a

08001364 <_printf_common>:
 8001364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001368:	4616      	mov	r6, r2
 800136a:	4698      	mov	r8, r3
 800136c:	688a      	ldr	r2, [r1, #8]
 800136e:	690b      	ldr	r3, [r1, #16]
 8001370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001374:	4293      	cmp	r3, r2
 8001376:	bfb8      	it	lt
 8001378:	4613      	movlt	r3, r2
 800137a:	6033      	str	r3, [r6, #0]
 800137c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001380:	4607      	mov	r7, r0
 8001382:	460c      	mov	r4, r1
 8001384:	b10a      	cbz	r2, 800138a <_printf_common+0x26>
 8001386:	3301      	adds	r3, #1
 8001388:	6033      	str	r3, [r6, #0]
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	0699      	lsls	r1, r3, #26
 800138e:	bf42      	ittt	mi
 8001390:	6833      	ldrmi	r3, [r6, #0]
 8001392:	3302      	addmi	r3, #2
 8001394:	6033      	strmi	r3, [r6, #0]
 8001396:	6825      	ldr	r5, [r4, #0]
 8001398:	f015 0506 	ands.w	r5, r5, #6
 800139c:	d106      	bne.n	80013ac <_printf_common+0x48>
 800139e:	f104 0a19 	add.w	sl, r4, #25
 80013a2:	68e3      	ldr	r3, [r4, #12]
 80013a4:	6832      	ldr	r2, [r6, #0]
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	42ab      	cmp	r3, r5
 80013aa:	dc26      	bgt.n	80013fa <_printf_common+0x96>
 80013ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	3b00      	subs	r3, #0
 80013b4:	bf18      	it	ne
 80013b6:	2301      	movne	r3, #1
 80013b8:	0692      	lsls	r2, r2, #26
 80013ba:	d42b      	bmi.n	8001414 <_printf_common+0xb0>
 80013bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013c0:	4641      	mov	r1, r8
 80013c2:	4638      	mov	r0, r7
 80013c4:	47c8      	blx	r9
 80013c6:	3001      	adds	r0, #1
 80013c8:	d01e      	beq.n	8001408 <_printf_common+0xa4>
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	6922      	ldr	r2, [r4, #16]
 80013ce:	f003 0306 	and.w	r3, r3, #6
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf02      	ittt	eq
 80013d6:	68e5      	ldreq	r5, [r4, #12]
 80013d8:	6833      	ldreq	r3, [r6, #0]
 80013da:	1aed      	subeq	r5, r5, r3
 80013dc:	68a3      	ldr	r3, [r4, #8]
 80013de:	bf0c      	ite	eq
 80013e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013e4:	2500      	movne	r5, #0
 80013e6:	4293      	cmp	r3, r2
 80013e8:	bfc4      	itt	gt
 80013ea:	1a9b      	subgt	r3, r3, r2
 80013ec:	18ed      	addgt	r5, r5, r3
 80013ee:	2600      	movs	r6, #0
 80013f0:	341a      	adds	r4, #26
 80013f2:	42b5      	cmp	r5, r6
 80013f4:	d11a      	bne.n	800142c <_printf_common+0xc8>
 80013f6:	2000      	movs	r0, #0
 80013f8:	e008      	b.n	800140c <_printf_common+0xa8>
 80013fa:	2301      	movs	r3, #1
 80013fc:	4652      	mov	r2, sl
 80013fe:	4641      	mov	r1, r8
 8001400:	4638      	mov	r0, r7
 8001402:	47c8      	blx	r9
 8001404:	3001      	adds	r0, #1
 8001406:	d103      	bne.n	8001410 <_printf_common+0xac>
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001410:	3501      	adds	r5, #1
 8001412:	e7c6      	b.n	80013a2 <_printf_common+0x3e>
 8001414:	18e1      	adds	r1, r4, r3
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	2030      	movs	r0, #48	@ 0x30
 800141a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800141e:	4422      	add	r2, r4
 8001420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001428:	3302      	adds	r3, #2
 800142a:	e7c7      	b.n	80013bc <_printf_common+0x58>
 800142c:	2301      	movs	r3, #1
 800142e:	4622      	mov	r2, r4
 8001430:	4641      	mov	r1, r8
 8001432:	4638      	mov	r0, r7
 8001434:	47c8      	blx	r9
 8001436:	3001      	adds	r0, #1
 8001438:	d0e6      	beq.n	8001408 <_printf_common+0xa4>
 800143a:	3601      	adds	r6, #1
 800143c:	e7d9      	b.n	80013f2 <_printf_common+0x8e>
	...

08001440 <_printf_i>:
 8001440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001444:	7e0f      	ldrb	r7, [r1, #24]
 8001446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001448:	2f78      	cmp	r7, #120	@ 0x78
 800144a:	4691      	mov	r9, r2
 800144c:	4680      	mov	r8, r0
 800144e:	460c      	mov	r4, r1
 8001450:	469a      	mov	sl, r3
 8001452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001456:	d807      	bhi.n	8001468 <_printf_i+0x28>
 8001458:	2f62      	cmp	r7, #98	@ 0x62
 800145a:	d80a      	bhi.n	8001472 <_printf_i+0x32>
 800145c:	2f00      	cmp	r7, #0
 800145e:	f000 80d1 	beq.w	8001604 <_printf_i+0x1c4>
 8001462:	2f58      	cmp	r7, #88	@ 0x58
 8001464:	f000 80b8 	beq.w	80015d8 <_printf_i+0x198>
 8001468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800146c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001470:	e03a      	b.n	80014e8 <_printf_i+0xa8>
 8001472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001476:	2b15      	cmp	r3, #21
 8001478:	d8f6      	bhi.n	8001468 <_printf_i+0x28>
 800147a:	a101      	add	r1, pc, #4	@ (adr r1, 8001480 <_printf_i+0x40>)
 800147c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001480:	080014d9 	.word	0x080014d9
 8001484:	080014ed 	.word	0x080014ed
 8001488:	08001469 	.word	0x08001469
 800148c:	08001469 	.word	0x08001469
 8001490:	08001469 	.word	0x08001469
 8001494:	08001469 	.word	0x08001469
 8001498:	080014ed 	.word	0x080014ed
 800149c:	08001469 	.word	0x08001469
 80014a0:	08001469 	.word	0x08001469
 80014a4:	08001469 	.word	0x08001469
 80014a8:	08001469 	.word	0x08001469
 80014ac:	080015eb 	.word	0x080015eb
 80014b0:	08001517 	.word	0x08001517
 80014b4:	080015a5 	.word	0x080015a5
 80014b8:	08001469 	.word	0x08001469
 80014bc:	08001469 	.word	0x08001469
 80014c0:	0800160d 	.word	0x0800160d
 80014c4:	08001469 	.word	0x08001469
 80014c8:	08001517 	.word	0x08001517
 80014cc:	08001469 	.word	0x08001469
 80014d0:	08001469 	.word	0x08001469
 80014d4:	080015ad 	.word	0x080015ad
 80014d8:	6833      	ldr	r3, [r6, #0]
 80014da:	1d1a      	adds	r2, r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6032      	str	r2, [r6, #0]
 80014e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014e8:	2301      	movs	r3, #1
 80014ea:	e09c      	b.n	8001626 <_printf_i+0x1e6>
 80014ec:	6833      	ldr	r3, [r6, #0]
 80014ee:	6820      	ldr	r0, [r4, #0]
 80014f0:	1d19      	adds	r1, r3, #4
 80014f2:	6031      	str	r1, [r6, #0]
 80014f4:	0606      	lsls	r6, r0, #24
 80014f6:	d501      	bpl.n	80014fc <_printf_i+0xbc>
 80014f8:	681d      	ldr	r5, [r3, #0]
 80014fa:	e003      	b.n	8001504 <_printf_i+0xc4>
 80014fc:	0645      	lsls	r5, r0, #25
 80014fe:	d5fb      	bpl.n	80014f8 <_printf_i+0xb8>
 8001500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001504:	2d00      	cmp	r5, #0
 8001506:	da03      	bge.n	8001510 <_printf_i+0xd0>
 8001508:	232d      	movs	r3, #45	@ 0x2d
 800150a:	426d      	negs	r5, r5
 800150c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001510:	4858      	ldr	r0, [pc, #352]	@ (8001674 <_printf_i+0x234>)
 8001512:	230a      	movs	r3, #10
 8001514:	e011      	b.n	800153a <_printf_i+0xfa>
 8001516:	6821      	ldr	r1, [r4, #0]
 8001518:	6833      	ldr	r3, [r6, #0]
 800151a:	0608      	lsls	r0, r1, #24
 800151c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001520:	d402      	bmi.n	8001528 <_printf_i+0xe8>
 8001522:	0649      	lsls	r1, r1, #25
 8001524:	bf48      	it	mi
 8001526:	b2ad      	uxthmi	r5, r5
 8001528:	2f6f      	cmp	r7, #111	@ 0x6f
 800152a:	4852      	ldr	r0, [pc, #328]	@ (8001674 <_printf_i+0x234>)
 800152c:	6033      	str	r3, [r6, #0]
 800152e:	bf14      	ite	ne
 8001530:	230a      	movne	r3, #10
 8001532:	2308      	moveq	r3, #8
 8001534:	2100      	movs	r1, #0
 8001536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800153a:	6866      	ldr	r6, [r4, #4]
 800153c:	60a6      	str	r6, [r4, #8]
 800153e:	2e00      	cmp	r6, #0
 8001540:	db05      	blt.n	800154e <_printf_i+0x10e>
 8001542:	6821      	ldr	r1, [r4, #0]
 8001544:	432e      	orrs	r6, r5
 8001546:	f021 0104 	bic.w	r1, r1, #4
 800154a:	6021      	str	r1, [r4, #0]
 800154c:	d04b      	beq.n	80015e6 <_printf_i+0x1a6>
 800154e:	4616      	mov	r6, r2
 8001550:	fbb5 f1f3 	udiv	r1, r5, r3
 8001554:	fb03 5711 	mls	r7, r3, r1, r5
 8001558:	5dc7      	ldrb	r7, [r0, r7]
 800155a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800155e:	462f      	mov	r7, r5
 8001560:	42bb      	cmp	r3, r7
 8001562:	460d      	mov	r5, r1
 8001564:	d9f4      	bls.n	8001550 <_printf_i+0x110>
 8001566:	2b08      	cmp	r3, #8
 8001568:	d10b      	bne.n	8001582 <_printf_i+0x142>
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	07df      	lsls	r7, r3, #31
 800156e:	d508      	bpl.n	8001582 <_printf_i+0x142>
 8001570:	6923      	ldr	r3, [r4, #16]
 8001572:	6861      	ldr	r1, [r4, #4]
 8001574:	4299      	cmp	r1, r3
 8001576:	bfde      	ittt	le
 8001578:	2330      	movle	r3, #48	@ 0x30
 800157a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800157e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001582:	1b92      	subs	r2, r2, r6
 8001584:	6122      	str	r2, [r4, #16]
 8001586:	f8cd a000 	str.w	sl, [sp]
 800158a:	464b      	mov	r3, r9
 800158c:	aa03      	add	r2, sp, #12
 800158e:	4621      	mov	r1, r4
 8001590:	4640      	mov	r0, r8
 8001592:	f7ff fee7 	bl	8001364 <_printf_common>
 8001596:	3001      	adds	r0, #1
 8001598:	d14a      	bne.n	8001630 <_printf_i+0x1f0>
 800159a:	f04f 30ff 	mov.w	r0, #4294967295
 800159e:	b004      	add	sp, #16
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	f043 0320 	orr.w	r3, r3, #32
 80015aa:	6023      	str	r3, [r4, #0]
 80015ac:	4832      	ldr	r0, [pc, #200]	@ (8001678 <_printf_i+0x238>)
 80015ae:	2778      	movs	r7, #120	@ 0x78
 80015b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	6831      	ldr	r1, [r6, #0]
 80015b8:	061f      	lsls	r7, r3, #24
 80015ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80015be:	d402      	bmi.n	80015c6 <_printf_i+0x186>
 80015c0:	065f      	lsls	r7, r3, #25
 80015c2:	bf48      	it	mi
 80015c4:	b2ad      	uxthmi	r5, r5
 80015c6:	6031      	str	r1, [r6, #0]
 80015c8:	07d9      	lsls	r1, r3, #31
 80015ca:	bf44      	itt	mi
 80015cc:	f043 0320 	orrmi.w	r3, r3, #32
 80015d0:	6023      	strmi	r3, [r4, #0]
 80015d2:	b11d      	cbz	r5, 80015dc <_printf_i+0x19c>
 80015d4:	2310      	movs	r3, #16
 80015d6:	e7ad      	b.n	8001534 <_printf_i+0xf4>
 80015d8:	4826      	ldr	r0, [pc, #152]	@ (8001674 <_printf_i+0x234>)
 80015da:	e7e9      	b.n	80015b0 <_printf_i+0x170>
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	f023 0320 	bic.w	r3, r3, #32
 80015e2:	6023      	str	r3, [r4, #0]
 80015e4:	e7f6      	b.n	80015d4 <_printf_i+0x194>
 80015e6:	4616      	mov	r6, r2
 80015e8:	e7bd      	b.n	8001566 <_printf_i+0x126>
 80015ea:	6833      	ldr	r3, [r6, #0]
 80015ec:	6825      	ldr	r5, [r4, #0]
 80015ee:	6961      	ldr	r1, [r4, #20]
 80015f0:	1d18      	adds	r0, r3, #4
 80015f2:	6030      	str	r0, [r6, #0]
 80015f4:	062e      	lsls	r6, r5, #24
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	d501      	bpl.n	80015fe <_printf_i+0x1be>
 80015fa:	6019      	str	r1, [r3, #0]
 80015fc:	e002      	b.n	8001604 <_printf_i+0x1c4>
 80015fe:	0668      	lsls	r0, r5, #25
 8001600:	d5fb      	bpl.n	80015fa <_printf_i+0x1ba>
 8001602:	8019      	strh	r1, [r3, #0]
 8001604:	2300      	movs	r3, #0
 8001606:	6123      	str	r3, [r4, #16]
 8001608:	4616      	mov	r6, r2
 800160a:	e7bc      	b.n	8001586 <_printf_i+0x146>
 800160c:	6833      	ldr	r3, [r6, #0]
 800160e:	1d1a      	adds	r2, r3, #4
 8001610:	6032      	str	r2, [r6, #0]
 8001612:	681e      	ldr	r6, [r3, #0]
 8001614:	6862      	ldr	r2, [r4, #4]
 8001616:	2100      	movs	r1, #0
 8001618:	4630      	mov	r0, r6
 800161a:	f7fe fde1 	bl	80001e0 <memchr>
 800161e:	b108      	cbz	r0, 8001624 <_printf_i+0x1e4>
 8001620:	1b80      	subs	r0, r0, r6
 8001622:	6060      	str	r0, [r4, #4]
 8001624:	6863      	ldr	r3, [r4, #4]
 8001626:	6123      	str	r3, [r4, #16]
 8001628:	2300      	movs	r3, #0
 800162a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800162e:	e7aa      	b.n	8001586 <_printf_i+0x146>
 8001630:	6923      	ldr	r3, [r4, #16]
 8001632:	4632      	mov	r2, r6
 8001634:	4649      	mov	r1, r9
 8001636:	4640      	mov	r0, r8
 8001638:	47d0      	blx	sl
 800163a:	3001      	adds	r0, #1
 800163c:	d0ad      	beq.n	800159a <_printf_i+0x15a>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	079b      	lsls	r3, r3, #30
 8001642:	d413      	bmi.n	800166c <_printf_i+0x22c>
 8001644:	68e0      	ldr	r0, [r4, #12]
 8001646:	9b03      	ldr	r3, [sp, #12]
 8001648:	4298      	cmp	r0, r3
 800164a:	bfb8      	it	lt
 800164c:	4618      	movlt	r0, r3
 800164e:	e7a6      	b.n	800159e <_printf_i+0x15e>
 8001650:	2301      	movs	r3, #1
 8001652:	4632      	mov	r2, r6
 8001654:	4649      	mov	r1, r9
 8001656:	4640      	mov	r0, r8
 8001658:	47d0      	blx	sl
 800165a:	3001      	adds	r0, #1
 800165c:	d09d      	beq.n	800159a <_printf_i+0x15a>
 800165e:	3501      	adds	r5, #1
 8001660:	68e3      	ldr	r3, [r4, #12]
 8001662:	9903      	ldr	r1, [sp, #12]
 8001664:	1a5b      	subs	r3, r3, r1
 8001666:	42ab      	cmp	r3, r5
 8001668:	dcf2      	bgt.n	8001650 <_printf_i+0x210>
 800166a:	e7eb      	b.n	8001644 <_printf_i+0x204>
 800166c:	2500      	movs	r5, #0
 800166e:	f104 0619 	add.w	r6, r4, #25
 8001672:	e7f5      	b.n	8001660 <_printf_i+0x220>
 8001674:	08001755 	.word	0x08001755
 8001678:	08001766 	.word	0x08001766

0800167c <memmove>:
 800167c:	4288      	cmp	r0, r1
 800167e:	b510      	push	{r4, lr}
 8001680:	eb01 0402 	add.w	r4, r1, r2
 8001684:	d902      	bls.n	800168c <memmove+0x10>
 8001686:	4284      	cmp	r4, r0
 8001688:	4623      	mov	r3, r4
 800168a:	d807      	bhi.n	800169c <memmove+0x20>
 800168c:	1e43      	subs	r3, r0, #1
 800168e:	42a1      	cmp	r1, r4
 8001690:	d008      	beq.n	80016a4 <memmove+0x28>
 8001692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800169a:	e7f8      	b.n	800168e <memmove+0x12>
 800169c:	4402      	add	r2, r0
 800169e:	4601      	mov	r1, r0
 80016a0:	428a      	cmp	r2, r1
 80016a2:	d100      	bne.n	80016a6 <memmove+0x2a>
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80016aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80016ae:	e7f7      	b.n	80016a0 <memmove+0x24>

080016b0 <_realloc_r>:
 80016b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b4:	4607      	mov	r7, r0
 80016b6:	4614      	mov	r4, r2
 80016b8:	460d      	mov	r5, r1
 80016ba:	b921      	cbnz	r1, 80016c6 <_realloc_r+0x16>
 80016bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016c0:	4611      	mov	r1, r2
 80016c2:	f7ff bbad 	b.w	8000e20 <_malloc_r>
 80016c6:	b92a      	cbnz	r2, 80016d4 <_realloc_r+0x24>
 80016c8:	f7ff fcaa 	bl	8001020 <_free_r>
 80016cc:	4625      	mov	r5, r4
 80016ce:	4628      	mov	r0, r5
 80016d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016d4:	f000 f81a 	bl	800170c <_malloc_usable_size_r>
 80016d8:	4284      	cmp	r4, r0
 80016da:	4606      	mov	r6, r0
 80016dc:	d802      	bhi.n	80016e4 <_realloc_r+0x34>
 80016de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80016e2:	d8f4      	bhi.n	80016ce <_realloc_r+0x1e>
 80016e4:	4621      	mov	r1, r4
 80016e6:	4638      	mov	r0, r7
 80016e8:	f7ff fb9a 	bl	8000e20 <_malloc_r>
 80016ec:	4680      	mov	r8, r0
 80016ee:	b908      	cbnz	r0, 80016f4 <_realloc_r+0x44>
 80016f0:	4645      	mov	r5, r8
 80016f2:	e7ec      	b.n	80016ce <_realloc_r+0x1e>
 80016f4:	42b4      	cmp	r4, r6
 80016f6:	4622      	mov	r2, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	bf28      	it	cs
 80016fc:	4632      	movcs	r2, r6
 80016fe:	f7ff fc81 	bl	8001004 <memcpy>
 8001702:	4629      	mov	r1, r5
 8001704:	4638      	mov	r0, r7
 8001706:	f7ff fc8b 	bl	8001020 <_free_r>
 800170a:	e7f1      	b.n	80016f0 <_realloc_r+0x40>

0800170c <_malloc_usable_size_r>:
 800170c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001710:	1f18      	subs	r0, r3, #4
 8001712:	2b00      	cmp	r3, #0
 8001714:	bfbc      	itt	lt
 8001716:	580b      	ldrlt	r3, [r1, r0]
 8001718:	18c0      	addlt	r0, r0, r3
 800171a:	4770      	bx	lr

0800171c <_init>:
 800171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171e:	bf00      	nop
 8001720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001722:	bc08      	pop	{r3}
 8001724:	469e      	mov	lr, r3
 8001726:	4770      	bx	lr

08001728 <_fini>:
 8001728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172a:	bf00      	nop
 800172c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172e:	bc08      	pop	{r3}
 8001730:	469e      	mov	lr, r3
 8001732:	4770      	bx	lr
