
STM32Lxxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f38  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080010c4  080010c4  000020c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001110  08001110  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001110  08001110  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001110  08001110  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001110  08001110  00002110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001114  08001114  00002114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001118  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          0000005c  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000024f5  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007f5  00000000  00000000  00005531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  00005d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ab  00000000  00000000  00005f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002392  00000000  00000000  00006113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000c50  00000000  00000000  000084a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000090f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000890  00000000  00000000  00009138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000099c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080010ac 	.word	0x080010ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080010ac 	.word	0x080010ac

080001cc <I2C_PeriClockControl>:
*********************************************************************************************************************/


/************************************************ end of Function Definitions ****************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t state)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	460b      	mov	r3, r1
 80001d6:	70fb      	strb	r3, [r7, #3]
	if( ENABLE == state)
 80001d8:	78fb      	ldrb	r3, [r7, #3]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d120      	bne.n	8000220 <I2C_PeriClockControl+0x54>
	{
		if(I2C1 == pI2Cx)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	4a24      	ldr	r2, [pc, #144]	@ (8000274 <I2C_PeriClockControl+0xa8>)
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d106      	bne.n	80001f4 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80001e6:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <I2C_PeriClockControl+0xac>)
 80001e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001ea:	4a23      	ldr	r2, [pc, #140]	@ (8000278 <I2C_PeriClockControl+0xac>)
 80001ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001f0:	6593      	str	r3, [r2, #88]	@ 0x58
	}
	else
	{

	}
}
 80001f2:	e038      	b.n	8000266 <I2C_PeriClockControl+0x9a>
		else if(I2C2 == pI2Cx)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4a21      	ldr	r2, [pc, #132]	@ (800027c <I2C_PeriClockControl+0xb0>)
 80001f8:	4293      	cmp	r3, r2
 80001fa:	d106      	bne.n	800020a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80001fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000278 <I2C_PeriClockControl+0xac>)
 80001fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000200:	4a1d      	ldr	r2, [pc, #116]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000202:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000206:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000208:	e02d      	b.n	8000266 <I2C_PeriClockControl+0x9a>
		else if(I2C3 == pI2Cx)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a1c      	ldr	r2, [pc, #112]	@ (8000280 <I2C_PeriClockControl+0xb4>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d129      	bne.n	8000266 <I2C_PeriClockControl+0x9a>
			I2C2_PCLK_EN();
 8000212:	4b19      	ldr	r3, [pc, #100]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000216:	4a18      	ldr	r2, [pc, #96]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800021c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800021e:	e022      	b.n	8000266 <I2C_PeriClockControl+0x9a>
	else if(DISABLE == state)
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d11f      	bne.n	8000266 <I2C_PeriClockControl+0x9a>
		if(I2C1 == pI2Cx)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a12      	ldr	r2, [pc, #72]	@ (8000274 <I2C_PeriClockControl+0xa8>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <I2C_PeriClockControl+0x70>
			I2C1_PCLK_DI();
 800022e:	4b12      	ldr	r3, [pc, #72]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000232:	4a11      	ldr	r2, [pc, #68]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000234:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000238:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800023a:	e014      	b.n	8000266 <I2C_PeriClockControl+0x9a>
		else if(I2C2 == pI2Cx)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <I2C_PeriClockControl+0xb0>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <I2C_PeriClockControl+0x86>
			I2C2_PCLK_DI();
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000248:	4a0b      	ldr	r2, [pc, #44]	@ (8000278 <I2C_PeriClockControl+0xac>)
 800024a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800024e:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000250:	e009      	b.n	8000266 <I2C_PeriClockControl+0x9a>
		else if(I2C3 == pI2Cx)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <I2C_PeriClockControl+0xb4>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d105      	bne.n	8000266 <I2C_PeriClockControl+0x9a>
			I2C2_PCLK_DI();
 800025a:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <I2C_PeriClockControl+0xac>)
 800025c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025e:	4a06      	ldr	r2, [pc, #24]	@ (8000278 <I2C_PeriClockControl+0xac>)
 8000260:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000264:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40005400 	.word	0x40005400
 8000278:	40021000 	.word	0x40021000
 800027c:	40005800 	.word	0x40005800
 8000280:	40005c00 	.word	0x40005c00

08000284 <I2C_PeripheralControl>:
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t state)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	460b      	mov	r3, r1
 800028e:	70fb      	strb	r3, [r7, #3]

	if(ENABLE == state)
 8000290:	78fb      	ldrb	r3, [r7, #3]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d106      	bne.n	80002a4 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |=(1<<0);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f043 0201 	orr.w	r2, r3, #1
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]
	else
	{

	}

}
 80002a2:	e008      	b.n	80002b6 <I2C_PeripheralControl+0x32>
	else if(DISABLE == state)
 80002a4:	78fb      	ldrb	r3, [r7, #3]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d105      	bne.n	80002b6 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 &= ~(1<<0);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f023 0201 	bic.w	r2, r3, #1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
	...

080002c4 <I2C_Init>:
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = RESET;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
	tempReg |= pI2CHandle->I2C_Config.I2C_ACKControl << 15;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	795b      	ldrb	r3, [r3, #5]
 80002d4:	03db      	lsls	r3, r3, #15
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	4313      	orrs	r3, r2
 80002da:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->CR2 |= tempReg;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	6859      	ldr	r1, [r3, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	430a      	orrs	r2, r1
 80002ea:	605a      	str	r2, [r3, #4]

	pI2CHandle->pI2Cx->TIMEINGR |= 0x411313;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6919      	ldr	r1, [r3, #16]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <I2C_Init+0x5c>)
 80002f8:	430b      	orrs	r3, r1
 80002fa:	6113      	str	r3, [r2, #16]

	tempReg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempReg;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	6899      	ldr	r1, [r3, #8]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	430a      	orrs	r2, r1
 8000312:	609a      	str	r2, [r3, #8]


}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	00411313 	.word	0x00411313

08000324 <I2C_MasterTransmitData>:
void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{

}
void I2C_MasterTransmitData(I2C_Handle_t *pI2CHandle, uint8_t* pTxBuffer,uint8_t txBufLen,uint8_t slaveAddr,uint8_t Sr)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	4611      	mov	r1, r2
 8000330:	461a      	mov	r2, r3
 8000332:	460b      	mov	r3, r1
 8000334:	71fb      	strb	r3, [r7, #7]
 8000336:	4613      	mov	r3, r2
 8000338:	71bb      	strb	r3, [r7, #6]
	uint32_t cr2 = RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
	while (((pI2CHandle->pI2Cx->ISR >> 15) & 1));
 800033e:	bf00      	nop
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	0bdb      	lsrs	r3, r3, #15
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f7      	bne.n	8000340 <I2C_MasterTransmitData+0x1c>
	pI2CHandle->pI2Cx->CR2 |= (slaveAddr << 1) | (txBufLen << 16);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	0059      	lsls	r1, r3, #1
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	041b      	lsls	r3, r3, #16
 800035e:	430b      	orrs	r3, r1
 8000360:	4619      	mov	r1, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	430a      	orrs	r2, r1
 8000368:	605a      	str	r2, [r3, #4]

	if (I2C_SR_DISABLE == Sr )
 800036a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d103      	bne.n	800037a <I2C_MasterTransmitData+0x56>
	{
		cr2 |= (1 << 25);
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000378:	617b      	str	r3, [r7, #20]
	}
	pI2CHandle->pI2Cx->CR2 |= cr2;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	6859      	ldr	r1, [r3, #4]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	697a      	ldr	r2, [r7, #20]
 8000386:	430a      	orrs	r2, r1
 8000388:	605a      	str	r2, [r3, #4]

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f9f5 	bl	800077e <I2C_GenerateStartCondition>

	while (txBufLen > 0)
 8000394:	e012      	b.n	80003bc <I2C_MasterTransmitData+0x98>
	{
		while (!(pI2CHandle->pI2Cx->ISR & (1 << 0)));
 8000396:	bf00      	nop
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f8      	beq.n	8000398 <I2C_MasterTransmitData+0x74>

		pI2CHandle->pI2Cx->TXDR = *pTxBuffer;
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	781a      	ldrb	r2, [r3, #0]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	629a      	str	r2, [r3, #40]	@ 0x28

		pTxBuffer++;
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	3301      	adds	r3, #1
 80003b4:	60bb      	str	r3, [r7, #8]
		txBufLen--;
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	71fb      	strb	r3, [r7, #7]
	while (txBufLen > 0)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d1e9      	bne.n	8000396 <I2C_MasterTransmitData+0x72>
	}

	if (I2C_SR_DISABLE == Sr )
 80003c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d110      	bne.n	80003ec <I2C_MasterTransmitData+0xc8>
	{
		while (!(pI2CHandle->pI2Cx->ISR & (1 << 5)));
 80003ca:	bf00      	nop
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	f003 0320 	and.w	r3, r3, #32
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f8      	beq.n	80003cc <I2C_MasterTransmitData+0xa8>

		pI2CHandle->pI2Cx->ICR |= (1 << 5);
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	69da      	ldr	r2, [r3, #28]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f042 0220 	orr.w	r2, r2, #32
 80003e8:	61da      	str	r2, [r3, #28]
	else
	{

		while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
	}
}
 80003ea:	e007      	b.n	80003fc <I2C_MasterTransmitData+0xd8>
		while (!(pI2CHandle->pI2Cx->ISR & (1 << 6)));
 80003ec:	bf00      	nop
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f8      	beq.n	80003ee <I2C_MasterTransmitData+0xca>
}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <I2C_MasterTransmitDataIT>:
	}
}


uint8_t  I2C_MasterTransmitDataIT(I2C_Handle_t *pI2CHandle, uint8_t* pTxBuffer,uint8_t txBufLen,uint8_t SlaveAddr,uint8_t Sr)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	4611      	mov	r1, r2
 8000410:	461a      	mov	r2, r3
 8000412:	460b      	mov	r3, r1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	4613      	mov	r3, r2
 8000418:	71bb      	strb	r3, [r7, #6]
	uint8_t busyState = pI2CHandle->txRxState;
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	7c9b      	ldrb	r3, [r3, #18]
 800041e:	74fb      	strb	r3, [r7, #19]

	if((busyState != I2C_BUSY_IN_TX) && (busyState != I2C_BUSY_IN_RX))
 8000420:	7cfb      	ldrb	r3, [r7, #19]
 8000422:	2b02      	cmp	r3, #2
 8000424:	d048      	beq.n	80004b8 <I2C_MasterTransmitDataIT+0xb4>
 8000426:	7cfb      	ldrb	r3, [r7, #19]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d045      	beq.n	80004b8 <I2C_MasterTransmitDataIT+0xb4>
	{

		pI2CHandle->pTxBuffer = pTxBuffer;
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	609a      	str	r2, [r3, #8]
		pI2CHandle->txBufLen  = txBufLen;
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	79fa      	ldrb	r2, [r7, #7]
 8000436:	741a      	strb	r2, [r3, #16]
		pI2CHandle->txRxState = I2C_BUSY_IN_TX;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2202      	movs	r2, #2
 800043c:	749a      	strb	r2, [r3, #18]
		pI2CHandle->devAddr   = SlaveAddr;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	79ba      	ldrb	r2, [r7, #6]
 8000442:	74da      	strb	r2, [r3, #19]
		pI2CHandle->startRepeat        = Sr;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f897 2020 	ldrb.w	r2, [r7, #32]
 800044a:	761a      	strb	r2, [r3, #24]


		while( (pI2CHandle->pI2Cx->ISR & (1U << 15)) != 0 );
 800044c:	bf00      	nop
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f8      	bne.n	800044e <I2C_MasterTransmitDataIT+0x4a>


		uint32_t tempBuf = pI2CHandle->pI2Cx->CR2;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	617b      	str	r3, [r7, #20]
		tempBuf &= ~((0x3FFU << 0) | (0xFFU << 16) | (1U<<24) | (1U<<25) | (1U<<10)); /* clear SADD, NBYTES, RELOAD, AUTOEND, RD_WRN */
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	4b18      	ldr	r3, [pc, #96]	@ (80004c8 <I2C_MasterTransmitDataIT+0xc4>)
 8000468:	4013      	ands	r3, r2
 800046a:	617b      	str	r3, [r7, #20]
		tempBuf |= ((uint32_t)(SlaveAddr & 0x3FFU) << 1);
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	4313      	orrs	r3, r2
 8000474:	617b      	str	r3, [r7, #20]
		tempBuf |= ((txBufLen & 0xFFU) << 16);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	041b      	lsls	r3, r3, #16
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	4313      	orrs	r3, r2
 800047e:	617b      	str	r3, [r7, #20]
		if(  I2C_SR_DISABLE == Sr)
 8000480:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d103      	bne.n	8000490 <I2C_MasterTransmitDataIT+0x8c>
		{
			tempBuf |= (1U << 25);
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800048e:	617b      	str	r3, [r7, #20]
		}
		pI2CHandle->pI2Cx->CR2 = tempBuf;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	605a      	str	r2, [r3, #4]


		pI2CHandle->pI2Cx->CR2 |= (1U << 13);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	685a      	ldr	r2, [r3, #4]
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80004a6:	605a      	str	r2, [r3, #4]
		pI2CHandle->pI2Cx->CR1 |= (1U << I2C_CR1_TXIE) | (1U << I2C_CR1_ERRIE) | (1U << I2C_CR1_STOPIE);
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f042 02a2 	orr.w	r2, r2, #162	@ 0xa2
 80004b6:	601a      	str	r2, [r3, #0]
	}

	return busyState;
 80004b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	371c      	adds	r7, #28
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	fc00f800 	.word	0xfc00f800

080004cc <I2C_CloseTransmitData>:
	}

	return busyState;
}
void I2C_CloseTransmitData(I2C_Handle_t *pI2CHandle)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 1);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f022 0202 	bic.w	r2, r2, #2
 80004e2:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 6);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	685a      	ldr	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80004f2:	605a      	str	r2, [r3, #4]
	pI2CHandle->txRxState = I2C_READY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2200      	movs	r2, #0
 80004f8:	749a      	strb	r2, [r3, #18]
	pI2CHandle->pTxBuffer = NULL;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
	pI2CHandle->txBufLen  = 0;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	741a      	strb	r2, [r3, #16]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <I2C_CloseReceiveData>:
void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 1);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f022 0202 	bic.w	r2, r2, #2
 8000528:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~(1 << 6);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000538:	605a      	str	r2, [r3, #4]


	pI2CHandle->txRxState = I2C_READY;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	749a      	strb	r2, [r3, #18]
	pI2CHandle->pRxBuffer = NULL;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
	pI2CHandle->rxBufLen     = 0;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	745a      	strb	r2, [r3, #17]
	pI2CHandle->rxBufSize    = 0;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d105      	bne.n	8000566 <I2C_CloseReceiveData+0x54>
	I2C_ManageAcking(pI2CHandle->pI2Cx,ENABLE);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2101      	movs	r1, #1
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f8ed 	bl	8000740 <I2C_ManageAcking>
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <I2C_EV_IRQHandling>:
void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{

}
void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	 uint32_t isr = pI2CHandle->pI2Cx->ISR;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	60fb      	str	r3, [r7, #12]
   // uint32_t cr1 = pI2CHandle->pI2Cx->CR1;

	if(isr & (1U << I2C_ISR_ADDR))
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	2b00      	cmp	r3, #0
 8000586:	d007      	beq.n	8000598 <I2C_EV_IRQHandling+0x2a>
	{


		pI2CHandle->pI2Cx->ICR |= (1U << I2C_ICR_ADDRCF);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	69da      	ldr	r2, [r3, #28]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f042 0208 	orr.w	r2, r2, #8
 8000596:	61da      	str	r2, [r3, #28]
	}


	if(isr & (1U << I2C_ISR_TXIS))
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d006      	beq.n	80005b0 <I2C_EV_IRQHandling+0x42>
	{
		if(pI2CHandle->txRxState == I2C_BUSY_IN_TX)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7c9b      	ldrb	r3, [r3, #18]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d102      	bne.n	80005b0 <I2C_EV_IRQHandling+0x42>
		{
			I2C_MasterHandleTXEInterrupt(pI2CHandle);
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f955 	bl	800085a <I2C_MasterHandleTXEInterrupt>
		}
	}


	if(isr & (1U << I2C_ISR_RXNE))
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d01c      	beq.n	80005f4 <I2C_EV_IRQHandling+0x86>
	{
		if(pI2CHandle->txRxState == I2C_BUSY_IN_RX)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7c9b      	ldrb	r3, [r3, #18]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d118      	bne.n	80005f4 <I2C_EV_IRQHandling+0x86>
		{

			*pI2CHandle->pRxBuffer = (uint8_t)pI2CHandle->pI2Cx->RXDR;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	701a      	strb	r2, [r3, #0]
			pI2CHandle->pRxBuffer++;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60da      	str	r2, [r3, #12]
			pI2CHandle->rxBufLen--;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7c5b      	ldrb	r3, [r3, #17]
 80005de:	3b01      	subs	r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	745a      	strb	r2, [r3, #17]

			if(pI2CHandle->rxBufLen == 0)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7c5b      	ldrb	r3, [r3, #17]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d102      	bne.n	80005f4 <I2C_EV_IRQHandling+0x86>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle );
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f8e5 	bl	80007be <I2C_MasterHandleRXNEInterrupt>
			}
		}
	}


	if(isr & (1U << I2C_ISR_STOPF))
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d01e      	beq.n	800063c <I2C_EV_IRQHandling+0xce>
	{

		pI2CHandle->pI2Cx->ICR |= (1U << I2C_ICR_STOPCF);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f042 0220 	orr.w	r2, r2, #32
 800060c:	61da      	str	r2, [r3, #28]

		if(pI2CHandle->txRxState == I2C_BUSY_IN_TX)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7c9b      	ldrb	r3, [r3, #18]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d107      	bne.n	8000626 <I2C_EV_IRQHandling+0xb8>
		{
			I2C_CloseTransmitData(pI2CHandle);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ff58 	bl	80004cc <I2C_CloseTransmitData>
			I2C_ApplicationEventCallBack(pI2CHandle, I2C_EV_TX_CMPLT);
 800061c:	2100      	movs	r1, #0
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 fc78 	bl	8000f14 <I2C_ApplicationEventCallBack>
			I2C_CloseReceiveData(pI2CHandle);
			I2C_ApplicationEventCallBack(pI2CHandle, I2C_EV_RX_CMPLT);
		}
	}

}
 8000624:	e00a      	b.n	800063c <I2C_EV_IRQHandling+0xce>
		else if(pI2CHandle->txRxState == I2C_BUSY_IN_RX)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7c9b      	ldrb	r3, [r3, #18]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <I2C_EV_IRQHandling+0xce>
			I2C_CloseReceiveData(pI2CHandle);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff6f 	bl	8000512 <I2C_CloseReceiveData>
			I2C_ApplicationEventCallBack(pI2CHandle, I2C_EV_RX_CMPLT);
 8000634:	2101      	movs	r1, #1
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f000 fc6c 	bl	8000f14 <I2C_ApplicationEventCallBack>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <I2C_ER_IRQHandling>:
void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	uint32_t isr = pI2CHandle->pI2Cx->ISR;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	60fb      	str	r3, [r7, #12]
	uint32_t cr1 = pI2CHandle->pI2Cx->CR1;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	60bb      	str	r3, [r7, #8]

	if((isr & (1U << 8)) && (cr1 & (1U << 7)))
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000662:	2b00      	cmp	r3, #0
 8000664:	d010      	beq.n	8000688 <I2C_ER_IRQHandling+0x44>
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00b      	beq.n	8000688 <I2C_ER_IRQHandling+0x44>
	{
		pI2CHandle->pI2Cx->ICR |= (1U << 8);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69da      	ldr	r2, [r3, #28]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800067e:	61da      	str	r2, [r3, #28]
		I2C_ApplicationEventCallBack(pI2CHandle, I2C_ERROR_BERR);
 8000680:	2103      	movs	r1, #3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 fc46 	bl	8000f14 <I2C_ApplicationEventCallBack>
	}

	if((isr & (1U << 9)) && (cr1 & (1U << 7)))
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800068e:	2b00      	cmp	r3, #0
 8000690:	d010      	beq.n	80006b4 <I2C_ER_IRQHandling+0x70>
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00b      	beq.n	80006b4 <I2C_ER_IRQHandling+0x70>
	{
		pI2CHandle->pI2Cx->ICR |= (1U << 9);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	69da      	ldr	r2, [r3, #28]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80006aa:	61da      	str	r2, [r3, #28]
		I2C_ApplicationEventCallBack(pI2CHandle, I2C_ERROR_ARLO);
 80006ac:	2104      	movs	r1, #4
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 fc30 	bl	8000f14 <I2C_ApplicationEventCallBack>
	}

	if((isr & (1U << 10)) && (cr1 & (1U << 7)))
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d010      	beq.n	80006e0 <I2C_ER_IRQHandling+0x9c>
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00b      	beq.n	80006e0 <I2C_ER_IRQHandling+0x9c>
	{
		pI2CHandle->pI2Cx->ICR |= (1U << 10);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	69da      	ldr	r2, [r3, #28]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80006d6:	61da      	str	r2, [r3, #28]
		I2C_ApplicationEventCallBack(pI2CHandle, I2C_ERROR_AF);
 80006d8:	2105      	movs	r1, #5
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 fc1a 	bl	8000f14 <I2C_ApplicationEventCallBack>
	}

	if((isr & (1U << 11)) && (cr1 & (1U << 7)))
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d010      	beq.n	800070c <I2C_ER_IRQHandling+0xc8>
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00b      	beq.n	800070c <I2C_ER_IRQHandling+0xc8>
	{
		pI2CHandle->pI2Cx->ICR |= (1U << 11);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	69da      	ldr	r2, [r3, #28]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000702:	61da      	str	r2, [r3, #28]
		I2C_ApplicationEventCallBack(pI2CHandle, I2C_ERROR_OVR);
 8000704:	2106      	movs	r1, #6
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 fc04 	bl	8000f14 <I2C_ApplicationEventCallBack>
	}

	if((isr & (1U << 12)) && (cr1 & (1U << 7)))
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000712:	2b00      	cmp	r3, #0
 8000714:	d010      	beq.n	8000738 <I2C_ER_IRQHandling+0xf4>
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071c:	2b00      	cmp	r3, #0
 800071e:	d00b      	beq.n	8000738 <I2C_ER_IRQHandling+0xf4>
	{
		pI2CHandle->pI2Cx->ICR |= (1U << 12);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	69da      	ldr	r2, [r3, #28]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800072e:	61da      	str	r2, [r3, #28]
		I2C_ApplicationEventCallBack(pI2CHandle, I2C_ERROR_TIMEOUT);
 8000730:	2107      	movs	r1, #7
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 fbee 	bl	8000f14 <I2C_ApplicationEventCallBack>
	}
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <I2C_ManageAcking>:

void I2C_ManageAcking(I2C_RegDef_t * pI2Cx,uint8_t state)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	if(ENABLE == state)
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d106      	bne.n	8000760 <I2C_ManageAcking+0x20>
	{
		pI2Cx->CR1 |= (1<< I2C_CR1_ACK);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	601a      	str	r2, [r3, #0]
	}
	else if (DISABLE == state)
	{
		pI2Cx->CR1 &= ~(1<< I2C_CR1_ACK);
	}
}
 800075e:	e008      	b.n	8000772 <I2C_ManageAcking+0x32>
	else if (DISABLE == state)
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d105      	bne.n	8000772 <I2C_ManageAcking+0x32>
		pI2Cx->CR1 &= ~(1<< I2C_CR1_ACK);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <I2C_GenerateStartCondition>:
void I2C_GenerateStartCondition(I2C_RegDef_t * pI2Cx)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	pI2Cx->CR2 |= (1<<13);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	605a      	str	r2, [r3, #4]
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <I2C_GenerateStopCondition>:
void I2C_GenerateStopCondition(I2C_RegDef_t * pI2Cx)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR2 |= (1<<14);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	605a      	str	r2, [r3, #4]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <I2C_MasterHandleRXNEInterrupt>:
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle )
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b082      	sub	sp, #8
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->rxBufSize == 1)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d10d      	bne.n	80007ea <I2C_MasterHandleRXNEInterrupt+0x2c>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->RXDR;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
		pI2CHandle->rxBufLen--;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	7c5b      	ldrb	r3, [r3, #17]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	745a      	strb	r2, [r3, #17]
 80007e8:	e01f      	b.n	800082a <I2C_MasterHandleRXNEInterrupt+0x6c>
	}
	else if(pI2CHandle->rxBufSize > 1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d91b      	bls.n	800082a <I2C_MasterHandleRXNEInterrupt+0x6c>
	{
		if(pI2CHandle->rxBufLen == 2) I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7c5b      	ldrb	r3, [r3, #17]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d105      	bne.n	8000806 <I2C_MasterHandleRXNEInterrupt+0x48>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff9d 	bl	8000740 <I2C_ManageAcking>

		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->RXDR;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60da      	str	r2, [r3, #12]
		pI2CHandle->rxBufLen--;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7c5b      	ldrb	r3, [r3, #17]
 8000822:	3b01      	subs	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	745a      	strb	r2, [r3, #17]
	}

	if(pI2CHandle->rxBufLen == 0)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7c5b      	ldrb	r3, [r3, #17]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10f      	bne.n	8000852 <I2C_MasterHandleRXNEInterrupt+0x94>
	{
		if(pI2CHandle->startRepeat == I2C_SR_DISABLE)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	7e1b      	ldrb	r3, [r3, #24]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d104      	bne.n	8000844 <I2C_MasterHandleRXNEInterrupt+0x86>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffad 	bl	800079e <I2C_GenerateStopCondition>
		}

		I2C_CloseReceiveData(pI2CHandle);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fe64 	bl	8000512 <I2C_CloseReceiveData>
		I2C_ApplicationEventCallBack(pI2CHandle,I2C_EV_RX_CMPLT);
 800084a:	2101      	movs	r1, #1
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fb61 	bl	8000f14 <I2C_ApplicationEventCallBack>
	}
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <I2C_MasterHandleTXEInterrupt>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle )
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->txBufLen > 0)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7c1b      	ldrb	r3, [r3, #16]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d010      	beq.n	800088c <I2C_MasterHandleTXEInterrupt+0x32>
	{
		pI2CHandle->pI2Cx->TXDR = *(pI2CHandle->pTxBuffer);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
		pI2CHandle->pTxBuffer++;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	609a      	str	r2, [r3, #8]
		pI2CHandle->txBufLen--;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7c1b      	ldrb	r3, [r3, #16]
 8000884:	3b01      	subs	r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	741a      	strb	r2, [r3, #16]
	}
	else
	{

	}
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	for(uint32_t i = 0 ; i < Len; i++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e031      	b.n	800090e <USART_SendData+0x76>
	{
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80008aa:	bf00      	nop
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f83e 	bl	8000934 <USART_GetFlagStatus>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f6      	beq.n	80008ac <USART_SendData+0x14>

		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	7b5b      	ldrb	r3, [r3, #13]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d118      	bne.n	80008f8 <USART_SendData+0x60>
		{
			pdata = (uint16_t*) pTxBuffer;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28

			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	7b9b      	ldrb	r3, [r3, #14]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d106      	bne.n	80008f0 <USART_SendData+0x58>
			{
				pTxBuffer++;
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	e00b      	b.n	8000908 <USART_SendData+0x70>

			}
			else
			{
				pTxBuffer++;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	e007      	b.n	8000908 <USART_SendData+0x70>
			}
		}
		else
		{

			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28
			pTxBuffer++;
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	3301      	adds	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	429a      	cmp	r2, r3
 8000914:	d3c9      	bcc.n	80008aa <USART_SendData+0x12>
		}
	}
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000916:	bf00      	nop
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2140      	movs	r1, #64	@ 0x40
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f808 	bl	8000934 <USART_GetFlagStatus>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0f6      	beq.n	8000918 <USART_SendData+0x80>
}
 800092a:	bf00      	nop
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <USART_GetFlagStatus>:
	}
}


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx,uint8_t StatusFlagName)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx ->ISR & StatusFlagName)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	78fb      	ldrb	r3, [r7, #3]
 8000946:	4013      	ands	r3, r2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 800094c:	2301      	movs	r3, #1
 800094e:	e000      	b.n	8000952 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <GPIO_PeriClockControl>:
* Function name      : void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
* Description        : This Function is Enable and Disable peripheral clock
*
*********************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *GPIOx_p, uint8_t state_u8)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
	/* Check if the requested state is ENABLE */
	if(ENABLE == state_u8)
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d157      	bne.n	8000a22 <GPIO_PeriClockControl+0xc2>
	{
	    /* If GPIOx_p points to GPIOA peripheral */
	    if(GPIOA == GPIOx_p)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000978:	d106      	bne.n	8000988 <GPIO_PeriClockControl+0x28>
	    {
	        /* Enable clock for GPIOA */
	        GPIOA_PCLK_EN();
 800097a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097e:	4a59      	ldr	r2, [pc, #356]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* If state_u8 is neither ENABLE nor DISABLE */
	else
	{
	    /* Do nothing */
	}
}
 8000986:	e0a6      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a57      	ldr	r2, [pc, #348]	@ (8000ae8 <GPIO_PeriClockControl+0x188>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d106      	bne.n	800099e <GPIO_PeriClockControl+0x3e>
	        GPIOB_PCLK_EN();
 8000990:	4b54      	ldr	r3, [pc, #336]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000994:	4a53      	ldr	r2, [pc, #332]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800099c:	e09b      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a52      	ldr	r2, [pc, #328]	@ (8000aec <GPIO_PeriClockControl+0x18c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d106      	bne.n	80009b4 <GPIO_PeriClockControl+0x54>
	        GPIOC_PCLK_EN();
 80009a6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a4e      	ldr	r2, [pc, #312]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009b2:	e090      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a4e      	ldr	r2, [pc, #312]	@ (8000af0 <GPIO_PeriClockControl+0x190>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d106      	bne.n	80009ca <GPIO_PeriClockControl+0x6a>
	        GPIOD_PCLK_EN();
 80009bc:	4b49      	ldr	r3, [pc, #292]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c0:	4a48      	ldr	r2, [pc, #288]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009c8:	e085      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a49      	ldr	r2, [pc, #292]	@ (8000af4 <GPIO_PeriClockControl+0x194>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d106      	bne.n	80009e0 <GPIO_PeriClockControl+0x80>
	        GPIOE_PCLK_EN();
 80009d2:	4b44      	ldr	r3, [pc, #272]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a43      	ldr	r2, [pc, #268]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009de:	e07a      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a45      	ldr	r2, [pc, #276]	@ (8000af8 <GPIO_PeriClockControl+0x198>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d106      	bne.n	80009f6 <GPIO_PeriClockControl+0x96>
	        GPIOF_PCLK_EN();
 80009e8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a3d      	ldr	r2, [pc, #244]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 80009ee:	f043 0320 	orr.w	r3, r3, #32
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80009f4:	e06f      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a40      	ldr	r2, [pc, #256]	@ (8000afc <GPIO_PeriClockControl+0x19c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <GPIO_PeriClockControl+0xac>
	        GPIOG_PCLK_EN();
 80009fe:	4b39      	ldr	r3, [pc, #228]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a38      	ldr	r2, [pc, #224]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a0a:	e064      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b00 <GPIO_PeriClockControl+0x1a0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d160      	bne.n	8000ad6 <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_EN();
 8000a14:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a18:	4a32      	ldr	r2, [pc, #200]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a20:	e059      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	else if(DISABLE == state_u8)
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d156      	bne.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    if(GPIOA == GPIOx_p)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a2e:	d106      	bne.n	8000a3e <GPIO_PeriClockControl+0xde>
	        GPIOA_PCLK_DI();
 8000a30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a36:	f023 0301 	bic.w	r3, r3, #1
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a3c:	e04b      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOB == GPIOx_p)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a29      	ldr	r2, [pc, #164]	@ (8000ae8 <GPIO_PeriClockControl+0x188>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <GPIO_PeriClockControl+0xf4>
	        GPIOB_PCLK_DI();
 8000a46:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a52:	e040      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOC == GPIOx_p)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a25      	ldr	r2, [pc, #148]	@ (8000aec <GPIO_PeriClockControl+0x18c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <GPIO_PeriClockControl+0x10a>
	        GPIOC_PCLK_DI();
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a62:	f023 0304 	bic.w	r3, r3, #4
 8000a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a68:	e035      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOD == GPIOx_p)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	@ (8000af0 <GPIO_PeriClockControl+0x190>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <GPIO_PeriClockControl+0x120>
	        GPIOD_PCLK_DI();
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a78:	f023 0308 	bic.w	r3, r3, #8
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a7e:	e02a      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOE  == GPIOx_p)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	@ (8000af4 <GPIO_PeriClockControl+0x194>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <GPIO_PeriClockControl+0x136>
	        GPIOE_PCLK_DI();
 8000a88:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000a8e:	f023 0310 	bic.w	r3, r3, #16
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000a94:	e01f      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOF == GPIOx_p)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <GPIO_PeriClockControl+0x198>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <GPIO_PeriClockControl+0x14c>
	        GPIOF_PCLK_DI();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000aa4:	f023 0320 	bic.w	r3, r3, #32
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000aaa:	e014      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOG == GPIOx_p)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <GPIO_PeriClockControl+0x19c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d106      	bne.n	8000ac2 <GPIO_PeriClockControl+0x162>
	        GPIOG_PCLK_DI();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000ac0:	e009      	b.n	8000ad6 <GPIO_PeriClockControl+0x176>
	    else if(GPIOH == GPIOx_p)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <GPIO_PeriClockControl+0x1a0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d105      	bne.n	8000ad6 <GPIO_PeriClockControl+0x176>
	        GPIOH_PCLK_DI();
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <GPIO_PeriClockControl+0x184>)
 8000ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	48000800 	.word	0x48000800
 8000af0:	48000c00 	.word	0x48000c00
 8000af4:	48001000 	.word	0x48001000
 8000af8:	48001400 	.word	0x48001400
 8000afc:	48001800 	.word	0x48001800
 8000b00:	48001c00 	.word	0x48001c00

08000b04 <GPIO_Init>:
* Function name      : void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
* Description        : This Function to initialize the gpio port
*
*********************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	/* Temporary variable used for bit manipulations */
	uint32_t temp =0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
	/* Enable the GPIO Peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff22 	bl	8000960 <GPIO_PeriClockControl>
	/* Check if the pin mode is input/output/analog (non-interrupt modes) */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	795b      	ldrb	r3, [r3, #5]
 8000b20:	2b03      	cmp	r3, #3
 8000b22:	d822      	bhi.n	8000b6a <GPIO_Init+0x66>
	{
	    /* Prepare the mode value: shift mode into correct position for the pin */
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	795b      	ldrb	r3, [r3, #5]
 8000b28:	461a      	mov	r2, r3
	            << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
	    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b34:	617b      	str	r3, [r7, #20]

	    /* Clear the two mode bits for this pin in MODER register */
	    pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	2103      	movs	r1, #3
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	400a      	ands	r2, r1
 8000b52:	601a      	str	r2, [r3, #0]

	    /* Write the new mode bits for this pin */
	    pGPIOHandle->pGPIOx->MODER |= temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6819      	ldr	r1, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	430a      	orrs	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]

	    /* Reset temp variable */
	    temp = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e0e1      	b.n	8000d2e <GPIO_Init+0x22a>
	}
	else
	{

		/* Prepare the mode value: shift mode into correct position for the pin */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	795b      	ldrb	r3, [r3, #5]
 8000b6e:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000b7a:	617b      	str	r3, [r7, #20]

		/* Clear the two mode bits for this pin in MODER register */
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	791b      	ldrb	r3, [r3, #4]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2103      	movs	r1, #3
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	400a      	ands	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]

		/* Write the new mode bits for this pin */
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6819      	ldr	r1, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]

		/* Reset temp variable */
		temp = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
	    /* For interrupt modes: configuration will be handled separately here */
		if( GPIO_MODE_IT_FI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	d117      	bne.n	8000be6 <GPIO_Init+0xe2>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000bb6:	4b47      	ldr	r3, [pc, #284]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	7912      	ldrb	r2, [r2, #4]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	408a      	lsls	r2, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a43      	ldr	r2, [pc, #268]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000bcc:	4b41      	ldr	r3, [pc, #260]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	7912      	ldrb	r2, [r2, #4]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	408a      	lsls	r2, r1
 8000bda:	43d2      	mvns	r2, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a3d      	ldr	r2, [pc, #244]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000be0:	400b      	ands	r3, r1
 8000be2:	6093      	str	r3, [r2, #8]
 8000be4:	e035      	b.n	8000c52 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	795b      	ldrb	r3, [r3, #5]
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	d117      	bne.n	8000c1e <GPIO_Init+0x11a>
		{
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000bee:	4b39      	ldr	r3, [pc, #228]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	7912      	ldrb	r2, [r2, #4]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	408a      	lsls	r2, r1
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a35      	ldr	r2, [pc, #212]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c04:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	7912      	ldrb	r2, [r2, #4]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	2201      	movs	r2, #1
 8000c10:	408a      	lsls	r2, r1
 8000c12:	43d2      	mvns	r2, r2
 8000c14:	4611      	mov	r1, r2
 8000c16:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c18:	400b      	ands	r3, r1
 8000c1a:	60d3      	str	r3, [r2, #12]
 8000c1c:	e019      	b.n	8000c52 <GPIO_Init+0x14e>

		}
		else if(GPIO_MODE_IT_RFI == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	795b      	ldrb	r3, [r3, #5]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d115      	bne.n	8000c52 <GPIO_Init+0x14e>
		{
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c26:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	7912      	ldrb	r2, [r2, #4]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	2201      	movs	r2, #1
 8000c32:	408a      	lsls	r2, r1
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a27      	ldr	r2, [pc, #156]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000c3c:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	7912      	ldrb	r2, [r2, #4]
 8000c44:	4611      	mov	r1, r2
 8000c46:	2201      	movs	r2, #1
 8000c48:	408a      	lsls	r2, r1
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4a21      	ldr	r2, [pc, #132]	@ (8000cd4 <GPIO_Init+0x1d0>)
 8000c4e:	430b      	orrs	r3, r1
 8000c50:	6093      	str	r3, [r2, #8]
		}
		else
		{

		}
		uint8_t temp1    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2    = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	791b      	ldrb	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c6c:	d042      	beq.n	8000cf4 <GPIO_Init+0x1f0>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a19      	ldr	r2, [pc, #100]	@ (8000cd8 <GPIO_Init+0x1d4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d02b      	beq.n	8000cd0 <GPIO_Init+0x1cc>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <GPIO_Init+0x1d8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d024      	beq.n	8000ccc <GPIO_Init+0x1c8>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a16      	ldr	r2, [pc, #88]	@ (8000ce0 <GPIO_Init+0x1dc>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d01d      	beq.n	8000cc8 <GPIO_Init+0x1c4>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <GPIO_Init+0x1e0>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d016      	beq.n	8000cc4 <GPIO_Init+0x1c0>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ce8 <GPIO_Init+0x1e4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d00f      	beq.n	8000cc0 <GPIO_Init+0x1bc>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <GPIO_Init+0x1e8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d008      	beq.n	8000cbc <GPIO_Init+0x1b8>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a10      	ldr	r2, [pc, #64]	@ (8000cf0 <GPIO_Init+0x1ec>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <GPIO_Init+0x1b4>
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	e01e      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e01c      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	e01a      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	e018      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e016      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e014      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	e012      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e010      	b.n	8000cf6 <GPIO_Init+0x1f2>
 8000cd4:	40010400 	.word	0x40010400
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	48000800 	.word	0x48000800
 8000ce0:	48000c00 	.word	0x48000c00
 8000ce4:	48001000 	.word	0x48001000
 8000ce8:	48001400 	.word	0x48001400
 8000cec:	48001800 	.word	0x48001800
 8000cf0:	48001c00 	.word	0x48001c00
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e70 <GPIO_Init+0x36c>)
 8000cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfc:	4a5c      	ldr	r2, [pc, #368]	@ (8000e70 <GPIO_Init+0x36c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->EXTICR[temp1] = portCode << (temp2 * 4);
 8000d04:	7c7a      	ldrb	r2, [r7, #17]
 8000d06:	7cbb      	ldrb	r3, [r7, #18]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	fa02 f103 	lsl.w	r1, r2, r3
 8000d0e:	4a59      	ldr	r2, [pc, #356]	@ (8000e74 <GPIO_Init+0x370>)
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	3302      	adds	r3, #2
 8000d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000d18:	4b57      	ldr	r3, [pc, #348]	@ (8000e78 <GPIO_Init+0x374>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	7912      	ldrb	r2, [r2, #4]
 8000d20:	4611      	mov	r1, r2
 8000d22:	2201      	movs	r2, #1
 8000d24:	408a      	lsls	r2, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	4a53      	ldr	r2, [pc, #332]	@ (8000e78 <GPIO_Init+0x374>)
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	6013      	str	r3, [r2, #0]
	}

	/* ---------------- Pin Speed Configuration ---------------- */

	/* Reset temp variable */
	temp = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

	/* Prepare speed value: shift speed into correct position for the pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 8000d42:	617b      	str	r3, [r7, #20]

	/* Clear the two speed bits for this pin in OSPEEDR register */
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2103      	movs	r1, #3
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	400a      	ands	r2, r1
 8000d60:	609a      	str	r2, [r3, #8]

	/* Write the new speed bits */
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6899      	ldr	r1, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]

	/* Reset temp */
	temp = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]

	/* ---------------- Pull-up / Pull-down Configuration ---------------- */

	/* Prepare pull-up/pull-down config */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	79db      	ldrb	r3, [r3, #7]
 8000d7a:	461a      	mov	r2, r3
	        << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	791b      	ldrb	r3, [r3, #4]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 8000d86:	617b      	str	r3, [r7, #20]

	/* Clear the two PUPDR bits for this pin */
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2103      	movs	r1, #3
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	400a      	ands	r2, r1
 8000da4:	60da      	str	r2, [r3, #12]

	/* Write new PUPDR value */
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68d9      	ldr	r1, [r3, #12]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	60da      	str	r2, [r3, #12]

	/* Reset temp */
	temp = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]

	/* ---------------- Output Type Configuration ---------------- */

	/* Prepare output type (push-pull or open-drain) */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7a1b      	ldrb	r3, [r3, #8]
 8000dbe:	461a      	mov	r2, r3
	        << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8000dc8:	617b      	str	r3, [r7, #20]

	/* Clear the OTYPER bit for this pin */
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x01 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	4619      	mov	r1, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	400a      	ands	r2, r1
 8000de4:	605a      	str	r2, [r3, #4]

	/* Write new OTYPER value */
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	6859      	ldr	r1, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	605a      	str	r2, [r3, #4]

	/* Reset temp */
	temp = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

	/* ---------------- Alternate Function Configuration ---------------- */

	/* If mode is alternate function */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	795b      	ldrb	r3, [r3, #5]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d132      	bne.n	8000e68 <GPIO_Init+0x364>
	{
	    /* temp1: index of AFR register (0 = AFR[0] for pins 0–7, 1 = AFR[1] for pins 8–15) */
	    uint32_t temp1, temp2;

	    /* Which AFR register to use */
	    temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	08db      	lsrs	r3, r3, #3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	60fb      	str	r3, [r7, #12]

	    /* Position inside that AFR register */
	    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	791b      	ldrb	r3, [r3, #4]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	60bb      	str	r3, [r7, #8]

	    /* Clear the 4 bits for this pin’s alternate function */
	    pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0x0F << (4 * temp2));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	210f      	movs	r1, #15
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4011      	ands	r1, r2
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	    /* Set the new alternate function mode */
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	3208      	adds	r2, #8
 8000e46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	        (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a5b      	ldrb	r3, [r3, #9]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	4619      	mov	r1, r3
	    pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4311      	orrs	r1, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	3208      	adds	r2, #8
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40010400 	.word	0x40010400

08000e7c <delay>:
I2C_Handle_t I2C1Handle;
USART_Handle_t usart2_handle;
uint8_t I2C_txData[] = "Hai.. ESP32";

void delay(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
    for(uint32_t i = 0 ; i < 250000 ; i++);
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e002      	b.n	8000e8e <delay+0x12>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <delay+0x28>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d9f8      	bls.n	8000e88 <delay+0xc>
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	0003d08f 	.word	0x0003d08f

08000ea8 <I2C1_GPIOInit>:
    usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
    usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
    USART_Init(&usart2_handle);
}
void I2C1_GPIOInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2Cpins;

	I2Cpins.pGPIOx = GPIOB;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <I2C1_GPIOInit+0x40>)
 8000eb0:	607b      	str	r3, [r7, #4]
	I2Cpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	727b      	strb	r3, [r7, #9]
	I2Cpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	733b      	strb	r3, [r7, #12]
	I2Cpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	72fb      	strb	r3, [r7, #11]
	I2Cpins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	737b      	strb	r3, [r7, #13]
	I2Cpins.GPIO_PinConfig.GPIO_PinSpeed      = GPIO_SPEED_FAST;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	72bb      	strb	r3, [r7, #10]

	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6; // SCK
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe19 	bl	8000b04 <GPIO_Init>

	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7; // SDA
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fe13 	bl	8000b04 <GPIO_Init>
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	48000400 	.word	0x48000400

08000eec <I2C1_Init>:

void I2C1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <I2C1_Init+0x20>)
 8000ef2:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <I2C1_Init+0x24>)
 8000ef4:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <I2C1_Init+0x20>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = I2C_MASTERADDR;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <I2C1_Init+0x20>)
 8000efe:	2261      	movs	r2, #97	@ 0x61
 8000f00:	711a      	strb	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000f02:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <I2C1_Init+0x20>)
 8000f04:	f7ff f9de 	bl	80002c4 <I2C_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000028 	.word	0x20000028
 8000f10:	40005400 	.word	0x40005400

08000f14 <I2C_ApplicationEventCallBack>:
void I2C_ApplicationEventCallBack(I2C_Handle_t *pI2CHandle, uint8_t AppEv)
{
 8000f14:	b5b0      	push	{r4, r5, r7, lr}
 8000f16:	b08e      	sub	sp, #56	@ 0x38
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
    if(AppEv == I2C_EV_TX_CMPLT)
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11d      	bne.n	8000f62 <I2C_ApplicationEventCallBack+0x4e>
    {
        uint8_t msg1[] = "[I2C] TX Complete Interrupt Triggered\r\n";
 8000f26:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <I2C_ApplicationEventCallBack+0x80>)
 8000f28:	f107 0408 	add.w	r4, r7, #8
 8000f2c:	461d      	mov	r5, r3
 8000f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f3a:	e884 0003 	stmia.w	r4, {r0, r1}
        USART_SendData(&usart2_handle, msg1, sizeof(msg1)-1);
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2227      	movs	r2, #39	@ 0x27
 8000f44:	4619      	mov	r1, r3
 8000f46:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <I2C_ApplicationEventCallBack+0x84>)
 8000f48:	f7ff fca6 	bl	8000898 <USART_SendData>

        delay();
 8000f4c:	f7ff ff96 	bl	8000e7c <delay>
        // Send data again in interrupt mode
        I2C_MasterTransmitDataIT(pI2CHandle, I2C_txData, sizeof(I2C_txData)-1, I2C_SLAVEADDR, 0);
 8000f50:	2300      	movs	r3, #0
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2368      	movs	r3, #104	@ 0x68
 8000f56:	220b      	movs	r2, #11
 8000f58:	4910      	ldr	r1, [pc, #64]	@ (8000f9c <I2C_ApplicationEventCallBack+0x88>)
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fa52 	bl	8000404 <I2C_MasterTransmitDataIT>
    else if(AppEv == I2C_ERROR_AF)
    {
        uint8_t msg2[] = "[I2C] NACK Received (AF Error)\r\n";
        USART_SendData(&usart2_handle, msg2, sizeof(msg2)-1);
    }
}
 8000f60:	e013      	b.n	8000f8a <I2C_ApplicationEventCallBack+0x76>
    else if(AppEv == I2C_ERROR_AF)
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d110      	bne.n	8000f8a <I2C_ApplicationEventCallBack+0x76>
        uint8_t msg2[] = "[I2C] NACK Received (AF Error)\r\n";
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <I2C_ApplicationEventCallBack+0x8c>)
 8000f6a:	f107 0408 	add.w	r4, r7, #8
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	7023      	strb	r3, [r4, #0]
        USART_SendData(&usart2_handle, msg2, sizeof(msg2)-1);
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	2220      	movs	r2, #32
 8000f82:	4619      	mov	r1, r3
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <I2C_ApplicationEventCallBack+0x84>)
 8000f86:	f7ff fc87 	bl	8000898 <USART_SendData>
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	@ 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	080010c4 	.word	0x080010c4
 8000f98:	20000044 	.word	0x20000044
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	080010ec 	.word	0x080010ec

08000fa4 <main>:
/*I2C*/
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af02      	add	r7, sp, #8
	I2C_PeriClockControl(I2C1, ENABLE);
 8000faa:	2101      	movs	r1, #1
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <main+0x38>)
 8000fae:	f7ff f90d 	bl	80001cc <I2C_PeriClockControl>
	I2C1_GPIOInit();
 8000fb2:	f7ff ff79 	bl	8000ea8 <I2C1_GPIOInit>
	I2C1_Init();
 8000fb6:	f7ff ff99 	bl	8000eec <I2C1_Init>
	I2C_PeripheralControl(I2C1, ENABLE);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <main+0x38>)
 8000fbe:	f7ff f961 	bl	8000284 <I2C_PeripheralControl>
    while(1)
    {
    	I2C_MasterTransmitData(&I2C1Handle, I2C_txData, sizeof(I2C_txData)-1, I2C_SLAVEADDR, 0);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2368      	movs	r3, #104	@ 0x68
 8000fc8:	220b      	movs	r2, #11
 8000fca:	4905      	ldr	r1, [pc, #20]	@ (8000fe0 <main+0x3c>)
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <main+0x40>)
 8000fce:	f7ff f9a9 	bl	8000324 <I2C_MasterTransmitData>
    	delay();
 8000fd2:	f7ff ff53 	bl	8000e7c <delay>
    	I2C_MasterTransmitData(&I2C1Handle, I2C_txData, sizeof(I2C_txData)-1, I2C_SLAVEADDR, 0);
 8000fd6:	bf00      	nop
 8000fd8:	e7f3      	b.n	8000fc2 <main+0x1e>
 8000fda:	bf00      	nop
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000028 	.word	0x20000028

08000fe8 <I2C1_EV_IRQHandler>:
    }
}
*/
// ------------------- IRQ Handlers -------------------
void I2C1_EV_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
    I2C_EV_IRQHandling(&I2C1Handle); // Handle I2C event interrupt
 8000fec:	4802      	ldr	r0, [pc, #8]	@ (8000ff8 <I2C1_EV_IRQHandler+0x10>)
 8000fee:	f7ff fabe 	bl	800056e <I2C_EV_IRQHandling>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000028 	.word	0x20000028

08000ffc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    I2C_ER_IRQHandling(&I2C1Handle); // Handle I2C error interrupt
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <I2C1_ER_IRQHandler+0x10>)
 8001002:	f7ff fb1f 	bl	8000644 <I2C_ER_IRQHandling>
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000028 	.word	0x20000028

08001010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001012:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001014:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800103e:	f000 f811 	bl	8001064 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001042:	f7ff ffaf 	bl	8000fa4 <main>

08001046 <LoopForever>:

LoopForever:
  b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   r0, =_estack
 8001048:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001054:	08001118 	.word	0x08001118
  ldr r2, =_sbss
 8001058:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800105c:	20000068 	.word	0x20000068

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>
	...

08001064 <__libc_init_array>:
 8001064:	b570      	push	{r4, r5, r6, lr}
 8001066:	4d0d      	ldr	r5, [pc, #52]	@ (800109c <__libc_init_array+0x38>)
 8001068:	4c0d      	ldr	r4, [pc, #52]	@ (80010a0 <__libc_init_array+0x3c>)
 800106a:	1b64      	subs	r4, r4, r5
 800106c:	10a4      	asrs	r4, r4, #2
 800106e:	2600      	movs	r6, #0
 8001070:	42a6      	cmp	r6, r4
 8001072:	d109      	bne.n	8001088 <__libc_init_array+0x24>
 8001074:	4d0b      	ldr	r5, [pc, #44]	@ (80010a4 <__libc_init_array+0x40>)
 8001076:	4c0c      	ldr	r4, [pc, #48]	@ (80010a8 <__libc_init_array+0x44>)
 8001078:	f000 f818 	bl	80010ac <_init>
 800107c:	1b64      	subs	r4, r4, r5
 800107e:	10a4      	asrs	r4, r4, #2
 8001080:	2600      	movs	r6, #0
 8001082:	42a6      	cmp	r6, r4
 8001084:	d105      	bne.n	8001092 <__libc_init_array+0x2e>
 8001086:	bd70      	pop	{r4, r5, r6, pc}
 8001088:	f855 3b04 	ldr.w	r3, [r5], #4
 800108c:	4798      	blx	r3
 800108e:	3601      	adds	r6, #1
 8001090:	e7ee      	b.n	8001070 <__libc_init_array+0xc>
 8001092:	f855 3b04 	ldr.w	r3, [r5], #4
 8001096:	4798      	blx	r3
 8001098:	3601      	adds	r6, #1
 800109a:	e7f2      	b.n	8001082 <__libc_init_array+0x1e>
 800109c:	08001110 	.word	0x08001110
 80010a0:	08001110 	.word	0x08001110
 80010a4:	08001110 	.word	0x08001110
 80010a8:	08001114 	.word	0x08001114

080010ac <_init>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr

080010b8 <_fini>:
 80010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ba:	bf00      	nop
 80010bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010be:	bc08      	pop	{r3}
 80010c0:	469e      	mov	lr, r3
 80010c2:	4770      	bx	lr
