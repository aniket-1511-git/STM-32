
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080044f8  080044f8  000054f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004540  08004540  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004540  08004540  00005540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004548  08004548  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00005548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08004550  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000001c  0800456c  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  0800456c  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c368  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d32  00000000  00000000  000123b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  000140e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000789  00000000  00000000  00014ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c8f  00000000  00000000  00015249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0cc  00000000  00000000  0003aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78dc  00000000  00000000  00046fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  0012e8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0013101c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044e0 	.word	0x080044e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080044e0 	.word	0x080044e0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800050c:	2120      	movs	r1, #32
 800050e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000512:	f001 f87b 	bl	800160c <HAL_GPIO_TogglePin>
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, dataRx, sizeof(dataRx), HAL_MAX_DELAY);
 8000528:	f04f 33ff 	mov.w	r3, #4294967295
 800052c:	2205      	movs	r2, #5
 800052e:	4906      	ldr	r1, [pc, #24]	@ (8000548 <HAL_UART_RxCpltCallback+0x28>)
 8000530:	4806      	ldr	r0, [pc, #24]	@ (800054c <HAL_UART_RxCpltCallback+0x2c>)
 8000532:	f002 fbf3 	bl	8002d1c <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart2, dataRx, sizeof(dataRx));
 8000536:	2205      	movs	r2, #5
 8000538:	4903      	ldr	r1, [pc, #12]	@ (8000548 <HAL_UART_RxCpltCallback+0x28>)
 800053a:	4804      	ldr	r0, [pc, #16]	@ (800054c <HAL_UART_RxCpltCallback+0x2c>)
 800053c:	f002 fcf4 	bl	8002f28 <HAL_UART_Receive_DMA>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000038 	.word	0x20000038
 800054c:	20000040 	.word	0x20000040

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fa94 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f81e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8c4 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000560:	f000 f89c 	bl	800069c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000564:	f000 f86a 	bl	800063c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  HAL_UART_Transmit_DMA(&huart2, dataTx, strlen((char*)dataTx));
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <main+0x3c>)
 800056a:	f7ff fe2d 	bl	80001c8 <strlen>
 800056e:	4603      	mov	r3, r0
 8000570:	b29b      	uxth	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	4905      	ldr	r1, [pc, #20]	@ (800058c <main+0x3c>)
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <main+0x40>)
 8000578:	f002 fc5a 	bl	8002e30 <HAL_UART_Transmit_DMA>

  HAL_UART_Receive_DMA(&huart2, dataRx, sizeof(dataRx));
 800057c:	2205      	movs	r2, #5
 800057e:	4905      	ldr	r1, [pc, #20]	@ (8000594 <main+0x44>)
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <main+0x40>)
 8000582:	f002 fcd1 	bl	8002f28 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	bf00      	nop
 8000588:	e7fd      	b.n	8000586 <main+0x36>
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000
 8000590:	20000040 	.word	0x20000040
 8000594:	20000038 	.word	0x20000038

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	@ 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	@ 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 ff6d 	bl	8004486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005be:	f001 f84d 	bl	800165c <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c8:	f000 f8e4 	bl	8000794 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2310      	movs	r3, #16
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005e6:	230a      	movs	r3, #10
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f884 	bl	8001708 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000606:	f000 f8c5 	bl	8000794 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2303      	movs	r3, #3
 8000610:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fc4c 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800062e:	f000 f8b1 	bl	8000794 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3758      	adds	r7, #88	@ 0x58
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	f002 fafe 	bl	8002c80 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068a:	f000 f883 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000040 	.word	0x20000040
 8000698:	40004400 	.word	0x40004400

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_DMA_Init+0x48>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006a6:	4a0f      	ldr	r2, [pc, #60]	@ (80006e4 <MX_DMA_Init+0x48>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_DMA_Init+0x48>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 fb35 	bl	8000d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006c4:	2010      	movs	r0, #16
 80006c6:	f000 fb4e 	bl	8000d66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2011      	movs	r0, #17
 80006d0:	f000 fb2d 	bl	8000d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006d4:	2011      	movs	r0, #17
 80006d6:	f000 fb46 	bl	8000d66 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a23      	ldr	r2, [pc, #140]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070a:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_GPIO_Init+0xa8>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a1d      	ldr	r2, [pc, #116]	@ (8000790 <MX_GPIO_Init+0xa8>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_GPIO_Init+0xa8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <MX_GPIO_Init+0xa8>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_GPIO_Init+0xa8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f000 ff39 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 fd80 	bl	8001288 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <Error_Handler+0x8>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007aa:	4a0e      	ldr	r2, [pc, #56]	@ (80007e4 <HAL_MspInit+0x44>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007b2:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <HAL_MspInit+0x44>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b0ac      	sub	sp, #176	@ 0xb0
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	2288      	movs	r2, #136	@ 0x88
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fe3c 	bl	8004486 <memset>
  if(huart->Instance==USART2)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a50      	ldr	r2, [pc, #320]	@ (8000954 <HAL_UART_MspInit+0x16c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	f040 8098 	bne.w	800094a <HAL_UART_MspInit+0x162>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800081a:	2302      	movs	r3, #2
 800081c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800081e:	2300      	movs	r3, #0
 8000820:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd6e 	bl	8002308 <HAL_RCCEx_PeriphCLKConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000832:	f7ff ffaf 	bl	8000794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000836:	4b48      	ldr	r3, [pc, #288]	@ (8000958 <HAL_UART_MspInit+0x170>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	4a47      	ldr	r2, [pc, #284]	@ (8000958 <HAL_UART_MspInit+0x170>)
 800083c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000840:	6593      	str	r3, [r2, #88]	@ 0x58
 8000842:	4b45      	ldr	r3, [pc, #276]	@ (8000958 <HAL_UART_MspInit+0x170>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b42      	ldr	r3, [pc, #264]	@ (8000958 <HAL_UART_MspInit+0x170>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a41      	ldr	r2, [pc, #260]	@ (8000958 <HAL_UART_MspInit+0x170>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <HAL_UART_MspInit+0x170>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000866:	230c      	movs	r3, #12
 8000868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800087e:	2307      	movs	r3, #7
 8000880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000888:	4619      	mov	r1, r3
 800088a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088e:	f000 fcfb 	bl	8001288 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000892:	4b32      	ldr	r3, [pc, #200]	@ (800095c <HAL_UART_MspInit+0x174>)
 8000894:	4a32      	ldr	r2, [pc, #200]	@ (8000960 <HAL_UART_MspInit+0x178>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000898:	4b30      	ldr	r3, [pc, #192]	@ (800095c <HAL_UART_MspInit+0x174>)
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089e:	4b2f      	ldr	r3, [pc, #188]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008a0:	2210      	movs	r2, #16
 80008a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a4:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008aa:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008b0:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008b6:	4b29      	ldr	r3, [pc, #164]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008bc:	4b27      	ldr	r3, [pc, #156]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008ca:	4824      	ldr	r0, [pc, #144]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008cc:	f000 fa66 	bl	8000d9c <HAL_DMA_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80008d6:	f7ff ff5d 	bl	8000794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a1f      	ldr	r2, [pc, #124]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008de:	671a      	str	r2, [r3, #112]	@ 0x70
 80008e0:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <HAL_UART_MspInit+0x174>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 80008e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000968 <HAL_UART_MspInit+0x180>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000904:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000918:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800091c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800091e:	4811      	ldr	r0, [pc, #68]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000920:	f000 fa3c 	bl	8000d9c <HAL_DMA_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800092a:	f7ff ff33 	bl	8000794 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a0c      	ldr	r2, [pc, #48]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000932:	675a      	str	r2, [r3, #116]	@ 0x74
 8000934:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <HAL_UART_MspInit+0x17c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2026      	movs	r0, #38	@ 0x26
 8000940:	f000 f9f5 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000944:	2026      	movs	r0, #38	@ 0x26
 8000946:	f000 fa0e 	bl	8000d66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800094a:	bf00      	nop
 800094c:	37b0      	adds	r7, #176	@ 0xb0
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40004400 	.word	0x40004400
 8000958:	40021000 	.word	0x40021000
 800095c:	20000110 	.word	0x20000110
 8000960:	40020080 	.word	0x40020080
 8000964:	200000c8 	.word	0x200000c8
 8000968:	4002006c 	.word	0x4002006c

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f8b9 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009d0:	4802      	ldr	r0, [pc, #8]	@ (80009dc <DMA1_Channel6_IRQHandler+0x10>)
 80009d2:	f000 fb7a 	bl	80010ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c8 	.word	0x200000c8

080009e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009e4:	4802      	ldr	r0, [pc, #8]	@ (80009f0 <DMA1_Channel7_IRQHandler+0x10>)
 80009e6:	f000 fb70 	bl	80010ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000110 	.word	0x20000110

080009f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f8:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <USART2_IRQHandler+0x10>)
 80009fa:	f002 fae1 	bl	8002fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000040 	.word	0x20000040

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ffea 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	@ (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	@ (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f003 fd1d 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd77 	bl	8000550 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a70:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8000a74:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a78:	2000015c 	.word	0x2000015c

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <HAL_Init+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000abc <HAL_Init+0x3c>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f93e 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fe77 	bl	80007a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f949 	bl	8000d82 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f913 	bl	8000d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000018 	.word	0x20000018
 8000b30:	20000010 	.word	0x20000010
 8000b34:	20000014 	.word	0x20000014

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000018 	.word	0x20000018
 8000b5c:	20000158 	.word	0x20000158

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000158 	.word	0x20000158

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	@ (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	@ (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	@ 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e098      	b.n	8000ee0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b4d      	ldr	r3, [pc, #308]	@ (8000eec <HAL_DMA_Init+0x150>)
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d80f      	bhi.n	8000dda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef0 <HAL_DMA_Init+0x154>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef4 <HAL_DMA_Init+0x158>)
 8000dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	009a      	lsls	r2, r3, #2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	@ (8000ef8 <HAL_DMA_Init+0x15c>)
 8000dd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dd8:	e00e      	b.n	8000df8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b46      	ldr	r3, [pc, #280]	@ (8000efc <HAL_DMA_Init+0x160>)
 8000de2:	4413      	add	r3, r2
 8000de4:	4a43      	ldr	r2, [pc, #268]	@ (8000ef4 <HAL_DMA_Init+0x158>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	009a      	lsls	r2, r3, #2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a42      	ldr	r2, [pc, #264]	@ (8000f00 <HAL_DMA_Init+0x164>)
 8000df6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e52:	d039      	beq.n	8000ec8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a27      	ldr	r2, [pc, #156]	@ (8000ef8 <HAL_DMA_Init+0x15c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d11a      	bne.n	8000e94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e5e:	4b29      	ldr	r3, [pc, #164]	@ (8000f04 <HAL_DMA_Init+0x168>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f003 031c 	and.w	r3, r3, #28
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4924      	ldr	r1, [pc, #144]	@ (8000f04 <HAL_DMA_Init+0x168>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e78:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <HAL_DMA_Init+0x168>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6859      	ldr	r1, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e84:	f003 031c 	and.w	r3, r3, #28
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	491d      	ldr	r1, [pc, #116]	@ (8000f04 <HAL_DMA_Init+0x168>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
 8000e92:	e019      	b.n	8000ec8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e94:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_DMA_Init+0x16c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	f003 031c 	and.w	r3, r3, #28
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	4917      	ldr	r1, [pc, #92]	@ (8000f08 <HAL_DMA_Init+0x16c>)
 8000eaa:	4013      	ands	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <HAL_DMA_Init+0x16c>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f003 031c 	and.w	r3, r3, #28
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	4911      	ldr	r1, [pc, #68]	@ (8000f08 <HAL_DMA_Init+0x16c>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40020407 	.word	0x40020407
 8000ef0:	bffdfff8 	.word	0xbffdfff8
 8000ef4:	cccccccd 	.word	0xcccccccd
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	bffdfbf8 	.word	0xbffdfbf8
 8000f00:	40020400 	.word	0x40020400
 8000f04:	400200a8 	.word	0x400200a8
 8000f08:	400204a8 	.word	0x400204a8

08000f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_DMA_Start_IT+0x20>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e04b      	b.n	8000fc4 <HAL_DMA_Start_IT+0xb8>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d13a      	bne.n	8000fb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2202      	movs	r2, #2
 8000f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0201 	bic.w	r2, r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 f95f 	bl	8001228 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 020e 	orr.w	r2, r2, #14
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	e00f      	b.n	8000fa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0204 	bic.w	r2, r2, #4
 8000f92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 020a 	orr.w	r2, r2, #10
 8000fa2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e005      	b.n	8000fc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d008      	beq.n	8000ff6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e022      	b.n	800103c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020e 	bic.w	r2, r2, #14
 8001004:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f003 021c 	and.w	r2, r3, #28
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d005      	beq.n	800106c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2204      	movs	r2, #4
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	73fb      	strb	r3, [r7, #15]
 800106a:	e029      	b.n	80010c0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 020e 	bic.w	r2, r2, #14
 800107a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0201 	bic.w	r2, r2, #1
 800108a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001090:	f003 021c 	and.w	r2, r3, #28
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	2101      	movs	r1, #1
 800109a:	fa01 f202 	lsl.w	r2, r1, r2
 800109e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	4798      	blx	r3
    }
  }
  return status;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f003 031c 	and.w	r3, r3, #28
 80010ea:	2204      	movs	r2, #4
 80010ec:	409a      	lsls	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d026      	beq.n	8001144 <HAL_DMA_IRQHandler+0x7a>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d021      	beq.n	8001144 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	2b00      	cmp	r3, #0
 800110c:	d107      	bne.n	800111e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0204 	bic.w	r2, r2, #4
 800111c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f003 021c 	and.w	r2, r3, #28
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	2104      	movs	r1, #4
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	2b00      	cmp	r3, #0
 8001138:	d071      	beq.n	800121e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001142:	e06c      	b.n	800121e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	f003 031c 	and.w	r3, r3, #28
 800114c:	2202      	movs	r2, #2
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d02e      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xec>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d029      	beq.n	80011b6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10b      	bne.n	8001188 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 020a 	bic.w	r2, r2, #10
 800117e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118c:	f003 021c 	and.w	r2, r3, #28
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	2102      	movs	r1, #2
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d038      	beq.n	800121e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011b4:	e033      	b.n	800121e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f003 031c 	and.w	r3, r3, #28
 80011be:	2208      	movs	r2, #8
 80011c0:	409a      	lsls	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d02a      	beq.n	8001220 <HAL_DMA_IRQHandler+0x156>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d025      	beq.n	8001220 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020e 	bic.w	r2, r2, #14
 80011e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e8:	f003 021c 	and.w	r2, r3, #28
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001212:	2b00      	cmp	r3, #0
 8001214:	d004      	beq.n	8001220 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800121e:	bf00      	nop
 8001220:	bf00      	nop
}
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	f003 021c 	and.w	r2, r3, #28
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b10      	cmp	r3, #16
 8001258:	d108      	bne.n	800126c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800126a:	e007      	b.n	800127c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	60da      	str	r2, [r3, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	e17f      	b.n	8001598 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	4013      	ands	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8171 	beq.w	8001592 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d005      	beq.n	80012c8 <HAL_GPIO_Init+0x40>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d118      	bne.n	8001368 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800133c:	2201      	movs	r2, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	f003 0201 	and.w	r2, r3, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b03      	cmp	r3, #3
 8001372:	d017      	beq.n	80013a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d123      	bne.n	80013f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	6939      	ldr	r1, [r7, #16]
 80013f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0203 	and.w	r2, r3, #3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80ac 	beq.w	8001592 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b5f      	ldr	r3, [pc, #380]	@ (80015b8 <HAL_GPIO_Init+0x330>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143e:	4a5e      	ldr	r2, [pc, #376]	@ (80015b8 <HAL_GPIO_Init+0x330>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	@ 0x60
 8001446:	4b5c      	ldr	r3, [pc, #368]	@ (80015b8 <HAL_GPIO_Init+0x330>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001452:	4a5a      	ldr	r2, [pc, #360]	@ (80015bc <HAL_GPIO_Init+0x334>)
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800147c:	d025      	beq.n	80014ca <HAL_GPIO_Init+0x242>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	@ (80015c0 <HAL_GPIO_Init+0x338>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01f      	beq.n	80014c6 <HAL_GPIO_Init+0x23e>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	@ (80015c4 <HAL_GPIO_Init+0x33c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x23a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4d      	ldr	r2, [pc, #308]	@ (80015c8 <HAL_GPIO_Init+0x340>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x236>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4c      	ldr	r2, [pc, #304]	@ (80015cc <HAL_GPIO_Init+0x344>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x232>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	@ (80015d0 <HAL_GPIO_Init+0x348>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x22e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	@ (80015d4 <HAL_GPIO_Init+0x34c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x22a>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00c      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00a      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e008      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014be:	2303      	movs	r3, #3
 80014c0:	e004      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x244>
 80014ca:	2300      	movs	r3, #0
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	f002 0203 	and.w	r2, r2, #3
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	4093      	lsls	r3, r2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014dc:	4937      	ldr	r1, [pc, #220]	@ (80015bc <HAL_GPIO_Init+0x334>)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800150e:	4a32      	ldr	r2, [pc, #200]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001538:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	43db      	mvns	r3, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4013      	ands	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <HAL_GPIO_Init+0x350>)
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f47f ae78 	bne.w	8001298 <HAL_GPIO_Init+0x10>
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	48001000 	.word	0x48001000
 80015d0:	48001400 	.word	0x48001400
 80015d4:	48001800 	.word	0x48001800
 80015d8:	40010400 	.word	0x40010400

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	041a      	lsls	r2, r3, #16
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43d9      	mvns	r1, r3
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	400b      	ands	r3, r1
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <HAL_PWREx_GetVoltageRange+0x18>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40007000 	.word	0x40007000

0800165c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800166a:	d130      	bne.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800166c:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001678:	d038      	beq.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001682:	4a1e      	ldr	r2, [pc, #120]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001684:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001688:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800168a:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2232      	movs	r2, #50	@ 0x32
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	3301      	adds	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a0:	e002      	b.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b4:	d102      	bne.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f2      	bne.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016c8:	d110      	bne.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e00f      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016da:	d007      	beq.n	80016ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016e4:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40007000 	.word	0x40007000
 8001700:	20000010 	.word	0x20000010
 8001704:	431bde83 	.word	0x431bde83

08001708 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e3ca      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171a:	4b97      	ldr	r3, [pc, #604]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001724:	4b94      	ldr	r3, [pc, #592]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80e4 	beq.w	8001904 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d007      	beq.n	8001752 <HAL_RCC_OscConfig+0x4a>
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b0c      	cmp	r3, #12
 8001746:	f040 808b 	bne.w	8001860 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b01      	cmp	r3, #1
 800174e:	f040 8087 	bne.w	8001860 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001752:	4b89      	ldr	r3, [pc, #548]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_RCC_OscConfig+0x62>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e3a2      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	4b82      	ldr	r3, [pc, #520]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_RCC_OscConfig+0x7c>
 800177a:	4b7f      	ldr	r3, [pc, #508]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001782:	e005      	b.n	8001790 <HAL_RCC_OscConfig+0x88>
 8001784:	4b7c      	ldr	r3, [pc, #496]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001790:	4293      	cmp	r3, r2
 8001792:	d223      	bcs.n	80017dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fd55 	bl	8002248 <RCC_SetFlashLatencyFromMSIRange>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e383      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a8:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a72      	ldr	r2, [pc, #456]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b70      	ldr	r3, [pc, #448]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	496d      	ldr	r1, [pc, #436]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	4968      	ldr	r1, [pc, #416]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e025      	b.n	8001828 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017dc:	4b66      	ldr	r3, [pc, #408]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a65      	ldr	r2, [pc, #404]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b63      	ldr	r3, [pc, #396]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4960      	ldr	r1, [pc, #384]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	495b      	ldr	r1, [pc, #364]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fd15 	bl	8002248 <RCC_SetFlashLatencyFromMSIRange>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e343      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001828:	f000 fc4a 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b52      	ldr	r3, [pc, #328]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	4950      	ldr	r1, [pc, #320]	@ (800197c <HAL_RCC_OscConfig+0x274>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	4a4e      	ldr	r2, [pc, #312]	@ (8001980 <HAL_RCC_OscConfig+0x278>)
 8001846:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001848:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <HAL_RCC_OscConfig+0x27c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff f937 	bl	8000ac0 <HAL_InitTick>
 8001852:	4603      	mov	r3, r0
 8001854:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d052      	beq.n	8001902 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	e327      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d032      	beq.n	80018ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001868:	4b43      	ldr	r3, [pc, #268]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a42      	ldr	r2, [pc, #264]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001874:	f7ff f974 	bl	8000b60 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800187c:	f7ff f970 	bl	8000b60 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e310      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189a:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a36      	ldr	r2, [pc, #216]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b34      	ldr	r3, [pc, #208]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4931      	ldr	r1, [pc, #196]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	492c      	ldr	r1, [pc, #176]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e01a      	b.n	8001904 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018da:	f7ff f941 	bl	8000b60 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e2:	f7ff f93d 	bl	8000b60 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e2dd      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f4:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x1da>
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001902:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d074      	beq.n	80019fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x21a>
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d10e      	bne.n	800193a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d064      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d160      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e2ba      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x24a>
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e026      	b.n	80019a0 <HAL_RCC_OscConfig+0x298>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800195a:	d115      	bne.n	8001988 <HAL_RCC_OscConfig+0x280>
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 8001962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a02      	ldr	r2, [pc, #8]	@ (8001978 <HAL_RCC_OscConfig+0x270>)
 800196e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e014      	b.n	80019a0 <HAL_RCC_OscConfig+0x298>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	080044f8 	.word	0x080044f8
 8001980:	20000010 	.word	0x20000010
 8001984:	20000014 	.word	0x20000014
 8001988:	4ba0      	ldr	r3, [pc, #640]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a9f      	ldr	r2, [pc, #636]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b9d      	ldr	r3, [pc, #628]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a9c      	ldr	r2, [pc, #624]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800199e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f8da 	bl	8000b60 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff f8d6 	bl	8000b60 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	@ 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e276      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c2:	4b92      	ldr	r3, [pc, #584]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2a8>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f8c6 	bl	8000b60 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff f8c2 	bl	8000b60 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	@ 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e262      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ea:	4b88      	ldr	r3, [pc, #544]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2d0>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d060      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x310>
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d119      	bne.n	8001a46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d116      	bne.n	8001a46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a18:	4b7c      	ldr	r3, [pc, #496]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_OscConfig+0x328>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e23f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b76      	ldr	r3, [pc, #472]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	4973      	ldr	r1, [pc, #460]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	e040      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d023      	beq.n	8001a96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6e      	ldr	r2, [pc, #440]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f881 	bl	8000b60 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f87d 	bl	8000b60 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e21d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a74:	4b65      	ldr	r3, [pc, #404]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	495f      	ldr	r1, [pc, #380]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
 8001a94:	e018      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b5d      	ldr	r3, [pc, #372]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f85d 	bl	8000b60 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f859 	bl	8000b60 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e1f9      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001abc:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d03c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001adc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aec:	f7ff f838 	bl	8000b60 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff f834 	bl	8000b60 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1d4      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b06:	4b41      	ldr	r3, [pc, #260]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x3ec>
 8001b14:	e01b      	b.n	8001b4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b16:	4b3d      	ldr	r3, [pc, #244]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f81b 	bl	8000b60 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f817 	bl	8000b60 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1b7      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b40:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ef      	bne.n	8001b2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a6 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b60:	4b2a      	ldr	r3, [pc, #168]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b84:	2301      	movs	r3, #1
 8001b86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d118      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b94:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_RCC_OscConfig+0x508>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1d      	ldr	r2, [pc, #116]	@ (8001c10 <HAL_RCC_OscConfig+0x508>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba0:	f7fe ffde 	bl	8000b60 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7fe ffda 	bl	8000b60 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e17a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bba:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_RCC_OscConfig+0x508>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4d8>
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bde:	e029      	b.n	8001c34 <HAL_RCC_OscConfig+0x52c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d115      	bne.n	8001c14 <HAL_RCC_OscConfig+0x50c>
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bee:	4a07      	ldr	r2, [pc, #28]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bfe:	4a03      	ldr	r2, [pc, #12]	@ (8001c0c <HAL_RCC_OscConfig+0x504>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c08:	e014      	b.n	8001c34 <HAL_RCC_OscConfig+0x52c>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
 8001c14:	4b9c      	ldr	r3, [pc, #624]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1a:	4a9b      	ldr	r2, [pc, #620]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c24:	4b98      	ldr	r3, [pc, #608]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c2a:	4a97      	ldr	r2, [pc, #604]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d016      	beq.n	8001c6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ff90 	bl	8000b60 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe ff8c 	bl	8000b60 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e12a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0ed      	beq.n	8001c44 <HAL_RCC_OscConfig+0x53c>
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6a:	f7fe ff79 	bl	8000b60 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7fe ff75 	bl	8000b60 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e113      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	4b7f      	ldr	r3, [pc, #508]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1ed      	bne.n	8001c72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c96:	7ffb      	ldrb	r3, [r7, #31]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d105      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c9c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	4a79      	ldr	r2, [pc, #484]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80fe 	beq.w	8001eae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	f040 80d0 	bne.w	8001e5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cbc:	4b72      	ldr	r3, [pc, #456]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d130      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d127      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d11f      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cfc:	2a07      	cmp	r2, #7
 8001cfe:	bf14      	ite	ne
 8001d00:	2201      	movne	r2, #1
 8001d02:	2200      	moveq	r2, #0
 8001d04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d113      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	3b01      	subs	r3, #1
 8001d18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d06e      	beq.n	8001e10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d069      	beq.n	8001e0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d38:	4b53      	ldr	r3, [pc, #332]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d44:	4b50      	ldr	r3, [pc, #320]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0ad      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d54:	4b4c      	ldr	r3, [pc, #304]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d60:	f7fe fefe 	bl	8000b60 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fefa 	bl	8000b60 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e09a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7a:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d86:	4b40      	ldr	r3, [pc, #256]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <HAL_RCC_OscConfig+0x784>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d96:	3a01      	subs	r2, #1
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001da0:	0212      	lsls	r2, r2, #8
 8001da2:	4311      	orrs	r1, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001da8:	0852      	lsrs	r2, r2, #1
 8001daa:	3a01      	subs	r2, #1
 8001dac:	0552      	lsls	r2, r2, #21
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001db4:	0852      	lsrs	r2, r2, #1
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0652      	lsls	r2, r2, #25
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dc0:	0912      	lsrs	r2, r2, #4
 8001dc2:	0452      	lsls	r2, r2, #17
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	4930      	ldr	r1, [pc, #192]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de4:	f7fe febc 	bl	8000b60 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7fe feb8 	bl	8000b60 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e058      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0a:	e050      	b.n	8001eae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e04f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d148      	bne.n	8001eae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a16      	ldr	r2, [pc, #88]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e34:	f7fe fe94 	bl	8000b60 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe fe90 	bl	8000b60 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e030      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x734>
 8001e5a:	e028      	b.n	8001eae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d023      	beq.n	8001eaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_RCC_OscConfig+0x780>)
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7fe fe77 	bl	8000b60 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	e00c      	b.n	8001e90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e76:	f7fe fe73 	bl	8000b60 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d905      	bls.n	8001e90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e013      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_RCC_OscConfig+0x7b0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ec      	bne.n	8001e76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_RCC_OscConfig+0x7b0>)
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	4905      	ldr	r1, [pc, #20]	@ (8001eb8 <HAL_RCC_OscConfig+0x7b0>)
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_RCC_OscConfig+0x7b4>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60cb      	str	r3, [r1, #12]
 8001ea8:	e001      	b.n	8001eae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3720      	adds	r7, #32
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	feeefffc 	.word	0xfeeefffc

08001ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0e7      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b75      	ldr	r3, [pc, #468]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b72      	ldr	r3, [pc, #456]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 0207 	bic.w	r2, r3, #7
 8001eea:	4970      	ldr	r1, [pc, #448]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b6e      	ldr	r3, [pc, #440]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0cf      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b63      	ldr	r3, [pc, #396]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4960      	ldr	r1, [pc, #384]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04c      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b5a      	ldr	r3, [pc, #360]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d121      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0a6      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5e:	4b54      	ldr	r3, [pc, #336]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d115      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e09a      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f76:	4b4e      	ldr	r3, [pc, #312]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e08e      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f86:	4b4a      	ldr	r3, [pc, #296]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e086      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b46      	ldr	r3, [pc, #280]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4943      	ldr	r1, [pc, #268]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fdda 	bl	8000b60 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7fe fdd6 	bl	8000b60 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e06e      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d208      	bcs.n	8002006 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	492b      	ldr	r1, [pc, #172]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002006:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d210      	bcs.n	8002036 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002014:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 0207 	bic.w	r2, r3, #7
 800201c:	4923      	ldr	r1, [pc, #140]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002024:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_RCC_ClockConfig+0x1ec>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e036      	b.n	80020a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d008      	beq.n	8002054 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002042:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	4918      	ldr	r1, [pc, #96]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4910      	ldr	r1, [pc, #64]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	4313      	orrs	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002074:	f000 f824 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	490b      	ldr	r1, [pc, #44]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	4a09      	ldr	r2, [pc, #36]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002092:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002094:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <HAL_RCC_ClockConfig+0x1fc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fd11 	bl	8000ac0 <HAL_InitTick>
 800209e:	4603      	mov	r3, r0
 80020a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020a2:	7afb      	ldrb	r3, [r7, #11]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	080044f8 	.word	0x080044f8
 80020b8:	20000010 	.word	0x20000010
 80020bc:	20000014 	.word	0x20000014

080020c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ce:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d8:	4b3b      	ldr	r3, [pc, #236]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x34>
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d121      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d11e      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002100:	4b31      	ldr	r3, [pc, #196]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e005      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002110:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800211c:	4a2b      	ldr	r2, [pc, #172]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10d      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002130:	e00a      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d102      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e004      	b.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d101      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002144:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002146:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d134      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214e:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0xa6>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d003      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0xac>
 8002164:	e005      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002168:	617b      	str	r3, [r7, #20]
      break;
 800216a:	e005      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800216e:	617b      	str	r3, [r7, #20]
      break;
 8002170:	e002      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	617b      	str	r3, [r7, #20]
      break;
 8002176:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	3301      	adds	r3, #1
 8002184:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	fb03 f202 	mul.w	r2, r3, r2
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0e5b      	lsrs	r3, r3, #25
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	3301      	adds	r3, #1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021b8:	69bb      	ldr	r3, [r7, #24]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004510 	.word	0x08004510
 80021d0:	00f42400 	.word	0x00f42400
 80021d4:	007a1200 	.word	0x007a1200

080021d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_GetHCLKFreq+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000010 	.word	0x20000010

080021f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021f4:	f7ff fff0 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4904      	ldr	r1, [pc, #16]	@ (8002218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	08004508 	.word	0x08004508

0800221c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002220:	f7ff ffda 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0adb      	lsrs	r3, r3, #11
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4904      	ldr	r1, [pc, #16]	@ (8002244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	08004508 	.word	0x08004508

08002248 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002254:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002260:	f7ff f9ee 	bl	8001640 <HAL_PWREx_GetVoltageRange>
 8002264:	6178      	str	r0, [r7, #20]
 8002266:	e014      	b.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	4a24      	ldr	r2, [pc, #144]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	@ 0x58
 8002274:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002280:	f7ff f9de 	bl	8001640 <HAL_PWREx_GetVoltageRange>
 8002284:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228a:	4a1d      	ldr	r2, [pc, #116]	@ (8002300 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002290:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002298:	d10b      	bne.n	80022b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b80      	cmp	r3, #128	@ 0x80
 800229e:	d919      	bls.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80022a4:	d902      	bls.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a6:	2302      	movs	r3, #2
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	e013      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022ac:	2301      	movs	r3, #1
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e010      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	@ 0x80
 80022b6:	d902      	bls.n	80022be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	e00a      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b80      	cmp	r3, #128	@ 0x80
 80022c2:	d102      	bne.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022c4:	2302      	movs	r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e004      	b.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b70      	cmp	r3, #112	@ 0x70
 80022ce:	d101      	bne.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 0207 	bic.w	r2, r3, #7
 80022dc:	4909      	ldr	r1, [pc, #36]	@ (8002304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022e4:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40021000 	.word	0x40021000
 8002304:	40022000 	.word	0x40022000

08002308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002310:	2300      	movs	r3, #0
 8002312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002314:	2300      	movs	r3, #0
 8002316:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002320:	2b00      	cmp	r3, #0
 8002322:	d041      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002328:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800232c:	d02a      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800232e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002332:	d824      	bhi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002334:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002338:	d008      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800233a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800233e:	d81e      	bhi.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002348:	d010      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800234a:	e018      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800234c:	4b86      	ldr	r3, [pc, #536]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a85      	ldr	r2, [pc, #532]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002356:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002358:	e015      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fabb 	bl	80028dc <RCCEx_PLLSAI1_Config>
 8002366:	4603      	mov	r3, r0
 8002368:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800236a:	e00c      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3320      	adds	r3, #32
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fba6 	bl	8002ac4 <RCCEx_PLLSAI2_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800237c:	e003      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	74fb      	strb	r3, [r7, #19]
      break;
 8002382:	e000      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10b      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800238c:	4b76      	ldr	r3, [pc, #472]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800239a:	4973      	ldr	r1, [pc, #460]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023a2:	e001      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d041      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023bc:	d02a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023c2:	d824      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023ce:	d81e      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d8:	d010      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023da:	e018      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023dc:	4b62      	ldr	r3, [pc, #392]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a61      	ldr	r2, [pc, #388]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023e8:	e015      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fa73 	bl	80028dc <RCCEx_PLLSAI1_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023fa:	e00c      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3320      	adds	r3, #32
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fb5e 	bl	8002ac4 <RCCEx_PLLSAI2_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800240c:	e003      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	74fb      	strb	r3, [r7, #19]
      break;
 8002412:	e000      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800241c:	4b52      	ldr	r3, [pc, #328]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800242a:	494f      	ldr	r1, [pc, #316]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002432:	e001      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a0 	beq.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800244a:	4b47      	ldr	r3, [pc, #284]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	4a40      	ldr	r2, [pc, #256]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246a:	6593      	str	r3, [r2, #88]	@ 0x58
 800246c:	4b3e      	ldr	r3, [pc, #248]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800247c:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3a      	ldr	r2, [pc, #232]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002488:	f7fe fb6a 	bl	8000b60 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800248e:	e009      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe fb66 	bl	8000b60 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d902      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	74fb      	strb	r3, [r7, #19]
        break;
 80024a2:	e005      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a4:	4b31      	ldr	r3, [pc, #196]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ef      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d15c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01f      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d019      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024d4:	4b24      	ldr	r3, [pc, #144]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024e0:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e6:	4a20      	ldr	r2, [pc, #128]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002500:	4a19      	ldr	r2, [pc, #100]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe fb25 	bl	8000b60 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002518:	e00b      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe fb21 	bl	8000b60 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d902      	bls.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	74fb      	strb	r3, [r7, #19]
            break;
 8002530:	e006      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ec      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002556:	4904      	ldr	r1, [pc, #16]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800255e:	e009      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	74bb      	strb	r3, [r7, #18]
 8002564:	e006      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002574:	7c7b      	ldrb	r3, [r7, #17]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	4b9e      	ldr	r3, [pc, #632]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	4a9d      	ldr	r2, [pc, #628]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002584:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002592:	4b98      	ldr	r3, [pc, #608]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002598:	f023 0203 	bic.w	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a0:	4994      	ldr	r1, [pc, #592]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025b4:	4b8f      	ldr	r3, [pc, #572]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ba:	f023 020c 	bic.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c2:	498c      	ldr	r1, [pc, #560]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025d6:	4b87      	ldr	r3, [pc, #540]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	4983      	ldr	r1, [pc, #524]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025f8:	4b7e      	ldr	r3, [pc, #504]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	497b      	ldr	r1, [pc, #492]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800261a:	4b76      	ldr	r3, [pc, #472]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002628:	4972      	ldr	r1, [pc, #456]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800263c:	4b6d      	ldr	r3, [pc, #436]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264a:	496a      	ldr	r1, [pc, #424]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800265e:	4b65      	ldr	r3, [pc, #404]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	4961      	ldr	r1, [pc, #388]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002680:	4b5c      	ldr	r3, [pc, #368]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800268e:	4959      	ldr	r1, [pc, #356]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a2:	4b54      	ldr	r3, [pc, #336]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b0:	4950      	ldr	r1, [pc, #320]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026c4:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d2:	4948      	ldr	r1, [pc, #288]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e6:	4b43      	ldr	r3, [pc, #268]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	493f      	ldr	r1, [pc, #252]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d028      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002708:	4b3a      	ldr	r3, [pc, #232]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002716:	4937      	ldr	r1, [pc, #220]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002726:	d106      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002728:	4b32      	ldr	r3, [pc, #200]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a31      	ldr	r2, [pc, #196]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002732:	60d3      	str	r3, [r2, #12]
 8002734:	e011      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800273e:	d10c      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3304      	adds	r3, #4
 8002744:	2101      	movs	r1, #1
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f8c8 	bl	80028dc <RCCEx_PLLSAI1_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d028      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002766:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002774:	491f      	ldr	r1, [pc, #124]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002784:	d106      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002786:	4b1b      	ldr	r3, [pc, #108]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4a1a      	ldr	r2, [pc, #104]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002790:	60d3      	str	r3, [r2, #12]
 8002792:	e011      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002798:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2101      	movs	r1, #1
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 f899 	bl	80028dc <RCCEx_PLLSAI1_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d02b      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d2:	4908      	ldr	r1, [pc, #32]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027e2:	d109      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a02      	ldr	r2, [pc, #8]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ee:	60d3      	str	r3, [r2, #12]
 80027f0:	e014      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002800:	d10c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	2101      	movs	r1, #1
 8002808:	4618      	mov	r0, r3
 800280a:	f000 f867 	bl	80028dc <RCCEx_PLLSAI1_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d02f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002828:	4b2b      	ldr	r3, [pc, #172]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002836:	4928      	ldr	r1, [pc, #160]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002842:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002846:	d10d      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	2102      	movs	r1, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f000 f844 	bl	80028dc <RCCEx_PLLSAI1_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002858:	7cfb      	ldrb	r3, [r7, #19]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d014      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	74bb      	strb	r3, [r7, #18]
 8002862:	e011      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3320      	adds	r3, #32
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f925 	bl	8002ac4 <RCCEx_PLLSAI2_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002894:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028a2:	490d      	ldr	r1, [pc, #52]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00b      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028c6:	4904      	ldr	r1, [pc, #16]	@ (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000

080028dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ea:	4b75      	ldr	r3, [pc, #468]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d018      	beq.n	8002928 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028f6:	4b72      	ldr	r3, [pc, #456]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f003 0203 	and.w	r2, r3, #3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d10d      	bne.n	8002922 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
       ||
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800290e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
       ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d047      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e044      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d018      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0x86>
 8002930:	2b03      	cmp	r3, #3
 8002932:	d825      	bhi.n	8002980 <RCCEx_PLLSAI1_Config+0xa4>
 8002934:	2b01      	cmp	r3, #1
 8002936:	d002      	beq.n	800293e <RCCEx_PLLSAI1_Config+0x62>
 8002938:	2b02      	cmp	r3, #2
 800293a:	d009      	beq.n	8002950 <RCCEx_PLLSAI1_Config+0x74>
 800293c:	e020      	b.n	8002980 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800293e:	4b60      	ldr	r3, [pc, #384]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11d      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800294e:	e01a      	b.n	8002986 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002950:	4b5b      	ldr	r3, [pc, #364]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002960:	e013      	b.n	800298a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800296e:	4b54      	ldr	r3, [pc, #336]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800297e:	e006      	b.n	800298e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e004      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800298e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	430b      	orrs	r3, r1
 80029ac:	4944      	ldr	r1, [pc, #272]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d17d      	bne.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029b8:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a40      	ldr	r2, [pc, #256]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7fe f8cc 	bl	8000b60 <HAL_GetTick>
 80029c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ca:	e009      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029cc:	f7fe f8c8 	bl	8000b60 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d902      	bls.n	80029e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	73fb      	strb	r3, [r7, #15]
        break;
 80029de:	e005      	b.n	80029ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029e0:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ef      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d160      	bne.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d111      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f8:	4b31      	ldr	r3, [pc, #196]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	0211      	lsls	r1, r2, #8
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68d2      	ldr	r2, [r2, #12]
 8002a0e:	0912      	lsrs	r2, r2, #4
 8002a10:	0452      	lsls	r2, r2, #17
 8002a12:	430a      	orrs	r2, r1
 8002a14:	492a      	ldr	r1, [pc, #168]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	610b      	str	r3, [r1, #16]
 8002a1a:	e027      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d112      	bne.n	8002a48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a22:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a2a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6892      	ldr	r2, [r2, #8]
 8002a32:	0211      	lsls	r1, r2, #8
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6912      	ldr	r2, [r2, #16]
 8002a38:	0852      	lsrs	r2, r2, #1
 8002a3a:	3a01      	subs	r2, #1
 8002a3c:	0552      	lsls	r2, r2, #21
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	491f      	ldr	r1, [pc, #124]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	610b      	str	r3, [r1, #16]
 8002a46:	e011      	b.n	8002a6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6892      	ldr	r2, [r2, #8]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6952      	ldr	r2, [r2, #20]
 8002a5e:	0852      	lsrs	r2, r2, #1
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0652      	lsls	r2, r2, #25
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4916      	ldr	r1, [pc, #88]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe f872 	bl	8000b60 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a7e:	e009      	b.n	8002a94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a80:	f7fe f86e 	bl	8000b60 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	73fb      	strb	r3, [r7, #15]
          break;
 8002a92:	e005      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	4904      	ldr	r1, [pc, #16]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d018      	beq.n	8002b10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ade:	4b67      	ldr	r3, [pc, #412]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0203 	and.w	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d10d      	bne.n	8002b0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
       ||
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002af6:	4b61      	ldr	r3, [pc, #388]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
       ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d047      	beq.n	8002b9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e044      	b.n	8002b9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d018      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0x86>
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d825      	bhi.n	8002b68 <RCCEx_PLLSAI2_Config+0xa4>
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d002      	beq.n	8002b26 <RCCEx_PLLSAI2_Config+0x62>
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d009      	beq.n	8002b38 <RCCEx_PLLSAI2_Config+0x74>
 8002b24:	e020      	b.n	8002b68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b26:	4b55      	ldr	r3, [pc, #340]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d11d      	bne.n	8002b6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b36:	e01a      	b.n	8002b6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b38:	4b50      	ldr	r3, [pc, #320]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d116      	bne.n	8002b72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b48:	e013      	b.n	8002b72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b56:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b66:	e006      	b.n	8002b76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6c:	e004      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e002      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10d      	bne.n	8002b9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	430b      	orrs	r3, r1
 8002b94:	4939      	ldr	r1, [pc, #228]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d167      	bne.n	8002c70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ba0:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a35      	ldr	r2, [pc, #212]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fd ffd8 	bl	8000b60 <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb2:	e009      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb4:	f7fd ffd4 	bl	8000b60 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d902      	bls.n	8002bc8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8002bc6:	e005      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ef      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d14a      	bne.n	8002c70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d111      	bne.n	8002c04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be0:	4b26      	ldr	r3, [pc, #152]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6892      	ldr	r2, [r2, #8]
 8002bf0:	0211      	lsls	r1, r2, #8
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68d2      	ldr	r2, [r2, #12]
 8002bf6:	0912      	lsrs	r2, r2, #4
 8002bf8:	0452      	lsls	r2, r2, #17
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	491f      	ldr	r1, [pc, #124]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	614b      	str	r3, [r1, #20]
 8002c02:	e011      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c04:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6892      	ldr	r2, [r2, #8]
 8002c14:	0211      	lsls	r1, r2, #8
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6912      	ldr	r2, [r2, #16]
 8002c1a:	0852      	lsrs	r2, r2, #1
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0652      	lsls	r2, r2, #25
 8002c20:	430a      	orrs	r2, r1
 8002c22:	4916      	ldr	r1, [pc, #88]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c28:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fd ff94 	bl	8000b60 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c3a:	e009      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c3c:	f7fd ff90 	bl	8000b60 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d902      	bls.n	8002c50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c4e:	e005      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c50:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ef      	beq.n	8002c3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000

08002c80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e040      	b.n	8002d14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd fda0 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	@ 0x24
 8002cac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 ff62 	bl	8003b90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fca7 	bl	8003620 <UART_SetConfig>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e01b      	b.n	8002d14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 ffe1 	bl	8003cd4 <UART_CheckIdleState>
 8002d12:	4603      	mov	r3, r0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08a      	sub	sp, #40	@ 0x28
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d177      	bne.n	8002e24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_UART_Transmit+0x24>
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e070      	b.n	8002e26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2221      	movs	r2, #33	@ 0x21
 8002d50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d52:	f7fd ff05 	bl	8000b60 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d70:	d108      	bne.n	8002d84 <HAL_UART_Transmit+0x68>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	e003      	b.n	8002d8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d8c:	e02f      	b.n	8002dee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2180      	movs	r1, #128	@ 0x80
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f001 f843 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e03b      	b.n	8002e26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10b      	bne.n	8002dcc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	881a      	ldrh	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	e007      	b.n	8002ddc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	781a      	ldrb	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1c9      	bne.n	8002d8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2200      	movs	r2, #0
 8002e02:	2140      	movs	r1, #64	@ 0x40
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f001 f80d 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e005      	b.n	8002e26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	@ 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d165      	bne.n	8002f12 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_UART_Transmit_DMA+0x22>
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e05e      	b.n	8002f14 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2221      	movs	r2, #33	@ 0x21
 8002e78:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d027      	beq.n	8002ed2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	4a25      	ldr	r2, [pc, #148]	@ (8002f1c <HAL_UART_Transmit_DMA+0xec>)
 8002e88:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	4a24      	ldr	r2, [pc, #144]	@ (8002f20 <HAL_UART_Transmit_DMA+0xf0>)
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	4a23      	ldr	r2, [pc, #140]	@ (8002f24 <HAL_UART_Transmit_DMA+0xf4>)
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eaa:	4619      	mov	r1, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3328      	adds	r3, #40	@ 0x28
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	f7fe f829 	bl	8000f0c <HAL_DMA_Start_IT>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e020      	b.n	8002f14 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	623a      	str	r2, [r7, #32]
 8002efc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	69f9      	ldr	r1, [r7, #28]
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e5      	bne.n	8002eda <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3728      	adds	r7, #40	@ 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	08004155 	.word	0x08004155
 8002f20:	080041ef 	.word	0x080041ef
 8002f24:	08004375 	.word	0x08004375

08002f28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	@ 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d137      	bne.n	8002fb0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Receive_DMA+0x24>
 8002f46:	88fb      	ldrh	r3, [r7, #6]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e030      	b.n	8002fb2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <HAL_UART_Receive_DMA+0x94>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01f      	beq.n	8002fa0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d018      	beq.n	8002fa0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	69f9      	ldr	r1, [r7, #28]
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e6      	bne.n	8002f6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 ffaa 	bl	8003f00 <UART_Start_Receive_DMA>
 8002fac:	4603      	mov	r3, r0
 8002fae:	e000      	b.n	8002fb2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3728      	adds	r7, #40	@ 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40008000 	.word	0x40008000

08002fc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002fea:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002fee:	4013      	ands	r3, r2
 8002ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d115      	bne.n	8003028 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 82ca 	beq.w	80035b2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
      }
      return;
 8003026:	e2c4      	b.n	80035b2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8117 	beq.w	8003260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800303e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003042:	4b85      	ldr	r3, [pc, #532]	@ (8003258 <HAL_UART_IRQHandler+0x298>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 810a 	beq.w	8003260 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_UART_IRQHandler+0xbc>
 8003058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d011      	beq.n	80030ac <HAL_UART_IRQHandler+0xec>
 8003088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a2:	f043 0204 	orr.w	r2, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d011      	beq.n	80030dc <HAL_UART_IRQHandler+0x11c>
 80030b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2204      	movs	r2, #4
 80030ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800311c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003120:	2b00      	cmp	r3, #0
 8003122:	d012      	beq.n	800314a <HAL_UART_IRQHandler+0x18a>
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8230 	beq.w	80035b6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003184:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800319a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d04f      	beq.n	8003242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 ff72 	bl	800408c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d141      	bne.n	800323a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1d9      	bne.n	80031b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003206:	2b00      	cmp	r3, #0
 8003208:	d013      	beq.n	8003232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800320e:	4a13      	ldr	r2, [pc, #76]	@ (800325c <HAL_UART_IRQHandler+0x29c>)
 8003210:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd ff16 	bl	8001048 <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d017      	beq.n	8003252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800322c:	4610      	mov	r0, r2
 800322e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e00f      	b.n	8003252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9de 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003238:	e00b      	b.n	8003252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9da 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003240:	e007      	b.n	8003252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9d6 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003250:	e1b1      	b.n	80035b6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003252:	bf00      	nop
    return;
 8003254:	e1af      	b.n	80035b6 <HAL_UART_IRQHandler+0x5f6>
 8003256:	bf00      	nop
 8003258:	04000120 	.word	0x04000120
 800325c:	080043f3 	.word	0x080043f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	2b01      	cmp	r3, #1
 8003266:	f040 816a 	bne.w	800353e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8163 	beq.w	800353e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 815c 	beq.w	800353e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2210      	movs	r2, #16
 800328c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003298:	2b40      	cmp	r3, #64	@ 0x40
 800329a:	f040 80d4 	bne.w	8003446 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80ad 	beq.w	800340e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032be:	429a      	cmp	r2, r3
 80032c0:	f080 80a5 	bcs.w	800340e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 8086 	bne.w	80033ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800330a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800330e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003316:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1da      	bne.n	80032e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800333a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800334e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003352:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003354:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003356:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e1      	bne.n	800332a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3308      	adds	r3, #8
 800336c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800337c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3308      	adds	r3, #8
 8003386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800338a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800338c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003390:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e3      	bne.n	8003366 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033bc:	f023 0310 	bic.w	r3, r3, #16
 80033c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e4      	bne.n	80033ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fdf0 	bl	8000fcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	b29b      	uxth	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8fe 	bl	8003608 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800340c:	e0d5      	b.n	80035ba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003418:	429a      	cmp	r2, r3
 800341a:	f040 80ce 	bne.w	80035ba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b20      	cmp	r3, #32
 800342c:	f040 80c5 	bne.w	80035ba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8e2 	bl	8003608 <HAL_UARTEx_RxEventCallback>
      return;
 8003444:	e0b9      	b.n	80035ba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003452:	b29b      	uxth	r3, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80ab 	beq.w	80035be <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a6 	beq.w	80035be <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003494:	647b      	str	r3, [r7, #68]	@ 0x44
 8003496:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800349a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e4      	bne.n	8003472 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	623b      	str	r3, [r7, #32]
   return(result);
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3308      	adds	r3, #8
 80034c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e3      	bne.n	80034a8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	60fb      	str	r3, [r7, #12]
   return(result);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f023 0310 	bic.w	r3, r3, #16
 8003508:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	69b9      	ldr	r1, [r7, #24]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	617b      	str	r3, [r7, #20]
   return(result);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e4      	bne.n	80034f4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f866 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800353c:	e03f      	b.n	80035be <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_UART_IRQHandler+0x5a8>
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800354e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800355e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 ff86 	bl	8004472 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003566:	e02d      	b.n	80035c4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01c      	beq.n	80035c2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    }
    return;
 8003590:	e017      	b.n	80035c2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_UART_IRQHandler+0x604>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 ff37 	bl	800441e <UART_EndTransmit_IT>
    return;
 80035b0:	e008      	b.n	80035c4 <HAL_UART_IRQHandler+0x604>
      return;
 80035b2:	bf00      	nop
 80035b4:	e006      	b.n	80035c4 <HAL_UART_IRQHandler+0x604>
    return;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <HAL_UART_IRQHandler+0x604>
      return;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <HAL_UART_IRQHandler+0x604>
      return;
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <HAL_UART_IRQHandler+0x604>
    return;
 80035c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035c4:	37e8      	adds	r7, #232	@ 0xe8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop

080035cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b08a      	sub	sp, #40	@ 0x28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	431a      	orrs	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4313      	orrs	r3, r2
 8003646:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4ba4      	ldr	r3, [pc, #656]	@ (80038e0 <UART_SetConfig+0x2c0>)
 8003650:	4013      	ands	r3, r2
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003658:	430b      	orrs	r3, r1
 800365a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a99      	ldr	r2, [pc, #612]	@ (80038e4 <UART_SetConfig+0x2c4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003688:	4313      	orrs	r3, r2
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a90      	ldr	r2, [pc, #576]	@ (80038e8 <UART_SetConfig+0x2c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d126      	bne.n	80036f8 <UART_SetConfig+0xd8>
 80036aa:	4b90      	ldr	r3, [pc, #576]	@ (80038ec <UART_SetConfig+0x2cc>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d81b      	bhi.n	80036f0 <UART_SetConfig+0xd0>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <UART_SetConfig+0xa0>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036e1 	.word	0x080036e1
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036e9 	.word	0x080036e9
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d6:	e116      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036d8:	2302      	movs	r3, #2
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036de:	e112      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e6:	e10e      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e10a      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e106      	b.n	8003906 <UART_SetConfig+0x2e6>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a7c      	ldr	r2, [pc, #496]	@ (80038f0 <UART_SetConfig+0x2d0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d138      	bne.n	8003774 <UART_SetConfig+0x154>
 8003702:	4b7a      	ldr	r3, [pc, #488]	@ (80038ec <UART_SetConfig+0x2cc>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b0c      	cmp	r3, #12
 800370e:	d82d      	bhi.n	800376c <UART_SetConfig+0x14c>
 8003710:	a201      	add	r2, pc, #4	@ (adr r2, 8003718 <UART_SetConfig+0xf8>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800374d 	.word	0x0800374d
 800371c:	0800376d 	.word	0x0800376d
 8003720:	0800376d 	.word	0x0800376d
 8003724:	0800376d 	.word	0x0800376d
 8003728:	0800375d 	.word	0x0800375d
 800372c:	0800376d 	.word	0x0800376d
 8003730:	0800376d 	.word	0x0800376d
 8003734:	0800376d 	.word	0x0800376d
 8003738:	08003755 	.word	0x08003755
 800373c:	0800376d 	.word	0x0800376d
 8003740:	0800376d 	.word	0x0800376d
 8003744:	0800376d 	.word	0x0800376d
 8003748:	08003765 	.word	0x08003765
 800374c:	2300      	movs	r3, #0
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003752:	e0d8      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003754:	2302      	movs	r3, #2
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375a:	e0d4      	b.n	8003906 <UART_SetConfig+0x2e6>
 800375c:	2304      	movs	r3, #4
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003762:	e0d0      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003764:	2308      	movs	r3, #8
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376a:	e0cc      	b.n	8003906 <UART_SetConfig+0x2e6>
 800376c:	2310      	movs	r3, #16
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003772:	e0c8      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a5e      	ldr	r2, [pc, #376]	@ (80038f4 <UART_SetConfig+0x2d4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d125      	bne.n	80037ca <UART_SetConfig+0x1aa>
 800377e:	4b5b      	ldr	r3, [pc, #364]	@ (80038ec <UART_SetConfig+0x2cc>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003788:	2b30      	cmp	r3, #48	@ 0x30
 800378a:	d016      	beq.n	80037ba <UART_SetConfig+0x19a>
 800378c:	2b30      	cmp	r3, #48	@ 0x30
 800378e:	d818      	bhi.n	80037c2 <UART_SetConfig+0x1a2>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d00a      	beq.n	80037aa <UART_SetConfig+0x18a>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d814      	bhi.n	80037c2 <UART_SetConfig+0x1a2>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <UART_SetConfig+0x182>
 800379c:	2b10      	cmp	r3, #16
 800379e:	d008      	beq.n	80037b2 <UART_SetConfig+0x192>
 80037a0:	e00f      	b.n	80037c2 <UART_SetConfig+0x1a2>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a8:	e0ad      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037aa:	2302      	movs	r3, #2
 80037ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b0:	e0a9      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037b2:	2304      	movs	r3, #4
 80037b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b8:	e0a5      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037ba:	2308      	movs	r3, #8
 80037bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c0:	e0a1      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037c2:	2310      	movs	r3, #16
 80037c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c8:	e09d      	b.n	8003906 <UART_SetConfig+0x2e6>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a4a      	ldr	r2, [pc, #296]	@ (80038f8 <UART_SetConfig+0x2d8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d125      	bne.n	8003820 <UART_SetConfig+0x200>
 80037d4:	4b45      	ldr	r3, [pc, #276]	@ (80038ec <UART_SetConfig+0x2cc>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037de:	2bc0      	cmp	r3, #192	@ 0xc0
 80037e0:	d016      	beq.n	8003810 <UART_SetConfig+0x1f0>
 80037e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037e4:	d818      	bhi.n	8003818 <UART_SetConfig+0x1f8>
 80037e6:	2b80      	cmp	r3, #128	@ 0x80
 80037e8:	d00a      	beq.n	8003800 <UART_SetConfig+0x1e0>
 80037ea:	2b80      	cmp	r3, #128	@ 0x80
 80037ec:	d814      	bhi.n	8003818 <UART_SetConfig+0x1f8>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <UART_SetConfig+0x1d8>
 80037f2:	2b40      	cmp	r3, #64	@ 0x40
 80037f4:	d008      	beq.n	8003808 <UART_SetConfig+0x1e8>
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x1f8>
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fe:	e082      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003800:	2302      	movs	r3, #2
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003806:	e07e      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003808:	2304      	movs	r3, #4
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380e:	e07a      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003810:	2308      	movs	r3, #8
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003816:	e076      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003818:	2310      	movs	r3, #16
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381e:	e072      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a35      	ldr	r2, [pc, #212]	@ (80038fc <UART_SetConfig+0x2dc>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d12a      	bne.n	8003880 <UART_SetConfig+0x260>
 800382a:	4b30      	ldr	r3, [pc, #192]	@ (80038ec <UART_SetConfig+0x2cc>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003834:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003838:	d01a      	beq.n	8003870 <UART_SetConfig+0x250>
 800383a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800383e:	d81b      	bhi.n	8003878 <UART_SetConfig+0x258>
 8003840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003844:	d00c      	beq.n	8003860 <UART_SetConfig+0x240>
 8003846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800384a:	d815      	bhi.n	8003878 <UART_SetConfig+0x258>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <UART_SetConfig+0x238>
 8003850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003854:	d008      	beq.n	8003868 <UART_SetConfig+0x248>
 8003856:	e00f      	b.n	8003878 <UART_SetConfig+0x258>
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e052      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003866:	e04e      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003868:	2304      	movs	r3, #4
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386e:	e04a      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003870:	2308      	movs	r3, #8
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e046      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003878:	2310      	movs	r3, #16
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387e:	e042      	b.n	8003906 <UART_SetConfig+0x2e6>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a17      	ldr	r2, [pc, #92]	@ (80038e4 <UART_SetConfig+0x2c4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d13a      	bne.n	8003900 <UART_SetConfig+0x2e0>
 800388a:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <UART_SetConfig+0x2cc>)
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003890:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003894:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003898:	d01a      	beq.n	80038d0 <UART_SetConfig+0x2b0>
 800389a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800389e:	d81b      	bhi.n	80038d8 <UART_SetConfig+0x2b8>
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a4:	d00c      	beq.n	80038c0 <UART_SetConfig+0x2a0>
 80038a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038aa:	d815      	bhi.n	80038d8 <UART_SetConfig+0x2b8>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <UART_SetConfig+0x298>
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b4:	d008      	beq.n	80038c8 <UART_SetConfig+0x2a8>
 80038b6:	e00f      	b.n	80038d8 <UART_SetConfig+0x2b8>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038be:	e022      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038c0:	2302      	movs	r3, #2
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c6:	e01e      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038c8:	2304      	movs	r3, #4
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ce:	e01a      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038d0:	2308      	movs	r3, #8
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d6:	e016      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038d8:	2310      	movs	r3, #16
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038de:	e012      	b.n	8003906 <UART_SetConfig+0x2e6>
 80038e0:	efff69f3 	.word	0xefff69f3
 80038e4:	40008000 	.word	0x40008000
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40004400 	.word	0x40004400
 80038f4:	40004800 	.word	0x40004800
 80038f8:	40004c00 	.word	0x40004c00
 80038fc:	40005000 	.word	0x40005000
 8003900:	2310      	movs	r3, #16
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a9f      	ldr	r2, [pc, #636]	@ (8003b88 <UART_SetConfig+0x568>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d17a      	bne.n	8003a06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003910:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003914:	2b08      	cmp	r3, #8
 8003916:	d824      	bhi.n	8003962 <UART_SetConfig+0x342>
 8003918:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <UART_SetConfig+0x300>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003945 	.word	0x08003945
 8003924:	08003963 	.word	0x08003963
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003963 	.word	0x08003963
 8003930:	08003953 	.word	0x08003953
 8003934:	08003963 	.word	0x08003963
 8003938:	08003963 	.word	0x08003963
 800393c:	08003963 	.word	0x08003963
 8003940:	0800395b 	.word	0x0800395b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7fe fc54 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003948:	61f8      	str	r0, [r7, #28]
        break;
 800394a:	e010      	b.n	800396e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394c:	4b8f      	ldr	r3, [pc, #572]	@ (8003b8c <UART_SetConfig+0x56c>)
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e00d      	b.n	800396e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003952:	f7fe fbb5 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003956:	61f8      	str	r0, [r7, #28]
        break;
 8003958:	e009      	b.n	800396e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395e:	61fb      	str	r3, [r7, #28]
        break;
 8003960:	e005      	b.n	800396e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800396c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80fb 	beq.w	8003b6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	429a      	cmp	r2, r3
 8003984:	d305      	bcc.n	8003992 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	429a      	cmp	r2, r3
 8003990:	d903      	bls.n	800399a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003998:	e0e8      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2200      	movs	r2, #0
 800399e:	461c      	mov	r4, r3
 80039a0:	4615      	mov	r5, r2
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	022b      	lsls	r3, r5, #8
 80039ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039b0:	0222      	lsls	r2, r4, #8
 80039b2:	68f9      	ldr	r1, [r7, #12]
 80039b4:	6849      	ldr	r1, [r1, #4]
 80039b6:	0849      	lsrs	r1, r1, #1
 80039b8:	2000      	movs	r0, #0
 80039ba:	4688      	mov	r8, r1
 80039bc:	4681      	mov	r9, r0
 80039be:	eb12 0a08 	adds.w	sl, r2, r8
 80039c2:	eb43 0b09 	adc.w	fp, r3, r9
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039d4:	4650      	mov	r0, sl
 80039d6:	4659      	mov	r1, fp
 80039d8:	f7fc fbfe 	bl	80001d8 <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039ea:	d308      	bcc.n	80039fe <UART_SetConfig+0x3de>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039f2:	d204      	bcs.n	80039fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	60da      	str	r2, [r3, #12]
 80039fc:	e0b6      	b.n	8003b6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a04:	e0b2      	b.n	8003b6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a0e:	d15e      	bne.n	8003ace <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d828      	bhi.n	8003a6a <UART_SetConfig+0x44a>
 8003a18:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <UART_SetConfig+0x400>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003a6b 	.word	0x08003a6b
 8003a30:	08003a5b 	.word	0x08003a5b
 8003a34:	08003a6b 	.word	0x08003a6b
 8003a38:	08003a6b 	.word	0x08003a6b
 8003a3c:	08003a6b 	.word	0x08003a6b
 8003a40:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7fe fbd4 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003a48:	61f8      	str	r0, [r7, #28]
        break;
 8003a4a:	e014      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7fe fbe6 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e010      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b4d      	ldr	r3, [pc, #308]	@ (8003b8c <UART_SetConfig+0x56c>)
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e00d      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7fe fb31 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	61f8      	str	r0, [r7, #28]
        break;
 8003a60:	e009      	b.n	8003a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e005      	b.n	8003a76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d077      	beq.n	8003b6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	005a      	lsls	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	441a      	add	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d916      	bls.n	8003ac6 <UART_SetConfig+0x4a6>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	d212      	bcs.n	8003ac6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f023 030f 	bic.w	r3, r3, #15
 8003aa8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	8afb      	ldrh	r3, [r7, #22]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	8afa      	ldrh	r2, [r7, #22]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e052      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003acc:	e04e      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ace:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d827      	bhi.n	8003b26 <UART_SetConfig+0x506>
 8003ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <UART_SetConfig+0x4bc>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003b27 	.word	0x08003b27
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b27 	.word	0x08003b27
 8003af4:	08003b27 	.word	0x08003b27
 8003af8:	08003b27 	.word	0x08003b27
 8003afc:	08003b1f 	.word	0x08003b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b00:	f7fe fb76 	bl	80021f0 <HAL_RCC_GetPCLK1Freq>
 8003b04:	61f8      	str	r0, [r7, #28]
        break;
 8003b06:	e014      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe fb88 	bl	800221c <HAL_RCC_GetPCLK2Freq>
 8003b0c:	61f8      	str	r0, [r7, #28]
        break;
 8003b0e:	e010      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b1e      	ldr	r3, [pc, #120]	@ (8003b8c <UART_SetConfig+0x56c>)
 8003b12:	61fb      	str	r3, [r7, #28]
        break;
 8003b14:	e00d      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe fad3 	bl	80020c0 <HAL_RCC_GetSysClockFreq>
 8003b1a:	61f8      	str	r0, [r7, #28]
        break;
 8003b1c:	e009      	b.n	8003b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b22:	61fb      	str	r3, [r7, #28]
        break;
 8003b24:	e005      	b.n	8003b32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b30:	bf00      	nop
    }

    if (pclk != 0U)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d019      	beq.n	8003b6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	085a      	lsrs	r2, r3, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	441a      	add	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d909      	bls.n	8003b66 <UART_SetConfig+0x546>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b58:	d205      	bcs.n	8003b66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	e002      	b.n	8003b6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3728      	adds	r7, #40	@ 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b86:	bf00      	nop
 8003b88:	40008000 	.word	0x40008000
 8003b8c:	00f42400 	.word	0x00f42400

08003b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01a      	beq.n	8003ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c8e:	d10a      	bne.n	8003ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b098      	sub	sp, #96	@ 0x60
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce4:	f7fc ff3c 	bl	8000b60 <HAL_GetTick>
 8003ce8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0308 	and.w	r3, r3, #8
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d12e      	bne.n	8003d56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d00:	2200      	movs	r2, #0
 8003d02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f88c 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d021      	beq.n	8003d56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e6      	bne.n	8003d12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e062      	b.n	8003e1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d149      	bne.n	8003df8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f856 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d03c      	beq.n	8003df8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e6      	bne.n	8003d7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dd0:	61fa      	str	r2, [r7, #28]
 8003dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	69b9      	ldr	r1, [r7, #24]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e011      	b.n	8003e1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3758      	adds	r7, #88	@ 0x58
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e34:	e04f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d04b      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fc fe8f 	bl	8000b60 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e04e      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d037      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b80      	cmp	r3, #128	@ 0x80
 8003e6a:	d034      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d031      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d110      	bne.n	8003ea2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2208      	movs	r2, #8
 8003e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 f8ff 	bl	800408c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2208      	movs	r2, #8
 8003e92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e029      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb0:	d111      	bne.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003eba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f8e5 	bl	800408c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e00f      	b.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d0a0      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b096      	sub	sp, #88	@ 0x58
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2222      	movs	r2, #34	@ 0x22
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d028      	beq.n	8003f86 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f38:	4a3e      	ldr	r2, [pc, #248]	@ (8004034 <UART_Start_Receive_DMA+0x134>)
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f40:	4a3d      	ldr	r2, [pc, #244]	@ (8004038 <UART_Start_Receive_DMA+0x138>)
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f48:	4a3c      	ldr	r2, [pc, #240]	@ (800403c <UART_Start_Receive_DMA+0x13c>)
 8003f4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f50:	2200      	movs	r2, #0
 8003f52:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3324      	adds	r3, #36	@ 0x24
 8003f5e:	4619      	mov	r1, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f64:	461a      	mov	r2, r3
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	f7fc ffd0 	bl	8000f0c <HAL_DMA_Start_IT>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d009      	beq.n	8003f86 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2210      	movs	r2, #16
 8003f76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e051      	b.n	800402a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	f043 0301 	orr.w	r3, r3, #1
 8003fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fe0:	637a      	str	r2, [r7, #52]	@ 0x34
 8003fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e5      	bne.n	8003fc0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	613b      	str	r3, [r7, #16]
   return(result);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800400a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004014:	623a      	str	r2, [r7, #32]
 8004016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	6a3a      	ldr	r2, [r7, #32]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	61bb      	str	r3, [r7, #24]
   return(result);
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3758      	adds	r7, #88	@ 0x58
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	0800420b 	.word	0x0800420b
 8004038:	08004337 	.word	0x08004337
 800403c:	08004375 	.word	0x08004375

08004040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	@ 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60bb      	str	r3, [r7, #8]
   return(result);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6979      	ldr	r1, [r7, #20]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	613b      	str	r3, [r7, #16]
   return(result);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e6      	bne.n	8004048 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004080:	bf00      	nop
 8004082:	3724      	adds	r7, #36	@ 0x24
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b095      	sub	sp, #84	@ 0x54
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e6      	bne.n	8004094 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3308      	adds	r3, #8
 80040cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3308      	adds	r3, #8
 80040e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d118      	bne.n	8004134 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 0310 	bic.w	r3, r3, #16
 8004116:	647b      	str	r3, [r7, #68]	@ 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6979      	ldr	r1, [r7, #20]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	e841 2300 	strex	r3, r2, [r1]
 800412c:	613b      	str	r3, [r7, #16]
   return(result);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1e6      	bne.n	8004102 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004148:	bf00      	nop
 800414a:	3754      	adds	r7, #84	@ 0x54
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b090      	sub	sp, #64	@ 0x40
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d137      	bne.n	80041e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004172:	2200      	movs	r2, #0
 8004174:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	623b      	str	r3, [r7, #32]
   return(result);
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004198:	633a      	str	r2, [r7, #48]	@ 0x30
 800419a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800419e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041a0:	e841 2300 	strex	r3, r2, [r1]
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e5      	bne.n	8004178 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	69b9      	ldr	r1, [r7, #24]
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	617b      	str	r3, [r7, #20]
   return(result);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e6      	bne.n	80041ac <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041de:	e002      	b.n	80041e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80041e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80041e2:	f7fc f98f 	bl	8000504 <HAL_UART_TxCpltCallback>
}
 80041e6:	bf00      	nop
 80041e8:	3740      	adds	r7, #64	@ 0x40
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff f9e5 	bl	80035cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b09c      	sub	sp, #112	@ 0x70
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004216:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d171      	bne.n	800430a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004228:	2200      	movs	r2, #0
 800422a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800422e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800423c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800423e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004242:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800424c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800424e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800425a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e6      	bne.n	800422e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3308      	adds	r3, #8
 8004266:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	667b      	str	r3, [r7, #100]	@ 0x64
 8004278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004280:	647a      	str	r2, [r7, #68]	@ 0x44
 8004282:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800428e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e5      	bne.n	8004260 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	623b      	str	r3, [r7, #32]
   return(result);
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e5      	bne.n	8004294 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ca:	2220      	movs	r2, #32
 80042cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d118      	bne.n	800430a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f023 0310 	bic.w	r3, r3, #16
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	69b9      	ldr	r1, [r7, #24]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	617b      	str	r3, [r7, #20]
   return(result);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e6      	bne.n	80042d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800430a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800430c:	2200      	movs	r2, #0
 800430e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800431a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800431e:	4619      	mov	r1, r3
 8004320:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004322:	f7ff f971 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004326:	e002      	b.n	800432e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004328:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800432a:	f7fc f8f9 	bl	8000520 <HAL_UART_RxCpltCallback>
}
 800432e:	bf00      	nop
 8004330:	3770      	adds	r7, #112	@ 0x70
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434e:	2b01      	cmp	r3, #1
 8004350:	d109      	bne.n	8004366 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	b29b      	uxth	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7ff f952 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004364:	e002      	b.n	800436c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff f93a 	bl	80035e0 <HAL_UART_RxHalfCpltCallback>
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004386:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800438e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439a:	2b80      	cmp	r3, #128	@ 0x80
 800439c:	d109      	bne.n	80043b2 <UART_DMAError+0x3e>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b21      	cmp	r3, #33	@ 0x21
 80043a2:	d106      	bne.n	80043b2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80043ac:	6978      	ldr	r0, [r7, #20]
 80043ae:	f7ff fe47 	bl	8004040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d109      	bne.n	80043d4 <UART_DMAError+0x60>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b22      	cmp	r3, #34	@ 0x22
 80043c4:	d106      	bne.n	80043d4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80043ce:	6978      	ldr	r0, [r7, #20]
 80043d0:	f7ff fe5c 	bl	800408c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043da:	f043 0210 	orr.w	r2, r3, #16
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e4:	6978      	ldr	r0, [r7, #20]
 80043e6:	f7ff f905 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff f8ef 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b088      	sub	sp, #32
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60bb      	str	r3, [r7, #8]
   return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e6      	bne.n	8004426 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fc f84d 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800446a:	bf00      	nop
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <memset>:
 8004486:	4402      	add	r2, r0
 8004488:	4603      	mov	r3, r0
 800448a:	4293      	cmp	r3, r2
 800448c:	d100      	bne.n	8004490 <memset+0xa>
 800448e:	4770      	bx	lr
 8004490:	f803 1b01 	strb.w	r1, [r3], #1
 8004494:	e7f9      	b.n	800448a <memset+0x4>
	...

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4d0d      	ldr	r5, [pc, #52]	@ (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	@ (80044d4 <__libc_init_array+0x3c>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2600      	movs	r6, #0
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4d0b      	ldr	r5, [pc, #44]	@ (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	@ (80044dc <__libc_init_array+0x44>)
 80044ac:	f000 f818 	bl	80044e0 <_init>
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2600      	movs	r6, #0
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	08004548 	.word	0x08004548
 80044d4:	08004548 	.word	0x08004548
 80044d8:	08004548 	.word	0x08004548
 80044dc:	0800454c 	.word	0x0800454c

080044e0 <_init>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	bf00      	nop
 80044e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e6:	bc08      	pop	{r3}
 80044e8:	469e      	mov	lr, r3
 80044ea:	4770      	bx	lr

080044ec <_fini>:
 80044ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ee:	bf00      	nop
 80044f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f2:	bc08      	pop	{r3}
 80044f4:	469e      	mov	lr, r3
 80044f6:	4770      	bx	lr
