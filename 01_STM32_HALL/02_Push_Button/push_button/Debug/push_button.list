
push_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c04  08003c04  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c0c  08003c0c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c0c  08003c0c  00004c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c10  08003c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c14  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003c7c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003c7c  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac30  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5e  00000000  00000000  0000fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00011728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073a  00000000  00000000  000120a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026875  00000000  00000000  000127e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b586  00000000  00000000  00039057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9586  00000000  00000000  000445dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012db63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c10  00000000  00000000  0012dba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001307b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b6c 	.word	0x08003b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003b6c 	.word	0x08003b6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	e009      	b.n	800056c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffc7 	bl	80004f4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	429a      	cmp	r2, r3
 8000572:	dbf1      	blt.n	8000558 <_write+0x16>
  return len;
 8000574:	687b      	ldr	r3, [r7, #4]
}
 8000576:	4618      	mov	r0, r3
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t pinState = GPIO_PIN_RESET ;
 8000586:	2300      	movs	r3, #0
 8000588:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 faa1 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f83f 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8bf 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f88d 	bl	80006b4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	// check if switch is pressed
	  if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_RESET)
 800059a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059e:	4819      	ldr	r0, [pc, #100]	@ (8000604 <main+0x84>)
 80005a0:	f000 fdc6 	bl	8001130 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1f7      	bne.n	800059a <main+0x1a>
	  {
		  // Wait till Switch relased
		  while((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET);
 80005aa:	bf00      	nop
 80005ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005b0:	4814      	ldr	r0, [pc, #80]	@ (8000604 <main+0x84>)
 80005b2:	f000 fdbd 	bl	8001130 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d0f7      	beq.n	80005ac <main+0x2c>
		  // Delay
		  HAL_Delay(500);
 80005bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005c0:	f000 fb02 	bl	8000bc8 <HAL_Delay>
		  // Counter to increment
		  pinState++ ;
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	3301      	adds	r3, #1
 80005c8:	71fb      	strb	r3, [r7, #7]
		  // check if pin count value is 1 to on LED
		  if(pinState == 1)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d109      	bne.n	80005e4 <main+0x64>
		        {
			  // ON the LED and display message
		  	 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2120      	movs	r1, #32
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f000 fdc2 	bl	8001160 <HAL_GPIO_WritePin>
		  	 	printf("Switch Pressed \n LED ON \n");
 80005dc:	480a      	ldr	r0, [pc, #40]	@ (8000608 <main+0x88>)
 80005de:	f002 ff31 	bl	8003444 <puts>
 80005e2:	e7da      	b.n	800059a <main+0x1a>
		  }
		  // check if pin count value is 2 to off LED
		  else if(pinState == 2)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d1d7      	bne.n	800059a <main+0x1a>
		  {
		  		// OFF the LED and display message
		  	 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f000 fdb5 	bl	8001160 <HAL_GPIO_WritePin>
		  	 	printf("Switch Released \n LED OFF \n");
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <main+0x8c>)
 80005f8:	f002 ff24 	bl	8003444 <puts>
		  	 	pinState = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	71fb      	strb	r3, [r7, #7]
	  if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_RESET)
 8000600:	e7cb      	b.n	800059a <main+0x1a>
 8000602:	bf00      	nop
 8000604:	48000800 	.word	0x48000800
 8000608:	08003b84 	.word	0x08003b84
 800060c:	08003ba0 	.word	0x08003ba0

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fff0 	bl	8003604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000636:	f000 fdb9 	bl	80011ac <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f8ce 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800064c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2310      	movs	r3, #16
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065e:	230a      	movs	r3, #10
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000662:	2307      	movs	r3, #7
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fdf0 	bl	8001258 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067e:	f000 f8af 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f9b8 	bl	8001a10 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a6:	f000 f89b 	bl	80007e0 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3758      	adds	r7, #88	@ 0x58
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	@ (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	@ (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	f002 f86a 	bl	80027d0 <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 f86d 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000084 	.word	0x20000084
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a2a      	ldr	r2, [pc, #168]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	4a24      	ldr	r2, [pc, #144]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800074c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	4a1e      	ldr	r2, [pc, #120]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_GPIO_Init+0xc4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2120      	movs	r1, #32
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f000 fce5 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000796:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0xc8>)
 80007ae:	f000 fb15 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b2:	2320      	movs	r3, #32
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007cc:	f000 fb06 	bl	8000ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	@ 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	@ 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2288      	movs	r2, #136	@ 0x88
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fed5 	bl	8003604 <memset>
  if(huart->Instance==USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a21      	ldr	r2, [pc, #132]	@ (80008e4 <HAL_UART_MspInit+0xb0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d13b      	bne.n	80008dc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f001 faf1 	bl	8001e58 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ffb0 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000884:	4a18      	ldr	r2, [pc, #96]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088a:	6593      	str	r3, [r2, #88]	@ 0x58
 800088c:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a4:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <HAL_UART_MspInit+0xb4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b0:	230c      	movs	r3, #12
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d8:	f000 fa80 	bl	8000ddc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008dc:	bf00      	nop
 80008de:	37b0      	adds	r7, #176	@ 0xb0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 f921 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e00a      	b.n	8000972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095c:	f3af 8000 	nop.w
 8000960:	4601      	mov	r1, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	b2ca      	uxtb	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbf0      	blt.n	800095c <_read+0x12>
  }

  return len;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
  return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_isatty>:

int _isatty(int file)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f002 fe40 	bl	80036a0 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20018000 	.word	0x20018000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	2000010c 	.word	0x2000010c
 8000a54:	20000260 	.word	0x20000260

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f002 fdff 	bl	80036ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fd67 	bl	8000580 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ac0:	08003c14 	.word	0x08003c14
  ldr r2, =_sbss
 8000ac4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac8:	20000260 	.word	0x20000260

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_Init+0x3c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <HAL_Init+0x3c>)
 8000ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	f000 f944 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f80f 	bl	8000b10 <HAL_InitTick>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
 8000afc:	e001      	b.n	8000b02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afe:	f7ff fe75 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b1c:	4b17      	ldr	r3, [pc, #92]	@ (8000b7c <HAL_InitTick+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d023      	beq.n	8000b6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_InitTick+0x70>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_InitTick+0x6c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f941 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10f      	bne.n	8000b66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d809      	bhi.n	8000b60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f919 	bl	8000d8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_InitTick+0x74>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e007      	b.n	8000b70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e004      	b.n	8000b70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
 8000b6a:	e001      	b.n	8000b70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_IncTick+0x20>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x24>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <HAL_IncTick+0x24>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000110 	.word	0x20000110

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <HAL_GetTick+0x14>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000110 	.word	0x20000110

08000bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd0:	f7ff ffee 	bl	8000bb0 <HAL_GetTick>
 8000bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be0:	d005      	beq.n	8000bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_Delay+0x44>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4413      	add	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bee:	bf00      	nop
 8000bf0:	f7ff ffde 	bl	8000bb0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8f7      	bhi.n	8000bf0 <HAL_Delay+0x28>
  {
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_SetPriority>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	@ (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	@ 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff47 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff5c 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffb0 	bl	8000d30 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e17f      	b.n	80010ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8171 	beq.w	80010e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d005      	beq.n	8000e1c <HAL_GPIO_Init+0x40>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d130      	bne.n	8000e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e52:	2201      	movs	r2, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	f003 0201 	and.w	r2, r3, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d118      	bne.n	8000ebc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80ac 	beq.w	80010e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	4a5e      	ldr	r2, [pc, #376]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8001110 <HAL_GPIO_Init+0x334>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x242>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8001114 <HAL_GPIO_Init+0x338>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8001118 <HAL_GPIO_Init+0x33c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800111c <HAL_GPIO_Init+0x340>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4c      	ldr	r2, [pc, #304]	@ (8001120 <HAL_GPIO_Init+0x344>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8001124 <HAL_GPIO_Init+0x348>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8001128 <HAL_GPIO_Init+0x34c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x22a>
 8001002:	2306      	movs	r3, #6
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001006:	2307      	movs	r3, #7
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800101e:	2300      	movs	r3, #0
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001030:	4937      	ldr	r1, [pc, #220]	@ (8001110 <HAL_GPIO_Init+0x334>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <HAL_GPIO_Init+0x350>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001062:	4a32      	ldr	r2, [pc, #200]	@ (800112c <HAL_GPIO_Init+0x350>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <HAL_GPIO_Init+0x350>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108c:	4a27      	ldr	r2, [pc, #156]	@ (800112c <HAL_GPIO_Init+0x350>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <HAL_GPIO_Init+0x350>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b6:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <HAL_GPIO_Init+0x350>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_GPIO_Init+0x350>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <HAL_GPIO_Init+0x350>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae78 	bne.w	8000dec <HAL_GPIO_Init+0x10>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	48001000 	.word	0x48001000
 8001124:	48001400 	.word	0x48001400
 8001128:	48001800 	.word	0x48001800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800117c:	e002      	b.n	8001184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40007000 	.word	0x40007000

080011ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ba:	d130      	bne.n	800121e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011c8:	d038      	beq.n	800123c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011d2:	4a1e      	ldr	r2, [pc, #120]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2232      	movs	r2, #50	@ 0x32
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f0:	e002      	b.n	80011f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001204:	d102      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f2      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001218:	d110      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e00f      	b.n	800123e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122a:	d007      	beq.n	800123c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800122c:	4b07      	ldr	r3, [pc, #28]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001234:	4a05      	ldr	r2, [pc, #20]	@ (800124c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800123a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40007000 	.word	0x40007000
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e3ca      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126a:	4b97      	ldr	r3, [pc, #604]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001274:	4b94      	ldr	r3, [pc, #592]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80e4 	beq.w	8001454 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <HAL_RCC_OscConfig+0x4a>
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2b0c      	cmp	r3, #12
 8001296:	f040 808b 	bne.w	80013b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b01      	cmp	r3, #1
 800129e:	f040 8087 	bne.w	80013b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012a2:	4b89      	ldr	r3, [pc, #548]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x62>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e3a2      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1a      	ldr	r2, [r3, #32]
 80012be:	4b82      	ldr	r3, [pc, #520]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <HAL_RCC_OscConfig+0x7c>
 80012ca:	4b7f      	ldr	r3, [pc, #508]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012d2:	e005      	b.n	80012e0 <HAL_RCC_OscConfig+0x88>
 80012d4:	4b7c      	ldr	r3, [pc, #496]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d223      	bcs.n	800132c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fd55 	bl	8001d98 <RCC_SetFlashLatencyFromMSIRange>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e383      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f8:	4b73      	ldr	r3, [pc, #460]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a72      	ldr	r2, [pc, #456]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	496d      	ldr	r1, [pc, #436]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001316:	4b6c      	ldr	r3, [pc, #432]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	4968      	ldr	r1, [pc, #416]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
 800132a:	e025      	b.n	8001378 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b63      	ldr	r3, [pc, #396]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4960      	ldr	r1, [pc, #384]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134a:	4b5f      	ldr	r3, [pc, #380]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	495b      	ldr	r1, [pc, #364]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fd15 	bl	8001d98 <RCC_SetFlashLatencyFromMSIRange>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e343      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001378:	f000 fc4a 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 800137c:	4602      	mov	r2, r0
 800137e:	4b52      	ldr	r3, [pc, #328]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	4950      	ldr	r1, [pc, #320]	@ (80014cc <HAL_RCC_OscConfig+0x274>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	4a4e      	ldr	r2, [pc, #312]	@ (80014d0 <HAL_RCC_OscConfig+0x278>)
 8001396:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001398:	4b4e      	ldr	r3, [pc, #312]	@ (80014d4 <HAL_RCC_OscConfig+0x27c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fbb7 	bl	8000b10 <HAL_InitTick>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d052      	beq.n	8001452 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	e327      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d032      	beq.n	800141e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013b8:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a42      	ldr	r2, [pc, #264]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fbf4 	bl	8000bb0 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013cc:	f7ff fbf0 	bl	8000bb0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e310      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013de:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a36      	ldr	r2, [pc, #216]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4931      	ldr	r1, [pc, #196]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001408:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	492c      	ldr	r1, [pc, #176]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e01a      	b.n	8001454 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800141e:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a29      	ldr	r2, [pc, #164]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142a:	f7ff fbc1 	bl	8000bb0 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001432:	f7ff fbbd 	bl	8000bb0 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e2dd      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f0      	bne.n	8001432 <HAL_RCC_OscConfig+0x1da>
 8001450:	e000      	b.n	8001454 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001452:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d074      	beq.n	800154a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b08      	cmp	r3, #8
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x21a>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d10e      	bne.n	800148a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d064      	beq.n	8001548 <HAL_RCC_OscConfig+0x2f0>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d160      	bne.n	8001548 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e2ba      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x24a>
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 800149a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e026      	b.n	80014f0 <HAL_RCC_OscConfig+0x298>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014aa:	d115      	bne.n	80014d8 <HAL_RCC_OscConfig+0x280>
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a02      	ldr	r2, [pc, #8]	@ (80014c8 <HAL_RCC_OscConfig+0x270>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e014      	b.n	80014f0 <HAL_RCC_OscConfig+0x298>
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	08003bbc 	.word	0x08003bbc
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004
 80014d8:	4ba0      	ldr	r3, [pc, #640]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a9f      	ldr	r2, [pc, #636]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b9d      	ldr	r3, [pc, #628]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a9c      	ldr	r2, [pc, #624]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb5a 	bl	8000bb0 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fb56 	bl	8000bb0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	@ 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e276      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001512:	4b92      	ldr	r3, [pc, #584]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x2a8>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fb46 	bl	8000bb0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fb42 	bl	8000bb0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e262      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800153a:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d0>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d060      	beq.n	8001618 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d005      	beq.n	8001568 <HAL_RCC_OscConfig+0x310>
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d119      	bne.n	8001596 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d116      	bne.n	8001596 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	4b7c      	ldr	r3, [pc, #496]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x328>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e23f      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b76      	ldr	r3, [pc, #472]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	4973      	ldr	r1, [pc, #460]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001594:	e040      	b.n	8001618 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d023      	beq.n	80015e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159e:	4b6f      	ldr	r3, [pc, #444]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb01 	bl	8000bb0 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fafd 	bl	8000bb0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e21d      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c4:	4b65      	ldr	r3, [pc, #404]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b62      	ldr	r3, [pc, #392]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	495f      	ldr	r1, [pc, #380]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e018      	b.n	8001618 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5c      	ldr	r2, [pc, #368]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80015ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fadd 	bl	8000bb0 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fad9 	bl	8000bb0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1f9      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d03c      	beq.n	800169e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695b      	ldr	r3, [r3, #20]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01c      	beq.n	8001666 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162c:	4b4b      	ldr	r3, [pc, #300]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001632:	4a4a      	ldr	r2, [pc, #296]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fab8 	bl	8000bb0 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fab4 	bl	8000bb0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e1d4      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001656:	4b41      	ldr	r3, [pc, #260]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0ef      	beq.n	8001644 <HAL_RCC_OscConfig+0x3ec>
 8001664:	e01b      	b.n	800169e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001666:	4b3d      	ldr	r3, [pc, #244]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800166c:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001676:	f7ff fa9b 	bl	8000bb0 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167e:	f7ff fa97 	bl	8000bb0 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1b7      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001690:	4b32      	ldr	r3, [pc, #200]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1ef      	bne.n	800167e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80a6 	beq.w	80017f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b0:	4b2a      	ldr	r3, [pc, #168]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80016b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10d      	bne.n	80016d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80016be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c0:	4a26      	ldr	r2, [pc, #152]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 80016ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d8:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <HAL_RCC_OscConfig+0x508>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d118      	bne.n	8001716 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <HAL_RCC_OscConfig+0x508>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <HAL_RCC_OscConfig+0x508>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f0:	f7ff fa5e 	bl	8000bb0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f8:	f7ff fa5a 	bl	8000bb0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e17a      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_RCC_OscConfig+0x508>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x4d8>
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172e:	e029      	b.n	8001784 <HAL_RCC_OscConfig+0x52c>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d115      	bne.n	8001764 <HAL_RCC_OscConfig+0x50c>
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	4a07      	ldr	r2, [pc, #28]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174e:	4a03      	ldr	r2, [pc, #12]	@ (800175c <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001758:	e014      	b.n	8001784 <HAL_RCC_OscConfig+0x52c>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
 8001764:	4b9c      	ldr	r3, [pc, #624]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176a:	4a9b      	ldr	r2, [pc, #620]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001774:	4b98      	ldr	r3, [pc, #608]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	4a97      	ldr	r2, [pc, #604]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d016      	beq.n	80017ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa10 	bl	8000bb0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fa0c 	bl	8000bb0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e12a      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017aa:	4b8b      	ldr	r3, [pc, #556]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80017ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ed      	beq.n	8001794 <HAL_RCC_OscConfig+0x53c>
 80017b8:	e015      	b.n	80017e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff f9f9 	bl	8000bb0 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff f9f5 	bl	8000bb0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e113      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d8:	4b7f      	ldr	r3, [pc, #508]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ed      	bne.n	80017c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017e6:	7ffb      	ldrb	r3, [r7, #31]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b7a      	ldr	r3, [pc, #488]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	4a79      	ldr	r2, [pc, #484]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80017f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80fe 	beq.w	80019fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001806:	2b02      	cmp	r3, #2
 8001808:	f040 80d0 	bne.w	80019ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800180c:	4b72      	ldr	r3, [pc, #456]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0203 	and.w	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	429a      	cmp	r2, r3
 800181e:	d130      	bne.n	8001882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	3b01      	subs	r3, #1
 800182c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d127      	bne.n	8001882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d11f      	bne.n	8001882 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800184c:	2a07      	cmp	r2, #7
 800184e:	bf14      	ite	ne
 8001850:	2201      	movne	r2, #1
 8001852:	2200      	moveq	r2, #0
 8001854:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001856:	4293      	cmp	r3, r2
 8001858:	d113      	bne.n	8001882 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800186a:	429a      	cmp	r2, r3
 800186c:	d109      	bne.n	8001882 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187e:	429a      	cmp	r2, r3
 8001880:	d06e      	beq.n	8001960 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b0c      	cmp	r3, #12
 8001886:	d069      	beq.n	800195c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001888:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001894:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0ad      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018a4:	4b4c      	ldr	r3, [pc, #304]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4b      	ldr	r2, [pc, #300]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80018aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018b0:	f7ff f97e 	bl	8000bb0 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f97a 	bl	8000bb0 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e09a      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ca:	4b43      	ldr	r3, [pc, #268]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d6:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	4b40      	ldr	r3, [pc, #256]	@ (80019dc <HAL_RCC_OscConfig+0x784>)
 80018dc:	4013      	ands	r3, r2
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018e6:	3a01      	subs	r2, #1
 80018e8:	0112      	lsls	r2, r2, #4
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018f0:	0212      	lsls	r2, r2, #8
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018f8:	0852      	lsrs	r2, r2, #1
 80018fa:	3a01      	subs	r2, #1
 80018fc:	0552      	lsls	r2, r2, #21
 80018fe:	4311      	orrs	r1, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001904:	0852      	lsrs	r2, r2, #1
 8001906:	3a01      	subs	r2, #1
 8001908:	0652      	lsls	r2, r2, #25
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001910:	0912      	lsrs	r2, r2, #4
 8001912:	0452      	lsls	r2, r2, #17
 8001914:	430a      	orrs	r2, r1
 8001916:	4930      	ldr	r1, [pc, #192]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001918:	4313      	orrs	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800191c:	4b2e      	ldr	r3, [pc, #184]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a2d      	ldr	r2, [pc, #180]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	4a2a      	ldr	r2, [pc, #168]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001932:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001934:	f7ff f93c 	bl	8000bb0 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193c:	f7ff f938 	bl	8000bb0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e058      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195a:	e050      	b.n	80019fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e04f      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d148      	bne.n	80019fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 8001972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001978:	4b17      	ldr	r3, [pc, #92]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4a16      	ldr	r2, [pc, #88]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 800197e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001982:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001984:	f7ff f914 	bl	8000bb0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198c:	f7ff f910 	bl	8000bb0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e030      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x734>
 80019aa:	e028      	b.n	80019fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d023      	beq.n	80019fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a08      	ldr	r2, [pc, #32]	@ (80019d8 <HAL_RCC_OscConfig+0x780>)
 80019b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff f8f7 	bl	8000bb0 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c4:	e00c      	b.n	80019e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff f8f3 	bl	8000bb0 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d905      	bls.n	80019e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e013      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
 80019d8:	40021000 	.word	0x40021000
 80019dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_RCC_OscConfig+0x7b0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ec      	bne.n	80019c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_RCC_OscConfig+0x7b0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4905      	ldr	r1, [pc, #20]	@ (8001a08 <HAL_RCC_OscConfig+0x7b0>)
 80019f2:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <HAL_RCC_OscConfig+0x7b4>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e001      	b.n	80019fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3720      	adds	r7, #32
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	feeefffc 	.word	0xfeeefffc

08001a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0e7      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a24:	4b75      	ldr	r3, [pc, #468]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d910      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b72      	ldr	r3, [pc, #456]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 0207 	bic.w	r2, r3, #7
 8001a3a:	4970      	ldr	r1, [pc, #448]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b6e      	ldr	r3, [pc, #440]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cf      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d010      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4b66      	ldr	r3, [pc, #408]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d908      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b63      	ldr	r3, [pc, #396]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4960      	ldr	r1, [pc, #384]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d04c      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	4b5a      	ldr	r3, [pc, #360]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d121      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0a6      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aae:	4b54      	ldr	r3, [pc, #336]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e09a      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e08e      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e086      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b46      	ldr	r3, [pc, #280]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4943      	ldr	r1, [pc, #268]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af8:	f7ff f85a 	bl	8000bb0 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f856 	bl	8000bb0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e06e      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b3a      	ldr	r3, [pc, #232]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d010      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d208      	bcs.n	8001b56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b44:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	492b      	ldr	r1, [pc, #172]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d210      	bcs.n	8001b86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b64:	4b25      	ldr	r3, [pc, #148]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 0207 	bic.w	r2, r3, #7
 8001b6c:	4923      	ldr	r1, [pc, #140]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_RCC_ClockConfig+0x1ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e036      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	4918      	ldr	r1, [pc, #96]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb0:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4910      	ldr	r1, [pc, #64]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc4:	f000 f824 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	490b      	ldr	r1, [pc, #44]	@ (8001c04 <HAL_RCC_ClockConfig+0x1f4>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	4a09      	ldr	r2, [pc, #36]	@ (8001c08 <HAL_RCC_ClockConfig+0x1f8>)
 8001be2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_ClockConfig+0x1fc>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ff91 	bl	8000b10 <HAL_InitTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08003bbc 	.word	0x08003bbc
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b089      	sub	sp, #36	@ 0x24
 8001c14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c28:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x34>
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d121      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d11e      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c44:	4b34      	ldr	r3, [pc, #208]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c50:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e005      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c60:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c88:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	e004      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d134      	bne.n	8001d08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d003      	beq.n	8001cbc <HAL_RCC_GetSysClockFreq+0xac>
 8001cb4:	e005      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cb8:	617b      	str	r3, [r7, #20]
      break;
 8001cba:	e005      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cbe:	617b      	str	r3, [r7, #20]
      break;
 8001cc0:	e002      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	617b      	str	r3, [r7, #20]
      break;
 8001cc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	fb03 f202 	mul.w	r2, r3, r2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	0e5b      	lsrs	r3, r3, #25
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d08:	69bb      	ldr	r3, [r7, #24]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08003bd4 	.word	0x08003bd4
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	007a1200 	.word	0x007a1200

08001d28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000000 	.word	0x20000000

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4904      	ldr	r1, [pc, #16]	@ (8001d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003bcc 	.word	0x08003bcc

08001d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d70:	f7ff ffda 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	0adb      	lsrs	r3, r3, #11
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	4904      	ldr	r1, [pc, #16]	@ (8001d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08003bcc 	.word	0x08003bcc

08001d98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001da4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001db0:	f7ff f9ee 	bl	8001190 <HAL_PWREx_GetVoltageRange>
 8001db4:	6178      	str	r0, [r7, #20]
 8001db6:	e014      	b.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dd0:	f7ff f9de 	bl	8001190 <HAL_PWREx_GetVoltageRange>
 8001dd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	4a1d      	ldr	r2, [pc, #116]	@ (8001e50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001de8:	d10b      	bne.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b80      	cmp	r3, #128	@ 0x80
 8001dee:	d919      	bls.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001df4:	d902      	bls.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df6:	2302      	movs	r3, #2
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e013      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	e010      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b80      	cmp	r3, #128	@ 0x80
 8001e06:	d902      	bls.n	8001e0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e08:	2303      	movs	r3, #3
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e00a      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b80      	cmp	r3, #128	@ 0x80
 8001e12:	d102      	bne.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e14:	2302      	movs	r3, #2
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e004      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b70      	cmp	r3, #112	@ 0x70
 8001e1e:	d101      	bne.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 0207 	bic.w	r2, r3, #7
 8001e2c:	4909      	ldr	r1, [pc, #36]	@ (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e34:	4b07      	ldr	r3, [pc, #28]	@ (8001e54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40022000 	.word	0x40022000

08001e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e60:	2300      	movs	r3, #0
 8001e62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e64:	2300      	movs	r3, #0
 8001e66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d041      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e7c:	d02a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e82:	d824      	bhi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e88:	d008      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e8e:	d81e      	bhi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e98:	d010      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e9a:	e018      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e9c:	4b86      	ldr	r3, [pc, #536]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a85      	ldr	r2, [pc, #532]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fabb 	bl	800242c <RCCEx_PLLSAI1_Config>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eba:	e00c      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3320      	adds	r3, #32
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fba6 	bl	8002614 <RCCEx_PLLSAI2_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ecc:	e003      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ed2:	e000      	b.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ed6:	7cfb      	ldrb	r3, [r7, #19]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001edc:	4b76      	ldr	r3, [pc, #472]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eea:	4973      	ldr	r1, [pc, #460]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ef2:	e001      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d041      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f0c:	d02a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f12:	d824      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f18:	d008      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f1e:	d81e      	bhi.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f28:	d010      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f2c:	4b62      	ldr	r3, [pc, #392]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a61      	ldr	r2, [pc, #388]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f38:	e015      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fa73 	bl	800242c <RCCEx_PLLSAI1_Config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f4a:	e00c      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3320      	adds	r3, #32
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fb5e 	bl	8002614 <RCCEx_PLLSAI2_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5c:	e003      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	74fb      	strb	r3, [r7, #19]
      break;
 8001f62:	e000      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f6c:	4b52      	ldr	r3, [pc, #328]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f7a:	494f      	ldr	r1, [pc, #316]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f82:	e001      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a0 	beq.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f9a:	4b47      	ldr	r3, [pc, #284]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001faa:	2300      	movs	r3, #0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00d      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b41      	ldr	r3, [pc, #260]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	4a40      	ldr	r2, [pc, #256]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a3a      	ldr	r2, [pc, #232]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd8:	f7fe fdea 	bl	8000bb0 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fde:	e009      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7fe fde6 	bl	8000bb0 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d902      	bls.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	74fb      	strb	r3, [r7, #19]
        break;
 8001ff2:	e005      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ff4:	4b31      	ldr	r3, [pc, #196]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ef      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d15c      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002006:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002010:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d01f      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	429a      	cmp	r2, r3
 8002022:	d019      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002024:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800202e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002030:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002036:	4a20      	ldr	r2, [pc, #128]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002040:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002046:	4a1c      	ldr	r2, [pc, #112]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002050:	4a19      	ldr	r2, [pc, #100]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7fe fda5 	bl	8000bb0 <HAL_GetTick>
 8002066:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002068:	e00b      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe fda1 	bl	8000bb0 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d902      	bls.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	74fb      	strb	r3, [r7, #19]
            break;
 8002080:	e006      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ec      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002096:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020a6:	4904      	ldr	r1, [pc, #16]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020ae:	e009      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
 80020b4:	e006      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c4:	7c7b      	ldrb	r3, [r7, #17]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e2:	4b98      	ldr	r3, [pc, #608]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e8:	f023 0203 	bic.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f0:	4994      	ldr	r1, [pc, #592]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002104:	4b8f      	ldr	r3, [pc, #572]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	f023 020c 	bic.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002112:	498c      	ldr	r1, [pc, #560]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002126:	4b87      	ldr	r3, [pc, #540]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	4983      	ldr	r1, [pc, #524]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002148:	4b7e      	ldr	r3, [pc, #504]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	497b      	ldr	r1, [pc, #492]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0310 	and.w	r3, r3, #16
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800216a:	4b76      	ldr	r3, [pc, #472]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002178:	4972      	ldr	r1, [pc, #456]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218c:	4b6d      	ldr	r3, [pc, #436]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	496a      	ldr	r1, [pc, #424]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ae:	4b65      	ldr	r3, [pc, #404]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	4961      	ldr	r1, [pc, #388]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	4959      	ldr	r1, [pc, #356]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f2:	4b54      	ldr	r3, [pc, #336]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002200:	4950      	ldr	r1, [pc, #320]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002214:	4b4b      	ldr	r3, [pc, #300]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002222:	4948      	ldr	r1, [pc, #288]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002236:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002244:	493f      	ldr	r1, [pc, #252]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d028      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002258:	4b3a      	ldr	r3, [pc, #232]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002266:	4937      	ldr	r1, [pc, #220]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002272:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002276:	d106      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002282:	60d3      	str	r3, [r2, #12]
 8002284:	e011      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800228a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800228e:	d10c      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f8c8 	bl	800242c <RCCEx_PLLSAI1_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d028      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022b6:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c4:	491f      	ldr	r1, [pc, #124]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d4:	d106      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e0:	60d3      	str	r3, [r2, #12]
 80022e2:	e011      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f899 	bl	800242c <RCCEx_PLLSAI1_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d02b      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002332:	d109      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a02      	ldr	r2, [pc, #8]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800233e:	60d3      	str	r3, [r2, #12]
 8002340:	e014      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800234c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002350:	d10c      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f867 	bl	800242c <RCCEx_PLLSAI1_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d02f      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002378:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002386:	4928      	ldr	r1, [pc, #160]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002396:	d10d      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3304      	adds	r3, #4
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f844 	bl	800242c <RCCEx_PLLSAI1_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d014      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	74bb      	strb	r3, [r7, #18]
 80023b2:	e011      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3320      	adds	r3, #32
 80023c2:	2102      	movs	r1, #2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f925 	bl	8002614 <RCCEx_PLLSAI2_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023e4:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023f2:	490d      	ldr	r1, [pc, #52]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002416:	4904      	ldr	r1, [pc, #16]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800241e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800243a:	4b75      	ldr	r3, [pc, #468]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d018      	beq.n	8002478 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002446:	4b72      	ldr	r3, [pc, #456]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d10d      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
       ||
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800245e:	4b6c      	ldr	r3, [pc, #432]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	091b      	lsrs	r3, r3, #4
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
       ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d047      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e044      	b.n	8002502 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d018      	beq.n	80024b2 <RCCEx_PLLSAI1_Config+0x86>
 8002480:	2b03      	cmp	r3, #3
 8002482:	d825      	bhi.n	80024d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002484:	2b01      	cmp	r3, #1
 8002486:	d002      	beq.n	800248e <RCCEx_PLLSAI1_Config+0x62>
 8002488:	2b02      	cmp	r3, #2
 800248a:	d009      	beq.n	80024a0 <RCCEx_PLLSAI1_Config+0x74>
 800248c:	e020      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800248e:	4b60      	ldr	r3, [pc, #384]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d11d      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249e:	e01a      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d116      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e013      	b.n	80024da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024b2:	4b57      	ldr	r3, [pc, #348]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024be:	4b54      	ldr	r3, [pc, #336]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ce:	e006      	b.n	80024de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      break;
 80024d4:	e004      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024de:	bf00      	nop
    }

    if(status == HAL_OK)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6819      	ldr	r1, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	430b      	orrs	r3, r1
 80024fc:	4944      	ldr	r1, [pc, #272]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d17d      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002508:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a40      	ldr	r2, [pc, #256]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fb4c 	bl	8000bb0 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800251a:	e009      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800251c:	f7fe fb48 	bl	8000bb0 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d902      	bls.n	8002530 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	73fb      	strb	r3, [r7, #15]
        break;
 800252e:	e005      	b.n	800253c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002530:	4b37      	ldr	r3, [pc, #220]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ef      	bne.n	800251c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d160      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6892      	ldr	r2, [r2, #8]
 8002558:	0211      	lsls	r1, r2, #8
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	0912      	lsrs	r2, r2, #4
 8002560:	0452      	lsls	r2, r2, #17
 8002562:	430a      	orrs	r2, r1
 8002564:	492a      	ldr	r1, [pc, #168]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	610b      	str	r3, [r1, #16]
 800256a:	e027      	b.n	80025bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d112      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002572:	4b27      	ldr	r3, [pc, #156]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800257a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6892      	ldr	r2, [r2, #8]
 8002582:	0211      	lsls	r1, r2, #8
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6912      	ldr	r2, [r2, #16]
 8002588:	0852      	lsrs	r2, r2, #1
 800258a:	3a01      	subs	r2, #1
 800258c:	0552      	lsls	r2, r2, #21
 800258e:	430a      	orrs	r2, r1
 8002590:	491f      	ldr	r1, [pc, #124]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	610b      	str	r3, [r1, #16]
 8002596:	e011      	b.n	80025bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6892      	ldr	r2, [r2, #8]
 80025a8:	0211      	lsls	r1, r2, #8
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6952      	ldr	r2, [r2, #20]
 80025ae:	0852      	lsrs	r2, r2, #1
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0652      	lsls	r2, r2, #25
 80025b4:	430a      	orrs	r2, r1
 80025b6:	4916      	ldr	r1, [pc, #88]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025bc:	4b14      	ldr	r3, [pc, #80]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a13      	ldr	r2, [pc, #76]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe faf2 	bl	8000bb0 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ce:	e009      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025d0:	f7fe faee 	bl	8000bb0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	73fb      	strb	r3, [r7, #15]
          break;
 80025e2:	e005      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4904      	ldr	r1, [pc, #16]	@ (8002610 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002622:	4b6a      	ldr	r3, [pc, #424]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800262e:	4b67      	ldr	r3, [pc, #412]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0203 	and.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d10d      	bne.n	800265a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
       ||
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002646:	4b61      	ldr	r3, [pc, #388]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
       ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d047      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e044      	b.n	80026ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d018      	beq.n	800269a <RCCEx_PLLSAI2_Config+0x86>
 8002668:	2b03      	cmp	r3, #3
 800266a:	d825      	bhi.n	80026b8 <RCCEx_PLLSAI2_Config+0xa4>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d002      	beq.n	8002676 <RCCEx_PLLSAI2_Config+0x62>
 8002670:	2b02      	cmp	r3, #2
 8002672:	d009      	beq.n	8002688 <RCCEx_PLLSAI2_Config+0x74>
 8002674:	e020      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002676:	4b55      	ldr	r3, [pc, #340]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d11d      	bne.n	80026be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002686:	e01a      	b.n	80026be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002688:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d116      	bne.n	80026c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e013      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800269a:	4b4c      	ldr	r3, [pc, #304]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026a6:	4b49      	ldr	r3, [pc, #292]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026b6:	e006      	b.n	80026c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      break;
 80026bc:	e004      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10d      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ce:	4b3f      	ldr	r3, [pc, #252]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	430b      	orrs	r3, r1
 80026e4:	4939      	ldr	r1, [pc, #228]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d167      	bne.n	80027c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026f0:	4b36      	ldr	r3, [pc, #216]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a35      	ldr	r2, [pc, #212]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7fe fa58 	bl	8000bb0 <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002702:	e009      	b.n	8002718 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002704:	f7fe fa54 	bl	8000bb0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	73fb      	strb	r3, [r7, #15]
        break;
 8002716:	e005      	b.n	8002724 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002718:	4b2c      	ldr	r3, [pc, #176]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ef      	bne.n	8002704 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14a      	bne.n	80027c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	0211      	lsls	r1, r2, #8
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68d2      	ldr	r2, [r2, #12]
 8002746:	0912      	lsrs	r2, r2, #4
 8002748:	0452      	lsls	r2, r2, #17
 800274a:	430a      	orrs	r2, r1
 800274c:	491f      	ldr	r1, [pc, #124]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	614b      	str	r3, [r1, #20]
 8002752:	e011      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800275c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	0211      	lsls	r1, r2, #8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6912      	ldr	r2, [r2, #16]
 800276a:	0852      	lsrs	r2, r2, #1
 800276c:	3a01      	subs	r2, #1
 800276e:	0652      	lsls	r2, r2, #25
 8002770:	430a      	orrs	r2, r1
 8002772:	4916      	ldr	r1, [pc, #88]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002782:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7fe fa14 	bl	8000bb0 <HAL_GetTick>
 8002788:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800278a:	e009      	b.n	80027a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800278c:	f7fe fa10 	bl	8000bb0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d902      	bls.n	80027a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	73fb      	strb	r3, [r7, #15]
          break;
 800279e:	e005      	b.n	80027ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027a0:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ef      	beq.n	800278c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027b2:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4904      	ldr	r1, [pc, #16]	@ (80027cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e040      	b.n	8002864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe f81e 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	@ 0x24
 80027fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fae0 	bl	8002ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f825 	bl	800286c <UART_SetConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01b      	b.n	8002864 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800283a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800284a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fb5f 	bl	8002f20 <UART_CheckIdleState>
 8002862:	4603      	mov	r3, r0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b08a      	sub	sp, #40	@ 0x28
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	4313      	orrs	r3, r2
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4ba4      	ldr	r3, [pc, #656]	@ (8002b2c <UART_SetConfig+0x2c0>)
 800289c:	4013      	ands	r3, r2
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a99      	ldr	r2, [pc, #612]	@ (8002b30 <UART_SetConfig+0x2c4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d004      	beq.n	80028d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	4313      	orrs	r3, r2
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	430a      	orrs	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a90      	ldr	r2, [pc, #576]	@ (8002b34 <UART_SetConfig+0x2c8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d126      	bne.n	8002944 <UART_SetConfig+0xd8>
 80028f6:	4b90      	ldr	r3, [pc, #576]	@ (8002b38 <UART_SetConfig+0x2cc>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b03      	cmp	r3, #3
 8002902:	d81b      	bhi.n	800293c <UART_SetConfig+0xd0>
 8002904:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <UART_SetConfig+0xa0>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	0800292d 	.word	0x0800292d
 8002914:	08002925 	.word	0x08002925
 8002918:	08002935 	.word	0x08002935
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002922:	e116      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002924:	2302      	movs	r3, #2
 8002926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800292a:	e112      	b.n	8002b52 <UART_SetConfig+0x2e6>
 800292c:	2304      	movs	r3, #4
 800292e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002932:	e10e      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002934:	2308      	movs	r3, #8
 8002936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800293a:	e10a      	b.n	8002b52 <UART_SetConfig+0x2e6>
 800293c:	2310      	movs	r3, #16
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002942:	e106      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a7c      	ldr	r2, [pc, #496]	@ (8002b3c <UART_SetConfig+0x2d0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d138      	bne.n	80029c0 <UART_SetConfig+0x154>
 800294e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b38 <UART_SetConfig+0x2cc>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d82d      	bhi.n	80029b8 <UART_SetConfig+0x14c>
 800295c:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <UART_SetConfig+0xf8>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002999 	.word	0x08002999
 8002968:	080029b9 	.word	0x080029b9
 800296c:	080029b9 	.word	0x080029b9
 8002970:	080029b9 	.word	0x080029b9
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029b9 	.word	0x080029b9
 800297c:	080029b9 	.word	0x080029b9
 8002980:	080029b9 	.word	0x080029b9
 8002984:	080029a1 	.word	0x080029a1
 8002988:	080029b9 	.word	0x080029b9
 800298c:	080029b9 	.word	0x080029b9
 8002990:	080029b9 	.word	0x080029b9
 8002994:	080029b1 	.word	0x080029b1
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800299e:	e0d8      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029a0:	2302      	movs	r3, #2
 80029a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a6:	e0d4      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029a8:	2304      	movs	r3, #4
 80029aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ae:	e0d0      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029b0:	2308      	movs	r3, #8
 80029b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b6:	e0cc      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029b8:	2310      	movs	r3, #16
 80029ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029be:	e0c8      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002b40 <UART_SetConfig+0x2d4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d125      	bne.n	8002a16 <UART_SetConfig+0x1aa>
 80029ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002b38 <UART_SetConfig+0x2cc>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80029d4:	2b30      	cmp	r3, #48	@ 0x30
 80029d6:	d016      	beq.n	8002a06 <UART_SetConfig+0x19a>
 80029d8:	2b30      	cmp	r3, #48	@ 0x30
 80029da:	d818      	bhi.n	8002a0e <UART_SetConfig+0x1a2>
 80029dc:	2b20      	cmp	r3, #32
 80029de:	d00a      	beq.n	80029f6 <UART_SetConfig+0x18a>
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d814      	bhi.n	8002a0e <UART_SetConfig+0x1a2>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <UART_SetConfig+0x182>
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d008      	beq.n	80029fe <UART_SetConfig+0x192>
 80029ec:	e00f      	b.n	8002a0e <UART_SetConfig+0x1a2>
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029f4:	e0ad      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029f6:	2302      	movs	r3, #2
 80029f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fc:	e0a9      	b.n	8002b52 <UART_SetConfig+0x2e6>
 80029fe:	2304      	movs	r3, #4
 8002a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a04:	e0a5      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a06:	2308      	movs	r3, #8
 8002a08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0c:	e0a1      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a0e:	2310      	movs	r3, #16
 8002a10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a14:	e09d      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b44 <UART_SetConfig+0x2d8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d125      	bne.n	8002a6c <UART_SetConfig+0x200>
 8002a20:	4b45      	ldr	r3, [pc, #276]	@ (8002b38 <UART_SetConfig+0x2cc>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a2c:	d016      	beq.n	8002a5c <UART_SetConfig+0x1f0>
 8002a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a30:	d818      	bhi.n	8002a64 <UART_SetConfig+0x1f8>
 8002a32:	2b80      	cmp	r3, #128	@ 0x80
 8002a34:	d00a      	beq.n	8002a4c <UART_SetConfig+0x1e0>
 8002a36:	2b80      	cmp	r3, #128	@ 0x80
 8002a38:	d814      	bhi.n	8002a64 <UART_SetConfig+0x1f8>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <UART_SetConfig+0x1d8>
 8002a3e:	2b40      	cmp	r3, #64	@ 0x40
 8002a40:	d008      	beq.n	8002a54 <UART_SetConfig+0x1e8>
 8002a42:	e00f      	b.n	8002a64 <UART_SetConfig+0x1f8>
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4a:	e082      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a52:	e07e      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a54:	2304      	movs	r3, #4
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5a:	e07a      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a62:	e076      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a64:	2310      	movs	r3, #16
 8002a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a6a:	e072      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a35      	ldr	r2, [pc, #212]	@ (8002b48 <UART_SetConfig+0x2dc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12a      	bne.n	8002acc <UART_SetConfig+0x260>
 8002a76:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <UART_SetConfig+0x2cc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a84:	d01a      	beq.n	8002abc <UART_SetConfig+0x250>
 8002a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a8a:	d81b      	bhi.n	8002ac4 <UART_SetConfig+0x258>
 8002a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a90:	d00c      	beq.n	8002aac <UART_SetConfig+0x240>
 8002a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a96:	d815      	bhi.n	8002ac4 <UART_SetConfig+0x258>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <UART_SetConfig+0x238>
 8002a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa0:	d008      	beq.n	8002ab4 <UART_SetConfig+0x248>
 8002aa2:	e00f      	b.n	8002ac4 <UART_SetConfig+0x258>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aaa:	e052      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002aac:	2302      	movs	r3, #2
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab2:	e04e      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aba:	e04a      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002abc:	2308      	movs	r3, #8
 8002abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac2:	e046      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aca:	e042      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <UART_SetConfig+0x2c4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d13a      	bne.n	8002b4c <UART_SetConfig+0x2e0>
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <UART_SetConfig+0x2cc>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002adc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ae0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ae4:	d01a      	beq.n	8002b1c <UART_SetConfig+0x2b0>
 8002ae6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002aea:	d81b      	bhi.n	8002b24 <UART_SetConfig+0x2b8>
 8002aec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af0:	d00c      	beq.n	8002b0c <UART_SetConfig+0x2a0>
 8002af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002af6:	d815      	bhi.n	8002b24 <UART_SetConfig+0x2b8>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <UART_SetConfig+0x298>
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b00:	d008      	beq.n	8002b14 <UART_SetConfig+0x2a8>
 8002b02:	e00f      	b.n	8002b24 <UART_SetConfig+0x2b8>
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0a:	e022      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b12:	e01e      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002b14:	2304      	movs	r3, #4
 8002b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1a:	e01a      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b22:	e016      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002b24:	2310      	movs	r3, #16
 8002b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2a:	e012      	b.n	8002b52 <UART_SetConfig+0x2e6>
 8002b2c:	efff69f3 	.word	0xefff69f3
 8002b30:	40008000 	.word	0x40008000
 8002b34:	40013800 	.word	0x40013800
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40004400 	.word	0x40004400
 8002b40:	40004800 	.word	0x40004800
 8002b44:	40004c00 	.word	0x40004c00
 8002b48:	40005000 	.word	0x40005000
 8002b4c:	2310      	movs	r3, #16
 8002b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a9f      	ldr	r2, [pc, #636]	@ (8002dd4 <UART_SetConfig+0x568>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d17a      	bne.n	8002c52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d824      	bhi.n	8002bae <UART_SetConfig+0x342>
 8002b64:	a201      	add	r2, pc, #4	@ (adr r2, 8002b6c <UART_SetConfig+0x300>)
 8002b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6a:	bf00      	nop
 8002b6c:	08002b91 	.word	0x08002b91
 8002b70:	08002baf 	.word	0x08002baf
 8002b74:	08002b99 	.word	0x08002b99
 8002b78:	08002baf 	.word	0x08002baf
 8002b7c:	08002b9f 	.word	0x08002b9f
 8002b80:	08002baf 	.word	0x08002baf
 8002b84:	08002baf 	.word	0x08002baf
 8002b88:	08002baf 	.word	0x08002baf
 8002b8c:	08002ba7 	.word	0x08002ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b90:	f7ff f8d6 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002b94:	61f8      	str	r0, [r7, #28]
        break;
 8002b96:	e010      	b.n	8002bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b98:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd8 <UART_SetConfig+0x56c>)
 8002b9a:	61fb      	str	r3, [r7, #28]
        break;
 8002b9c:	e00d      	b.n	8002bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7ff f837 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002ba2:	61f8      	str	r0, [r7, #28]
        break;
 8002ba4:	e009      	b.n	8002bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002baa:	61fb      	str	r3, [r7, #28]
        break;
 8002bac:	e005      	b.n	8002bba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80fb 	beq.w	8002db8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d305      	bcc.n	8002bde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d903      	bls.n	8002be6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002be4:	e0e8      	b.n	8002db8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2200      	movs	r2, #0
 8002bea:	461c      	mov	r4, r3
 8002bec:	4615      	mov	r5, r2
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	022b      	lsls	r3, r5, #8
 8002bf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bfc:	0222      	lsls	r2, r4, #8
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	6849      	ldr	r1, [r1, #4]
 8002c02:	0849      	lsrs	r1, r1, #1
 8002c04:	2000      	movs	r0, #0
 8002c06:	4688      	mov	r8, r1
 8002c08:	4681      	mov	r9, r0
 8002c0a:	eb12 0a08 	adds.w	sl, r2, r8
 8002c0e:	eb43 0b09 	adc.w	fp, r3, r9
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c20:	4650      	mov	r0, sl
 8002c22:	4659      	mov	r1, fp
 8002c24:	f7fd fad0 	bl	80001c8 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c36:	d308      	bcc.n	8002c4a <UART_SetConfig+0x3de>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c3e:	d204      	bcs.n	8002c4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	60da      	str	r2, [r3, #12]
 8002c48:	e0b6      	b.n	8002db8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c50:	e0b2      	b.n	8002db8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c5a:	d15e      	bne.n	8002d1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d828      	bhi.n	8002cb6 <UART_SetConfig+0x44a>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <UART_SetConfig+0x400>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c91 	.word	0x08002c91
 8002c70:	08002c99 	.word	0x08002c99
 8002c74:	08002ca1 	.word	0x08002ca1
 8002c78:	08002cb7 	.word	0x08002cb7
 8002c7c:	08002ca7 	.word	0x08002ca7
 8002c80:	08002cb7 	.word	0x08002cb7
 8002c84:	08002cb7 	.word	0x08002cb7
 8002c88:	08002cb7 	.word	0x08002cb7
 8002c8c:	08002caf 	.word	0x08002caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff f856 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002c94:	61f8      	str	r0, [r7, #28]
        break;
 8002c96:	e014      	b.n	8002cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c98:	f7ff f868 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002c9c:	61f8      	str	r0, [r7, #28]
        break;
 8002c9e:	e010      	b.n	8002cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd8 <UART_SetConfig+0x56c>)
 8002ca2:	61fb      	str	r3, [r7, #28]
        break;
 8002ca4:	e00d      	b.n	8002cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca6:	f7fe ffb3 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002caa:	61f8      	str	r0, [r7, #28]
        break;
 8002cac:	e009      	b.n	8002cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cb2:	61fb      	str	r3, [r7, #28]
        break;
 8002cb4:	e005      	b.n	8002cc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d077      	beq.n	8002db8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005a      	lsls	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	441a      	add	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b0f      	cmp	r3, #15
 8002ce2:	d916      	bls.n	8002d12 <UART_SetConfig+0x4a6>
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cea:	d212      	bcs.n	8002d12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	8afb      	ldrh	r3, [r7, #22]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	8afa      	ldrh	r2, [r7, #22]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	e052      	b.n	8002db8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d18:	e04e      	b.n	8002db8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d827      	bhi.n	8002d72 <UART_SetConfig+0x506>
 8002d22:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <UART_SetConfig+0x4bc>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d4d 	.word	0x08002d4d
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08002d73 	.word	0x08002d73
 8002d38:	08002d63 	.word	0x08002d63
 8002d3c:	08002d73 	.word	0x08002d73
 8002d40:	08002d73 	.word	0x08002d73
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d6b 	.word	0x08002d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d4c:	f7fe fff8 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 8002d50:	61f8      	str	r0, [r7, #28]
        break;
 8002d52:	e014      	b.n	8002d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7ff f80a 	bl	8001d6c <HAL_RCC_GetPCLK2Freq>
 8002d58:	61f8      	str	r0, [r7, #28]
        break;
 8002d5a:	e010      	b.n	8002d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <UART_SetConfig+0x56c>)
 8002d5e:	61fb      	str	r3, [r7, #28]
        break;
 8002d60:	e00d      	b.n	8002d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d62:	f7fe ff55 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002d66:	61f8      	str	r0, [r7, #28]
        break;
 8002d68:	e009      	b.n	8002d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d6e:	61fb      	str	r3, [r7, #28]
        break;
 8002d70:	e005      	b.n	8002d7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d019      	beq.n	8002db8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	085a      	lsrs	r2, r3, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d909      	bls.n	8002db2 <UART_SetConfig+0x546>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da4:	d205      	bcs.n	8002db2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60da      	str	r2, [r3, #12]
 8002db0:	e002      	b.n	8002db8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3728      	adds	r7, #40	@ 0x28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40008000 	.word	0x40008000
 8002dd8:	00f42400 	.word	0x00f42400

08002ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eda:	d10a      	bne.n	8002ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b098      	sub	sp, #96	@ 0x60
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f30:	f7fd fe3e 	bl	8000bb0 <HAL_GetTick>
 8002f34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d12e      	bne.n	8002fa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f88c 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d021      	beq.n	8002fa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e6      	bne.n	8002f5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e062      	b.n	8003068 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d149      	bne.n	8003044 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f856 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03c      	beq.n	8003044 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	60fb      	str	r3, [r7, #12]
   return(result);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800301c:	61fa      	str	r2, [r7, #28]
 800301e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	69b9      	ldr	r1, [r7, #24]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	617b      	str	r3, [r7, #20]
   return(result);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e011      	b.n	8003068 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3758      	adds	r7, #88	@ 0x58
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003080:	e04f      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d04b      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fd fd91 	bl	8000bb0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e04e      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d037      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d034      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d031      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d110      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f838 	bl	800314a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2208      	movs	r2, #8
 80030de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e029      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030fc:	d111      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f81e 	bl	800314a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e00f      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	429a      	cmp	r2, r3
 800313e:	d0a0      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800314a:	b480      	push	{r7}
 800314c:	b095      	sub	sp, #84	@ 0x54
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003170:	643b      	str	r3, [r7, #64]	@ 0x40
 8003172:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800317e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e6      	bne.n	8003152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	61fb      	str	r3, [r7, #28]
   return(result);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3308      	adds	r3, #8
 80031a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e5      	bne.n	8003184 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d118      	bne.n	80031f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f023 0310 	bic.w	r3, r3, #16
 80031d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	613b      	str	r3, [r7, #16]
   return(result);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e6      	bne.n	80031c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003206:	bf00      	nop
 8003208:	3754      	adds	r7, #84	@ 0x54
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <std>:
 8003214:	2300      	movs	r3, #0
 8003216:	b510      	push	{r4, lr}
 8003218:	4604      	mov	r4, r0
 800321a:	e9c0 3300 	strd	r3, r3, [r0]
 800321e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003222:	6083      	str	r3, [r0, #8]
 8003224:	8181      	strh	r1, [r0, #12]
 8003226:	6643      	str	r3, [r0, #100]	@ 0x64
 8003228:	81c2      	strh	r2, [r0, #14]
 800322a:	6183      	str	r3, [r0, #24]
 800322c:	4619      	mov	r1, r3
 800322e:	2208      	movs	r2, #8
 8003230:	305c      	adds	r0, #92	@ 0x5c
 8003232:	f000 f9e7 	bl	8003604 <memset>
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <std+0x58>)
 8003238:	6263      	str	r3, [r4, #36]	@ 0x24
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <std+0x5c>)
 800323c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <std+0x60>)
 8003240:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003242:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <std+0x64>)
 8003244:	6323      	str	r3, [r4, #48]	@ 0x30
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <std+0x68>)
 8003248:	6224      	str	r4, [r4, #32]
 800324a:	429c      	cmp	r4, r3
 800324c:	d006      	beq.n	800325c <std+0x48>
 800324e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003252:	4294      	cmp	r4, r2
 8003254:	d002      	beq.n	800325c <std+0x48>
 8003256:	33d0      	adds	r3, #208	@ 0xd0
 8003258:	429c      	cmp	r4, r3
 800325a:	d105      	bne.n	8003268 <std+0x54>
 800325c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003264:	f000 ba46 	b.w	80036f4 <__retarget_lock_init_recursive>
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop
 800326c:	08003455 	.word	0x08003455
 8003270:	08003477 	.word	0x08003477
 8003274:	080034af 	.word	0x080034af
 8003278:	080034d3 	.word	0x080034d3
 800327c:	20000114 	.word	0x20000114

08003280 <stdio_exit_handler>:
 8003280:	4a02      	ldr	r2, [pc, #8]	@ (800328c <stdio_exit_handler+0xc>)
 8003282:	4903      	ldr	r1, [pc, #12]	@ (8003290 <stdio_exit_handler+0x10>)
 8003284:	4803      	ldr	r0, [pc, #12]	@ (8003294 <stdio_exit_handler+0x14>)
 8003286:	f000 b869 	b.w	800335c <_fwalk_sglue>
 800328a:	bf00      	nop
 800328c:	2000000c 	.word	0x2000000c
 8003290:	080039f5 	.word	0x080039f5
 8003294:	2000001c 	.word	0x2000001c

08003298 <cleanup_stdio>:
 8003298:	6841      	ldr	r1, [r0, #4]
 800329a:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <cleanup_stdio+0x34>)
 800329c:	4299      	cmp	r1, r3
 800329e:	b510      	push	{r4, lr}
 80032a0:	4604      	mov	r4, r0
 80032a2:	d001      	beq.n	80032a8 <cleanup_stdio+0x10>
 80032a4:	f000 fba6 	bl	80039f4 <_fflush_r>
 80032a8:	68a1      	ldr	r1, [r4, #8]
 80032aa:	4b09      	ldr	r3, [pc, #36]	@ (80032d0 <cleanup_stdio+0x38>)
 80032ac:	4299      	cmp	r1, r3
 80032ae:	d002      	beq.n	80032b6 <cleanup_stdio+0x1e>
 80032b0:	4620      	mov	r0, r4
 80032b2:	f000 fb9f 	bl	80039f4 <_fflush_r>
 80032b6:	68e1      	ldr	r1, [r4, #12]
 80032b8:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <cleanup_stdio+0x3c>)
 80032ba:	4299      	cmp	r1, r3
 80032bc:	d004      	beq.n	80032c8 <cleanup_stdio+0x30>
 80032be:	4620      	mov	r0, r4
 80032c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032c4:	f000 bb96 	b.w	80039f4 <_fflush_r>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	20000114 	.word	0x20000114
 80032d0:	2000017c 	.word	0x2000017c
 80032d4:	200001e4 	.word	0x200001e4

080032d8 <global_stdio_init.part.0>:
 80032d8:	b510      	push	{r4, lr}
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <global_stdio_init.part.0+0x30>)
 80032dc:	4c0b      	ldr	r4, [pc, #44]	@ (800330c <global_stdio_init.part.0+0x34>)
 80032de:	4a0c      	ldr	r2, [pc, #48]	@ (8003310 <global_stdio_init.part.0+0x38>)
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	4620      	mov	r0, r4
 80032e4:	2200      	movs	r2, #0
 80032e6:	2104      	movs	r1, #4
 80032e8:	f7ff ff94 	bl	8003214 <std>
 80032ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032f0:	2201      	movs	r2, #1
 80032f2:	2109      	movs	r1, #9
 80032f4:	f7ff ff8e 	bl	8003214 <std>
 80032f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032fc:	2202      	movs	r2, #2
 80032fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003302:	2112      	movs	r1, #18
 8003304:	f7ff bf86 	b.w	8003214 <std>
 8003308:	2000024c 	.word	0x2000024c
 800330c:	20000114 	.word	0x20000114
 8003310:	08003281 	.word	0x08003281

08003314 <__sfp_lock_acquire>:
 8003314:	4801      	ldr	r0, [pc, #4]	@ (800331c <__sfp_lock_acquire+0x8>)
 8003316:	f000 b9ee 	b.w	80036f6 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	20000255 	.word	0x20000255

08003320 <__sfp_lock_release>:
 8003320:	4801      	ldr	r0, [pc, #4]	@ (8003328 <__sfp_lock_release+0x8>)
 8003322:	f000 b9e9 	b.w	80036f8 <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	20000255 	.word	0x20000255

0800332c <__sinit>:
 800332c:	b510      	push	{r4, lr}
 800332e:	4604      	mov	r4, r0
 8003330:	f7ff fff0 	bl	8003314 <__sfp_lock_acquire>
 8003334:	6a23      	ldr	r3, [r4, #32]
 8003336:	b11b      	cbz	r3, 8003340 <__sinit+0x14>
 8003338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800333c:	f7ff bff0 	b.w	8003320 <__sfp_lock_release>
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <__sinit+0x28>)
 8003342:	6223      	str	r3, [r4, #32]
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <__sinit+0x2c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f5      	bne.n	8003338 <__sinit+0xc>
 800334c:	f7ff ffc4 	bl	80032d8 <global_stdio_init.part.0>
 8003350:	e7f2      	b.n	8003338 <__sinit+0xc>
 8003352:	bf00      	nop
 8003354:	08003299 	.word	0x08003299
 8003358:	2000024c 	.word	0x2000024c

0800335c <_fwalk_sglue>:
 800335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003360:	4607      	mov	r7, r0
 8003362:	4688      	mov	r8, r1
 8003364:	4614      	mov	r4, r2
 8003366:	2600      	movs	r6, #0
 8003368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800336c:	f1b9 0901 	subs.w	r9, r9, #1
 8003370:	d505      	bpl.n	800337e <_fwalk_sglue+0x22>
 8003372:	6824      	ldr	r4, [r4, #0]
 8003374:	2c00      	cmp	r4, #0
 8003376:	d1f7      	bne.n	8003368 <_fwalk_sglue+0xc>
 8003378:	4630      	mov	r0, r6
 800337a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800337e:	89ab      	ldrh	r3, [r5, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d907      	bls.n	8003394 <_fwalk_sglue+0x38>
 8003384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003388:	3301      	adds	r3, #1
 800338a:	d003      	beq.n	8003394 <_fwalk_sglue+0x38>
 800338c:	4629      	mov	r1, r5
 800338e:	4638      	mov	r0, r7
 8003390:	47c0      	blx	r8
 8003392:	4306      	orrs	r6, r0
 8003394:	3568      	adds	r5, #104	@ 0x68
 8003396:	e7e9      	b.n	800336c <_fwalk_sglue+0x10>

08003398 <_puts_r>:
 8003398:	6a03      	ldr	r3, [r0, #32]
 800339a:	b570      	push	{r4, r5, r6, lr}
 800339c:	6884      	ldr	r4, [r0, #8]
 800339e:	4605      	mov	r5, r0
 80033a0:	460e      	mov	r6, r1
 80033a2:	b90b      	cbnz	r3, 80033a8 <_puts_r+0x10>
 80033a4:	f7ff ffc2 	bl	800332c <__sinit>
 80033a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033aa:	07db      	lsls	r3, r3, #31
 80033ac:	d405      	bmi.n	80033ba <_puts_r+0x22>
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	0598      	lsls	r0, r3, #22
 80033b2:	d402      	bmi.n	80033ba <_puts_r+0x22>
 80033b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033b6:	f000 f99e 	bl	80036f6 <__retarget_lock_acquire_recursive>
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	0719      	lsls	r1, r3, #28
 80033be:	d502      	bpl.n	80033c6 <_puts_r+0x2e>
 80033c0:	6923      	ldr	r3, [r4, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d135      	bne.n	8003432 <_puts_r+0x9a>
 80033c6:	4621      	mov	r1, r4
 80033c8:	4628      	mov	r0, r5
 80033ca:	f000 f8c5 	bl	8003558 <__swsetup_r>
 80033ce:	b380      	cbz	r0, 8003432 <_puts_r+0x9a>
 80033d0:	f04f 35ff 	mov.w	r5, #4294967295
 80033d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033d6:	07da      	lsls	r2, r3, #31
 80033d8:	d405      	bmi.n	80033e6 <_puts_r+0x4e>
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	059b      	lsls	r3, r3, #22
 80033de:	d402      	bmi.n	80033e6 <_puts_r+0x4e>
 80033e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033e2:	f000 f989 	bl	80036f8 <__retarget_lock_release_recursive>
 80033e6:	4628      	mov	r0, r5
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da04      	bge.n	80033f8 <_puts_r+0x60>
 80033ee:	69a2      	ldr	r2, [r4, #24]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	dc17      	bgt.n	8003424 <_puts_r+0x8c>
 80033f4:	290a      	cmp	r1, #10
 80033f6:	d015      	beq.n	8003424 <_puts_r+0x8c>
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	6022      	str	r2, [r4, #0]
 80033fe:	7019      	strb	r1, [r3, #0]
 8003400:	68a3      	ldr	r3, [r4, #8]
 8003402:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003406:	3b01      	subs	r3, #1
 8003408:	60a3      	str	r3, [r4, #8]
 800340a:	2900      	cmp	r1, #0
 800340c:	d1ed      	bne.n	80033ea <_puts_r+0x52>
 800340e:	2b00      	cmp	r3, #0
 8003410:	da11      	bge.n	8003436 <_puts_r+0x9e>
 8003412:	4622      	mov	r2, r4
 8003414:	210a      	movs	r1, #10
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f85f 	bl	80034da <__swbuf_r>
 800341c:	3001      	adds	r0, #1
 800341e:	d0d7      	beq.n	80033d0 <_puts_r+0x38>
 8003420:	250a      	movs	r5, #10
 8003422:	e7d7      	b.n	80033d4 <_puts_r+0x3c>
 8003424:	4622      	mov	r2, r4
 8003426:	4628      	mov	r0, r5
 8003428:	f000 f857 	bl	80034da <__swbuf_r>
 800342c:	3001      	adds	r0, #1
 800342e:	d1e7      	bne.n	8003400 <_puts_r+0x68>
 8003430:	e7ce      	b.n	80033d0 <_puts_r+0x38>
 8003432:	3e01      	subs	r6, #1
 8003434:	e7e4      	b.n	8003400 <_puts_r+0x68>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	6022      	str	r2, [r4, #0]
 800343c:	220a      	movs	r2, #10
 800343e:	701a      	strb	r2, [r3, #0]
 8003440:	e7ee      	b.n	8003420 <_puts_r+0x88>
	...

08003444 <puts>:
 8003444:	4b02      	ldr	r3, [pc, #8]	@ (8003450 <puts+0xc>)
 8003446:	4601      	mov	r1, r0
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	f7ff bfa5 	b.w	8003398 <_puts_r>
 800344e:	bf00      	nop
 8003450:	20000018 	.word	0x20000018

08003454 <__sread>:
 8003454:	b510      	push	{r4, lr}
 8003456:	460c      	mov	r4, r1
 8003458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800345c:	f000 f8fc 	bl	8003658 <_read_r>
 8003460:	2800      	cmp	r0, #0
 8003462:	bfab      	itete	ge
 8003464:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003466:	89a3      	ldrhlt	r3, [r4, #12]
 8003468:	181b      	addge	r3, r3, r0
 800346a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800346e:	bfac      	ite	ge
 8003470:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003472:	81a3      	strhlt	r3, [r4, #12]
 8003474:	bd10      	pop	{r4, pc}

08003476 <__swrite>:
 8003476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347a:	461f      	mov	r7, r3
 800347c:	898b      	ldrh	r3, [r1, #12]
 800347e:	05db      	lsls	r3, r3, #23
 8003480:	4605      	mov	r5, r0
 8003482:	460c      	mov	r4, r1
 8003484:	4616      	mov	r6, r2
 8003486:	d505      	bpl.n	8003494 <__swrite+0x1e>
 8003488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348c:	2302      	movs	r3, #2
 800348e:	2200      	movs	r2, #0
 8003490:	f000 f8d0 	bl	8003634 <_lseek_r>
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800349a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800349e:	81a3      	strh	r3, [r4, #12]
 80034a0:	4632      	mov	r2, r6
 80034a2:	463b      	mov	r3, r7
 80034a4:	4628      	mov	r0, r5
 80034a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034aa:	f000 b8e7 	b.w	800367c <_write_r>

080034ae <__sseek>:
 80034ae:	b510      	push	{r4, lr}
 80034b0:	460c      	mov	r4, r1
 80034b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034b6:	f000 f8bd 	bl	8003634 <_lseek_r>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	bf15      	itete	ne
 80034c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80034c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80034c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80034ca:	81a3      	strheq	r3, [r4, #12]
 80034cc:	bf18      	it	ne
 80034ce:	81a3      	strhne	r3, [r4, #12]
 80034d0:	bd10      	pop	{r4, pc}

080034d2 <__sclose>:
 80034d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d6:	f000 b89d 	b.w	8003614 <_close_r>

080034da <__swbuf_r>:
 80034da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034dc:	460e      	mov	r6, r1
 80034de:	4614      	mov	r4, r2
 80034e0:	4605      	mov	r5, r0
 80034e2:	b118      	cbz	r0, 80034ec <__swbuf_r+0x12>
 80034e4:	6a03      	ldr	r3, [r0, #32]
 80034e6:	b90b      	cbnz	r3, 80034ec <__swbuf_r+0x12>
 80034e8:	f7ff ff20 	bl	800332c <__sinit>
 80034ec:	69a3      	ldr	r3, [r4, #24]
 80034ee:	60a3      	str	r3, [r4, #8]
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	071a      	lsls	r2, r3, #28
 80034f4:	d501      	bpl.n	80034fa <__swbuf_r+0x20>
 80034f6:	6923      	ldr	r3, [r4, #16]
 80034f8:	b943      	cbnz	r3, 800350c <__swbuf_r+0x32>
 80034fa:	4621      	mov	r1, r4
 80034fc:	4628      	mov	r0, r5
 80034fe:	f000 f82b 	bl	8003558 <__swsetup_r>
 8003502:	b118      	cbz	r0, 800350c <__swbuf_r+0x32>
 8003504:	f04f 37ff 	mov.w	r7, #4294967295
 8003508:	4638      	mov	r0, r7
 800350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	6922      	ldr	r2, [r4, #16]
 8003510:	1a98      	subs	r0, r3, r2
 8003512:	6963      	ldr	r3, [r4, #20]
 8003514:	b2f6      	uxtb	r6, r6
 8003516:	4283      	cmp	r3, r0
 8003518:	4637      	mov	r7, r6
 800351a:	dc05      	bgt.n	8003528 <__swbuf_r+0x4e>
 800351c:	4621      	mov	r1, r4
 800351e:	4628      	mov	r0, r5
 8003520:	f000 fa68 	bl	80039f4 <_fflush_r>
 8003524:	2800      	cmp	r0, #0
 8003526:	d1ed      	bne.n	8003504 <__swbuf_r+0x2a>
 8003528:	68a3      	ldr	r3, [r4, #8]
 800352a:	3b01      	subs	r3, #1
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	6022      	str	r2, [r4, #0]
 8003534:	701e      	strb	r6, [r3, #0]
 8003536:	6962      	ldr	r2, [r4, #20]
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	429a      	cmp	r2, r3
 800353c:	d004      	beq.n	8003548 <__swbuf_r+0x6e>
 800353e:	89a3      	ldrh	r3, [r4, #12]
 8003540:	07db      	lsls	r3, r3, #31
 8003542:	d5e1      	bpl.n	8003508 <__swbuf_r+0x2e>
 8003544:	2e0a      	cmp	r6, #10
 8003546:	d1df      	bne.n	8003508 <__swbuf_r+0x2e>
 8003548:	4621      	mov	r1, r4
 800354a:	4628      	mov	r0, r5
 800354c:	f000 fa52 	bl	80039f4 <_fflush_r>
 8003550:	2800      	cmp	r0, #0
 8003552:	d0d9      	beq.n	8003508 <__swbuf_r+0x2e>
 8003554:	e7d6      	b.n	8003504 <__swbuf_r+0x2a>
	...

08003558 <__swsetup_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <__swsetup_r+0xa8>)
 800355c:	4605      	mov	r5, r0
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	460c      	mov	r4, r1
 8003562:	b118      	cbz	r0, 800356c <__swsetup_r+0x14>
 8003564:	6a03      	ldr	r3, [r0, #32]
 8003566:	b90b      	cbnz	r3, 800356c <__swsetup_r+0x14>
 8003568:	f7ff fee0 	bl	800332c <__sinit>
 800356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003570:	0719      	lsls	r1, r3, #28
 8003572:	d422      	bmi.n	80035ba <__swsetup_r+0x62>
 8003574:	06da      	lsls	r2, r3, #27
 8003576:	d407      	bmi.n	8003588 <__swsetup_r+0x30>
 8003578:	2209      	movs	r2, #9
 800357a:	602a      	str	r2, [r5, #0]
 800357c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003580:	81a3      	strh	r3, [r4, #12]
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	e033      	b.n	80035f0 <__swsetup_r+0x98>
 8003588:	0758      	lsls	r0, r3, #29
 800358a:	d512      	bpl.n	80035b2 <__swsetup_r+0x5a>
 800358c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800358e:	b141      	cbz	r1, 80035a2 <__swsetup_r+0x4a>
 8003590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003594:	4299      	cmp	r1, r3
 8003596:	d002      	beq.n	800359e <__swsetup_r+0x46>
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f8af 	bl	80036fc <_free_r>
 800359e:	2300      	movs	r3, #0
 80035a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80035a8:	81a3      	strh	r3, [r4, #12]
 80035aa:	2300      	movs	r3, #0
 80035ac:	6063      	str	r3, [r4, #4]
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	6923      	ldr	r3, [r4, #16]
 80035bc:	b94b      	cbnz	r3, 80035d2 <__swsetup_r+0x7a>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c8:	d003      	beq.n	80035d2 <__swsetup_r+0x7a>
 80035ca:	4621      	mov	r1, r4
 80035cc:	4628      	mov	r0, r5
 80035ce:	f000 fa5f 	bl	8003a90 <__smakebuf_r>
 80035d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d6:	f013 0201 	ands.w	r2, r3, #1
 80035da:	d00a      	beq.n	80035f2 <__swsetup_r+0x9a>
 80035dc:	2200      	movs	r2, #0
 80035de:	60a2      	str	r2, [r4, #8]
 80035e0:	6962      	ldr	r2, [r4, #20]
 80035e2:	4252      	negs	r2, r2
 80035e4:	61a2      	str	r2, [r4, #24]
 80035e6:	6922      	ldr	r2, [r4, #16]
 80035e8:	b942      	cbnz	r2, 80035fc <__swsetup_r+0xa4>
 80035ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80035ee:	d1c5      	bne.n	800357c <__swsetup_r+0x24>
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
 80035f2:	0799      	lsls	r1, r3, #30
 80035f4:	bf58      	it	pl
 80035f6:	6962      	ldrpl	r2, [r4, #20]
 80035f8:	60a2      	str	r2, [r4, #8]
 80035fa:	e7f4      	b.n	80035e6 <__swsetup_r+0x8e>
 80035fc:	2000      	movs	r0, #0
 80035fe:	e7f7      	b.n	80035f0 <__swsetup_r+0x98>
 8003600:	20000018 	.word	0x20000018

08003604 <memset>:
 8003604:	4402      	add	r2, r0
 8003606:	4603      	mov	r3, r0
 8003608:	4293      	cmp	r3, r2
 800360a:	d100      	bne.n	800360e <memset+0xa>
 800360c:	4770      	bx	lr
 800360e:	f803 1b01 	strb.w	r1, [r3], #1
 8003612:	e7f9      	b.n	8003608 <memset+0x4>

08003614 <_close_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4d06      	ldr	r5, [pc, #24]	@ (8003630 <_close_r+0x1c>)
 8003618:	2300      	movs	r3, #0
 800361a:	4604      	mov	r4, r0
 800361c:	4608      	mov	r0, r1
 800361e:	602b      	str	r3, [r5, #0]
 8003620:	f7fd f9b0 	bl	8000984 <_close>
 8003624:	1c43      	adds	r3, r0, #1
 8003626:	d102      	bne.n	800362e <_close_r+0x1a>
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	b103      	cbz	r3, 800362e <_close_r+0x1a>
 800362c:	6023      	str	r3, [r4, #0]
 800362e:	bd38      	pop	{r3, r4, r5, pc}
 8003630:	20000250 	.word	0x20000250

08003634 <_lseek_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4d07      	ldr	r5, [pc, #28]	@ (8003654 <_lseek_r+0x20>)
 8003638:	4604      	mov	r4, r0
 800363a:	4608      	mov	r0, r1
 800363c:	4611      	mov	r1, r2
 800363e:	2200      	movs	r2, #0
 8003640:	602a      	str	r2, [r5, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	f7fd f9c5 	bl	80009d2 <_lseek>
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	d102      	bne.n	8003652 <_lseek_r+0x1e>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	b103      	cbz	r3, 8003652 <_lseek_r+0x1e>
 8003650:	6023      	str	r3, [r4, #0]
 8003652:	bd38      	pop	{r3, r4, r5, pc}
 8003654:	20000250 	.word	0x20000250

08003658 <_read_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4d07      	ldr	r5, [pc, #28]	@ (8003678 <_read_r+0x20>)
 800365c:	4604      	mov	r4, r0
 800365e:	4608      	mov	r0, r1
 8003660:	4611      	mov	r1, r2
 8003662:	2200      	movs	r2, #0
 8003664:	602a      	str	r2, [r5, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	f7fd f96f 	bl	800094a <_read>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d102      	bne.n	8003676 <_read_r+0x1e>
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	b103      	cbz	r3, 8003676 <_read_r+0x1e>
 8003674:	6023      	str	r3, [r4, #0]
 8003676:	bd38      	pop	{r3, r4, r5, pc}
 8003678:	20000250 	.word	0x20000250

0800367c <_write_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4d07      	ldr	r5, [pc, #28]	@ (800369c <_write_r+0x20>)
 8003680:	4604      	mov	r4, r0
 8003682:	4608      	mov	r0, r1
 8003684:	4611      	mov	r1, r2
 8003686:	2200      	movs	r2, #0
 8003688:	602a      	str	r2, [r5, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f7fc ff59 	bl	8000542 <_write>
 8003690:	1c43      	adds	r3, r0, #1
 8003692:	d102      	bne.n	800369a <_write_r+0x1e>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b103      	cbz	r3, 800369a <_write_r+0x1e>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	20000250 	.word	0x20000250

080036a0 <__errno>:
 80036a0:	4b01      	ldr	r3, [pc, #4]	@ (80036a8 <__errno+0x8>)
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000018 	.word	0x20000018

080036ac <__libc_init_array>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	4d0d      	ldr	r5, [pc, #52]	@ (80036e4 <__libc_init_array+0x38>)
 80036b0:	4c0d      	ldr	r4, [pc, #52]	@ (80036e8 <__libc_init_array+0x3c>)
 80036b2:	1b64      	subs	r4, r4, r5
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	2600      	movs	r6, #0
 80036b8:	42a6      	cmp	r6, r4
 80036ba:	d109      	bne.n	80036d0 <__libc_init_array+0x24>
 80036bc:	4d0b      	ldr	r5, [pc, #44]	@ (80036ec <__libc_init_array+0x40>)
 80036be:	4c0c      	ldr	r4, [pc, #48]	@ (80036f0 <__libc_init_array+0x44>)
 80036c0:	f000 fa54 	bl	8003b6c <_init>
 80036c4:	1b64      	subs	r4, r4, r5
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	2600      	movs	r6, #0
 80036ca:	42a6      	cmp	r6, r4
 80036cc:	d105      	bne.n	80036da <__libc_init_array+0x2e>
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
 80036d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d4:	4798      	blx	r3
 80036d6:	3601      	adds	r6, #1
 80036d8:	e7ee      	b.n	80036b8 <__libc_init_array+0xc>
 80036da:	f855 3b04 	ldr.w	r3, [r5], #4
 80036de:	4798      	blx	r3
 80036e0:	3601      	adds	r6, #1
 80036e2:	e7f2      	b.n	80036ca <__libc_init_array+0x1e>
 80036e4:	08003c0c 	.word	0x08003c0c
 80036e8:	08003c0c 	.word	0x08003c0c
 80036ec:	08003c0c 	.word	0x08003c0c
 80036f0:	08003c10 	.word	0x08003c10

080036f4 <__retarget_lock_init_recursive>:
 80036f4:	4770      	bx	lr

080036f6 <__retarget_lock_acquire_recursive>:
 80036f6:	4770      	bx	lr

080036f8 <__retarget_lock_release_recursive>:
 80036f8:	4770      	bx	lr
	...

080036fc <_free_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4605      	mov	r5, r0
 8003700:	2900      	cmp	r1, #0
 8003702:	d041      	beq.n	8003788 <_free_r+0x8c>
 8003704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003708:	1f0c      	subs	r4, r1, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	bfb8      	it	lt
 800370e:	18e4      	addlt	r4, r4, r3
 8003710:	f000 f8e0 	bl	80038d4 <__malloc_lock>
 8003714:	4a1d      	ldr	r2, [pc, #116]	@ (800378c <_free_r+0x90>)
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	b933      	cbnz	r3, 8003728 <_free_r+0x2c>
 800371a:	6063      	str	r3, [r4, #4]
 800371c:	6014      	str	r4, [r2, #0]
 800371e:	4628      	mov	r0, r5
 8003720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003724:	f000 b8dc 	b.w	80038e0 <__malloc_unlock>
 8003728:	42a3      	cmp	r3, r4
 800372a:	d908      	bls.n	800373e <_free_r+0x42>
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	1821      	adds	r1, r4, r0
 8003730:	428b      	cmp	r3, r1
 8003732:	bf01      	itttt	eq
 8003734:	6819      	ldreq	r1, [r3, #0]
 8003736:	685b      	ldreq	r3, [r3, #4]
 8003738:	1809      	addeq	r1, r1, r0
 800373a:	6021      	streq	r1, [r4, #0]
 800373c:	e7ed      	b.n	800371a <_free_r+0x1e>
 800373e:	461a      	mov	r2, r3
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b10b      	cbz	r3, 8003748 <_free_r+0x4c>
 8003744:	42a3      	cmp	r3, r4
 8003746:	d9fa      	bls.n	800373e <_free_r+0x42>
 8003748:	6811      	ldr	r1, [r2, #0]
 800374a:	1850      	adds	r0, r2, r1
 800374c:	42a0      	cmp	r0, r4
 800374e:	d10b      	bne.n	8003768 <_free_r+0x6c>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	4401      	add	r1, r0
 8003754:	1850      	adds	r0, r2, r1
 8003756:	4283      	cmp	r3, r0
 8003758:	6011      	str	r1, [r2, #0]
 800375a:	d1e0      	bne.n	800371e <_free_r+0x22>
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	6053      	str	r3, [r2, #4]
 8003762:	4408      	add	r0, r1
 8003764:	6010      	str	r0, [r2, #0]
 8003766:	e7da      	b.n	800371e <_free_r+0x22>
 8003768:	d902      	bls.n	8003770 <_free_r+0x74>
 800376a:	230c      	movs	r3, #12
 800376c:	602b      	str	r3, [r5, #0]
 800376e:	e7d6      	b.n	800371e <_free_r+0x22>
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	1821      	adds	r1, r4, r0
 8003774:	428b      	cmp	r3, r1
 8003776:	bf04      	itt	eq
 8003778:	6819      	ldreq	r1, [r3, #0]
 800377a:	685b      	ldreq	r3, [r3, #4]
 800377c:	6063      	str	r3, [r4, #4]
 800377e:	bf04      	itt	eq
 8003780:	1809      	addeq	r1, r1, r0
 8003782:	6021      	streq	r1, [r4, #0]
 8003784:	6054      	str	r4, [r2, #4]
 8003786:	e7ca      	b.n	800371e <_free_r+0x22>
 8003788:	bd38      	pop	{r3, r4, r5, pc}
 800378a:	bf00      	nop
 800378c:	2000025c 	.word	0x2000025c

08003790 <sbrk_aligned>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	4e0f      	ldr	r6, [pc, #60]	@ (80037d0 <sbrk_aligned+0x40>)
 8003794:	460c      	mov	r4, r1
 8003796:	6831      	ldr	r1, [r6, #0]
 8003798:	4605      	mov	r5, r0
 800379a:	b911      	cbnz	r1, 80037a2 <sbrk_aligned+0x12>
 800379c:	f000 f9d6 	bl	8003b4c <_sbrk_r>
 80037a0:	6030      	str	r0, [r6, #0]
 80037a2:	4621      	mov	r1, r4
 80037a4:	4628      	mov	r0, r5
 80037a6:	f000 f9d1 	bl	8003b4c <_sbrk_r>
 80037aa:	1c43      	adds	r3, r0, #1
 80037ac:	d103      	bne.n	80037b6 <sbrk_aligned+0x26>
 80037ae:	f04f 34ff 	mov.w	r4, #4294967295
 80037b2:	4620      	mov	r0, r4
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	1cc4      	adds	r4, r0, #3
 80037b8:	f024 0403 	bic.w	r4, r4, #3
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d0f8      	beq.n	80037b2 <sbrk_aligned+0x22>
 80037c0:	1a21      	subs	r1, r4, r0
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 f9c2 	bl	8003b4c <_sbrk_r>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d1f2      	bne.n	80037b2 <sbrk_aligned+0x22>
 80037cc:	e7ef      	b.n	80037ae <sbrk_aligned+0x1e>
 80037ce:	bf00      	nop
 80037d0:	20000258 	.word	0x20000258

080037d4 <_malloc_r>:
 80037d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037d8:	1ccd      	adds	r5, r1, #3
 80037da:	f025 0503 	bic.w	r5, r5, #3
 80037de:	3508      	adds	r5, #8
 80037e0:	2d0c      	cmp	r5, #12
 80037e2:	bf38      	it	cc
 80037e4:	250c      	movcc	r5, #12
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	4606      	mov	r6, r0
 80037ea:	db01      	blt.n	80037f0 <_malloc_r+0x1c>
 80037ec:	42a9      	cmp	r1, r5
 80037ee:	d904      	bls.n	80037fa <_malloc_r+0x26>
 80037f0:	230c      	movs	r3, #12
 80037f2:	6033      	str	r3, [r6, #0]
 80037f4:	2000      	movs	r0, #0
 80037f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038d0 <_malloc_r+0xfc>
 80037fe:	f000 f869 	bl	80038d4 <__malloc_lock>
 8003802:	f8d8 3000 	ldr.w	r3, [r8]
 8003806:	461c      	mov	r4, r3
 8003808:	bb44      	cbnz	r4, 800385c <_malloc_r+0x88>
 800380a:	4629      	mov	r1, r5
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff ffbf 	bl	8003790 <sbrk_aligned>
 8003812:	1c43      	adds	r3, r0, #1
 8003814:	4604      	mov	r4, r0
 8003816:	d158      	bne.n	80038ca <_malloc_r+0xf6>
 8003818:	f8d8 4000 	ldr.w	r4, [r8]
 800381c:	4627      	mov	r7, r4
 800381e:	2f00      	cmp	r7, #0
 8003820:	d143      	bne.n	80038aa <_malloc_r+0xd6>
 8003822:	2c00      	cmp	r4, #0
 8003824:	d04b      	beq.n	80038be <_malloc_r+0xea>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	4639      	mov	r1, r7
 800382a:	4630      	mov	r0, r6
 800382c:	eb04 0903 	add.w	r9, r4, r3
 8003830:	f000 f98c 	bl	8003b4c <_sbrk_r>
 8003834:	4581      	cmp	r9, r0
 8003836:	d142      	bne.n	80038be <_malloc_r+0xea>
 8003838:	6821      	ldr	r1, [r4, #0]
 800383a:	1a6d      	subs	r5, r5, r1
 800383c:	4629      	mov	r1, r5
 800383e:	4630      	mov	r0, r6
 8003840:	f7ff ffa6 	bl	8003790 <sbrk_aligned>
 8003844:	3001      	adds	r0, #1
 8003846:	d03a      	beq.n	80038be <_malloc_r+0xea>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	442b      	add	r3, r5
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	f8d8 3000 	ldr.w	r3, [r8]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	bb62      	cbnz	r2, 80038b0 <_malloc_r+0xdc>
 8003856:	f8c8 7000 	str.w	r7, [r8]
 800385a:	e00f      	b.n	800387c <_malloc_r+0xa8>
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	1b52      	subs	r2, r2, r5
 8003860:	d420      	bmi.n	80038a4 <_malloc_r+0xd0>
 8003862:	2a0b      	cmp	r2, #11
 8003864:	d917      	bls.n	8003896 <_malloc_r+0xc2>
 8003866:	1961      	adds	r1, r4, r5
 8003868:	42a3      	cmp	r3, r4
 800386a:	6025      	str	r5, [r4, #0]
 800386c:	bf18      	it	ne
 800386e:	6059      	strne	r1, [r3, #4]
 8003870:	6863      	ldr	r3, [r4, #4]
 8003872:	bf08      	it	eq
 8003874:	f8c8 1000 	streq.w	r1, [r8]
 8003878:	5162      	str	r2, [r4, r5]
 800387a:	604b      	str	r3, [r1, #4]
 800387c:	4630      	mov	r0, r6
 800387e:	f000 f82f 	bl	80038e0 <__malloc_unlock>
 8003882:	f104 000b 	add.w	r0, r4, #11
 8003886:	1d23      	adds	r3, r4, #4
 8003888:	f020 0007 	bic.w	r0, r0, #7
 800388c:	1ac2      	subs	r2, r0, r3
 800388e:	bf1c      	itt	ne
 8003890:	1a1b      	subne	r3, r3, r0
 8003892:	50a3      	strne	r3, [r4, r2]
 8003894:	e7af      	b.n	80037f6 <_malloc_r+0x22>
 8003896:	6862      	ldr	r2, [r4, #4]
 8003898:	42a3      	cmp	r3, r4
 800389a:	bf0c      	ite	eq
 800389c:	f8c8 2000 	streq.w	r2, [r8]
 80038a0:	605a      	strne	r2, [r3, #4]
 80038a2:	e7eb      	b.n	800387c <_malloc_r+0xa8>
 80038a4:	4623      	mov	r3, r4
 80038a6:	6864      	ldr	r4, [r4, #4]
 80038a8:	e7ae      	b.n	8003808 <_malloc_r+0x34>
 80038aa:	463c      	mov	r4, r7
 80038ac:	687f      	ldr	r7, [r7, #4]
 80038ae:	e7b6      	b.n	800381e <_malloc_r+0x4a>
 80038b0:	461a      	mov	r2, r3
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	d1fb      	bne.n	80038b0 <_malloc_r+0xdc>
 80038b8:	2300      	movs	r3, #0
 80038ba:	6053      	str	r3, [r2, #4]
 80038bc:	e7de      	b.n	800387c <_malloc_r+0xa8>
 80038be:	230c      	movs	r3, #12
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	4630      	mov	r0, r6
 80038c4:	f000 f80c 	bl	80038e0 <__malloc_unlock>
 80038c8:	e794      	b.n	80037f4 <_malloc_r+0x20>
 80038ca:	6005      	str	r5, [r0, #0]
 80038cc:	e7d6      	b.n	800387c <_malloc_r+0xa8>
 80038ce:	bf00      	nop
 80038d0:	2000025c 	.word	0x2000025c

080038d4 <__malloc_lock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	@ (80038dc <__malloc_lock+0x8>)
 80038d6:	f7ff bf0e 	b.w	80036f6 <__retarget_lock_acquire_recursive>
 80038da:	bf00      	nop
 80038dc:	20000254 	.word	0x20000254

080038e0 <__malloc_unlock>:
 80038e0:	4801      	ldr	r0, [pc, #4]	@ (80038e8 <__malloc_unlock+0x8>)
 80038e2:	f7ff bf09 	b.w	80036f8 <__retarget_lock_release_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000254 	.word	0x20000254

080038ec <__sflush_r>:
 80038ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f4:	0716      	lsls	r6, r2, #28
 80038f6:	4605      	mov	r5, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	d454      	bmi.n	80039a6 <__sflush_r+0xba>
 80038fc:	684b      	ldr	r3, [r1, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	dc02      	bgt.n	8003908 <__sflush_r+0x1c>
 8003902:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	dd48      	ble.n	800399a <__sflush_r+0xae>
 8003908:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800390a:	2e00      	cmp	r6, #0
 800390c:	d045      	beq.n	800399a <__sflush_r+0xae>
 800390e:	2300      	movs	r3, #0
 8003910:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003914:	682f      	ldr	r7, [r5, #0]
 8003916:	6a21      	ldr	r1, [r4, #32]
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	d030      	beq.n	800397e <__sflush_r+0x92>
 800391c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	0759      	lsls	r1, r3, #29
 8003922:	d505      	bpl.n	8003930 <__sflush_r+0x44>
 8003924:	6863      	ldr	r3, [r4, #4]
 8003926:	1ad2      	subs	r2, r2, r3
 8003928:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800392a:	b10b      	cbz	r3, 8003930 <__sflush_r+0x44>
 800392c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	2300      	movs	r3, #0
 8003932:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003934:	6a21      	ldr	r1, [r4, #32]
 8003936:	4628      	mov	r0, r5
 8003938:	47b0      	blx	r6
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	d106      	bne.n	800394e <__sflush_r+0x62>
 8003940:	6829      	ldr	r1, [r5, #0]
 8003942:	291d      	cmp	r1, #29
 8003944:	d82b      	bhi.n	800399e <__sflush_r+0xb2>
 8003946:	4a2a      	ldr	r2, [pc, #168]	@ (80039f0 <__sflush_r+0x104>)
 8003948:	40ca      	lsrs	r2, r1
 800394a:	07d6      	lsls	r6, r2, #31
 800394c:	d527      	bpl.n	800399e <__sflush_r+0xb2>
 800394e:	2200      	movs	r2, #0
 8003950:	6062      	str	r2, [r4, #4]
 8003952:	04d9      	lsls	r1, r3, #19
 8003954:	6922      	ldr	r2, [r4, #16]
 8003956:	6022      	str	r2, [r4, #0]
 8003958:	d504      	bpl.n	8003964 <__sflush_r+0x78>
 800395a:	1c42      	adds	r2, r0, #1
 800395c:	d101      	bne.n	8003962 <__sflush_r+0x76>
 800395e:	682b      	ldr	r3, [r5, #0]
 8003960:	b903      	cbnz	r3, 8003964 <__sflush_r+0x78>
 8003962:	6560      	str	r0, [r4, #84]	@ 0x54
 8003964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003966:	602f      	str	r7, [r5, #0]
 8003968:	b1b9      	cbz	r1, 800399a <__sflush_r+0xae>
 800396a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800396e:	4299      	cmp	r1, r3
 8003970:	d002      	beq.n	8003978 <__sflush_r+0x8c>
 8003972:	4628      	mov	r0, r5
 8003974:	f7ff fec2 	bl	80036fc <_free_r>
 8003978:	2300      	movs	r3, #0
 800397a:	6363      	str	r3, [r4, #52]	@ 0x34
 800397c:	e00d      	b.n	800399a <__sflush_r+0xae>
 800397e:	2301      	movs	r3, #1
 8003980:	4628      	mov	r0, r5
 8003982:	47b0      	blx	r6
 8003984:	4602      	mov	r2, r0
 8003986:	1c50      	adds	r0, r2, #1
 8003988:	d1c9      	bne.n	800391e <__sflush_r+0x32>
 800398a:	682b      	ldr	r3, [r5, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0c6      	beq.n	800391e <__sflush_r+0x32>
 8003990:	2b1d      	cmp	r3, #29
 8003992:	d001      	beq.n	8003998 <__sflush_r+0xac>
 8003994:	2b16      	cmp	r3, #22
 8003996:	d11e      	bne.n	80039d6 <__sflush_r+0xea>
 8003998:	602f      	str	r7, [r5, #0]
 800399a:	2000      	movs	r0, #0
 800399c:	e022      	b.n	80039e4 <__sflush_r+0xf8>
 800399e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039a2:	b21b      	sxth	r3, r3
 80039a4:	e01b      	b.n	80039de <__sflush_r+0xf2>
 80039a6:	690f      	ldr	r7, [r1, #16]
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	d0f6      	beq.n	800399a <__sflush_r+0xae>
 80039ac:	0793      	lsls	r3, r2, #30
 80039ae:	680e      	ldr	r6, [r1, #0]
 80039b0:	bf08      	it	eq
 80039b2:	694b      	ldreq	r3, [r1, #20]
 80039b4:	600f      	str	r7, [r1, #0]
 80039b6:	bf18      	it	ne
 80039b8:	2300      	movne	r3, #0
 80039ba:	eba6 0807 	sub.w	r8, r6, r7
 80039be:	608b      	str	r3, [r1, #8]
 80039c0:	f1b8 0f00 	cmp.w	r8, #0
 80039c4:	dde9      	ble.n	800399a <__sflush_r+0xae>
 80039c6:	6a21      	ldr	r1, [r4, #32]
 80039c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80039ca:	4643      	mov	r3, r8
 80039cc:	463a      	mov	r2, r7
 80039ce:	4628      	mov	r0, r5
 80039d0:	47b0      	blx	r6
 80039d2:	2800      	cmp	r0, #0
 80039d4:	dc08      	bgt.n	80039e8 <__sflush_r+0xfc>
 80039d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039de:	81a3      	strh	r3, [r4, #12]
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e8:	4407      	add	r7, r0
 80039ea:	eba8 0800 	sub.w	r8, r8, r0
 80039ee:	e7e7      	b.n	80039c0 <__sflush_r+0xd4>
 80039f0:	20400001 	.word	0x20400001

080039f4 <_fflush_r>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	690b      	ldr	r3, [r1, #16]
 80039f8:	4605      	mov	r5, r0
 80039fa:	460c      	mov	r4, r1
 80039fc:	b913      	cbnz	r3, 8003a04 <_fflush_r+0x10>
 80039fe:	2500      	movs	r5, #0
 8003a00:	4628      	mov	r0, r5
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	b118      	cbz	r0, 8003a0e <_fflush_r+0x1a>
 8003a06:	6a03      	ldr	r3, [r0, #32]
 8003a08:	b90b      	cbnz	r3, 8003a0e <_fflush_r+0x1a>
 8003a0a:	f7ff fc8f 	bl	800332c <__sinit>
 8003a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0f3      	beq.n	80039fe <_fflush_r+0xa>
 8003a16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a18:	07d0      	lsls	r0, r2, #31
 8003a1a:	d404      	bmi.n	8003a26 <_fflush_r+0x32>
 8003a1c:	0599      	lsls	r1, r3, #22
 8003a1e:	d402      	bmi.n	8003a26 <_fflush_r+0x32>
 8003a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a22:	f7ff fe68 	bl	80036f6 <__retarget_lock_acquire_recursive>
 8003a26:	4628      	mov	r0, r5
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7ff ff5f 	bl	80038ec <__sflush_r>
 8003a2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a30:	07da      	lsls	r2, r3, #31
 8003a32:	4605      	mov	r5, r0
 8003a34:	d4e4      	bmi.n	8003a00 <_fflush_r+0xc>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	059b      	lsls	r3, r3, #22
 8003a3a:	d4e1      	bmi.n	8003a00 <_fflush_r+0xc>
 8003a3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a3e:	f7ff fe5b 	bl	80036f8 <__retarget_lock_release_recursive>
 8003a42:	e7dd      	b.n	8003a00 <_fflush_r+0xc>

08003a44 <__swhatbuf_r>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	460c      	mov	r4, r1
 8003a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	b096      	sub	sp, #88	@ 0x58
 8003a50:	4615      	mov	r5, r2
 8003a52:	461e      	mov	r6, r3
 8003a54:	da0d      	bge.n	8003a72 <__swhatbuf_r+0x2e>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	bf14      	ite	ne
 8003a62:	2340      	movne	r3, #64	@ 0x40
 8003a64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a68:	2000      	movs	r0, #0
 8003a6a:	6031      	str	r1, [r6, #0]
 8003a6c:	602b      	str	r3, [r5, #0]
 8003a6e:	b016      	add	sp, #88	@ 0x58
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
 8003a72:	466a      	mov	r2, sp
 8003a74:	f000 f848 	bl	8003b08 <_fstat_r>
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	dbec      	blt.n	8003a56 <__swhatbuf_r+0x12>
 8003a7c:	9901      	ldr	r1, [sp, #4]
 8003a7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a86:	4259      	negs	r1, r3
 8003a88:	4159      	adcs	r1, r3
 8003a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a8e:	e7eb      	b.n	8003a68 <__swhatbuf_r+0x24>

08003a90 <__smakebuf_r>:
 8003a90:	898b      	ldrh	r3, [r1, #12]
 8003a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a94:	079d      	lsls	r5, r3, #30
 8003a96:	4606      	mov	r6, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	d507      	bpl.n	8003aac <__smakebuf_r+0x1c>
 8003a9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	6163      	str	r3, [r4, #20]
 8003aa8:	b003      	add	sp, #12
 8003aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aac:	ab01      	add	r3, sp, #4
 8003aae:	466a      	mov	r2, sp
 8003ab0:	f7ff ffc8 	bl	8003a44 <__swhatbuf_r>
 8003ab4:	9f00      	ldr	r7, [sp, #0]
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	4639      	mov	r1, r7
 8003aba:	4630      	mov	r0, r6
 8003abc:	f7ff fe8a 	bl	80037d4 <_malloc_r>
 8003ac0:	b948      	cbnz	r0, 8003ad6 <__smakebuf_r+0x46>
 8003ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac6:	059a      	lsls	r2, r3, #22
 8003ac8:	d4ee      	bmi.n	8003aa8 <__smakebuf_r+0x18>
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	f043 0302 	orr.w	r3, r3, #2
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	e7e2      	b.n	8003a9c <__smakebuf_r+0xc>
 8003ad6:	89a3      	ldrh	r3, [r4, #12]
 8003ad8:	6020      	str	r0, [r4, #0]
 8003ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	9b01      	ldr	r3, [sp, #4]
 8003ae2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ae6:	b15b      	cbz	r3, 8003b00 <__smakebuf_r+0x70>
 8003ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 f81d 	bl	8003b2c <_isatty_r>
 8003af2:	b128      	cbz	r0, 8003b00 <__smakebuf_r+0x70>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	81a3      	strh	r3, [r4, #12]
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	431d      	orrs	r5, r3
 8003b04:	81a5      	strh	r5, [r4, #12]
 8003b06:	e7cf      	b.n	8003aa8 <__smakebuf_r+0x18>

08003b08 <_fstat_r>:
 8003b08:	b538      	push	{r3, r4, r5, lr}
 8003b0a:	4d07      	ldr	r5, [pc, #28]	@ (8003b28 <_fstat_r+0x20>)
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4604      	mov	r4, r0
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	f7fc ff41 	bl	800099c <_fstat>
 8003b1a:	1c43      	adds	r3, r0, #1
 8003b1c:	d102      	bne.n	8003b24 <_fstat_r+0x1c>
 8003b1e:	682b      	ldr	r3, [r5, #0]
 8003b20:	b103      	cbz	r3, 8003b24 <_fstat_r+0x1c>
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	bd38      	pop	{r3, r4, r5, pc}
 8003b26:	bf00      	nop
 8003b28:	20000250 	.word	0x20000250

08003b2c <_isatty_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4d06      	ldr	r5, [pc, #24]	@ (8003b48 <_isatty_r+0x1c>)
 8003b30:	2300      	movs	r3, #0
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	f7fc ff40 	bl	80009bc <_isatty>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_isatty_r+0x1a>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_isatty_r+0x1a>
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	20000250 	.word	0x20000250

08003b4c <_sbrk_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4d06      	ldr	r5, [pc, #24]	@ (8003b68 <_sbrk_r+0x1c>)
 8003b50:	2300      	movs	r3, #0
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	f7fc ff48 	bl	80009ec <_sbrk>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_sbrk_r+0x1a>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_sbrk_r+0x1a>
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	20000250 	.word	0x20000250

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
