
UART_Intrrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004118  08004118  00005118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004160  08004160  00006024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004168  08004168  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800416c  0800416c  0000516c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004170  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000024  08004194  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08004194  000060d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c586  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d42  00000000  00000000  000125da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00014320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000784  00000000  00000000  00014cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd0  00000000  00000000  00015474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc16  00000000  00000000  0003a444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40c9  00000000  00000000  0004605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  0012a168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004100 	.word	0x08004100

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004100 	.word	0x08004100

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	db0b      	blt.n	800051e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	f003 021f 	and.w	r2, r3, #31
 800050c:	4907      	ldr	r1, [pc, #28]	@ (800052c <__NVIC_EnableIRQ+0x38>)
 800050e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000512:	095b      	lsrs	r3, r3, #5
 8000514:	2001      	movs	r0, #1
 8000516:	fa00 f202 	lsl.w	r2, r0, r2
 800051a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000e100 	.word	0xe000e100

08000530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	6039      	str	r1, [r7, #0]
 800053a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000540:	2b00      	cmp	r3, #0
 8000542:	db0a      	blt.n	800055a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	b2da      	uxtb	r2, r3
 8000548:	490c      	ldr	r1, [pc, #48]	@ (800057c <__NVIC_SetPriority+0x4c>)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	0112      	lsls	r2, r2, #4
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	440b      	add	r3, r1
 8000554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000558:	e00a      	b.n	8000570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4908      	ldr	r1, [pc, #32]	@ (8000580 <__NVIC_SetPriority+0x50>)
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	f003 030f 	and.w	r3, r3, #15
 8000566:	3b04      	subs	r3, #4
 8000568:	0112      	lsls	r2, r2, #4
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	440b      	add	r3, r1
 800056e:	761a      	strb	r2, [r3, #24]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	e000e100 	.word	0xe000e100
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fa1c 	bl	80009c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f816 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8ae 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f864 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_IT(&huart2, uartTxMsg, sizeof(uartTxMsg)-1);
 8000598:	2216      	movs	r2, #22
 800059a:	4905      	ldr	r1, [pc, #20]	@ (80005b0 <main+0x2c>)
 800059c:	4805      	ldr	r0, [pc, #20]	@ (80005b4 <main+0x30>)
 800059e:	f002 f94d 	bl	800283c <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2, &uartRxmsg, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <main+0x34>)
 80005a6:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <main+0x30>)
 80005a8:	f002 f9a6 	bl	80028f8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <main+0x28>
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000040 	.word	0x20000040
 80005b8:	200000c8 	.word	0x200000c8

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	@ 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2244      	movs	r2, #68	@ 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fd6c 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005e2:	f000 fdcb 	bl	800117c <HAL_PWREx_ControlVoltageScaling>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ec:	f000 f8e6 	bl	80007bc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fa:	2310      	movs	r3, #16
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800060a:	230a      	movs	r3, #10
 800060c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060e:	2307      	movs	r3, #7
 8000610:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fe02 	bl	8001228 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800062a:	f000 f8c7 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2303      	movs	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f001 f9ca 	bl	80019e0 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000652:	f000 f8b3 	bl	80007bc <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	@ 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
  __HAL_RCC_USART2_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_USART2_UART_Init+0x84>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066a:	4a1e      	ldr	r2, [pc, #120]	@ (80006e4 <MX_USART2_UART_Init+0x84>)
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	6593      	str	r3, [r2, #88]	@ 0x58
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_USART2_UART_Init+0x84>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 8000680:	4a1a      	ldr	r2, [pc, #104]	@ (80006ec <MX_USART2_UART_Init+0x8c>)
 8000682:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000684:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 8000686:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069e:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006a0:	220c      	movs	r2, #12
 80006a2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a4:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006bc:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <MX_USART2_UART_Init+0x88>)
 80006be:	f002 f86f 	bl	80027a0 <HAL_UART_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80006c8:	f000 f878 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  NVIC_SetPriority(USART2_IRQn,0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2026      	movs	r0, #38	@ 0x26
 80006d0:	f7ff ff2e 	bl	8000530 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80006d4:	2026      	movs	r0, #38	@ 0x26
 80006d6:	f7ff ff0d 	bl	80004f4 <__NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	20000040 	.word	0x20000040
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	@ 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	4a1e      	ldr	r2, [pc, #120]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076e:	f000 fcdf 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000778:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0xc8>)
 800078a:	f000 fb27 	bl	8000ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078e:	2320      	movs	r3, #32
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a8:	f000 fb18 	bl	8000ddc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000800 	.word	0x48000800

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	@ (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	@ (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0ac      	sub	sp, #176	@ 0xb0
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2288      	movs	r2, #136	@ 0x88
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fc39 	bl	80040a8 <memset>
  if(huart->Instance==USART2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a25      	ldr	r2, [pc, #148]	@ (80008d0 <HAL_UART_MspInit+0xc0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d143      	bne.n	80008c8 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000844:	2300      	movs	r3, #0
 8000846:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4618      	mov	r0, r3
 800084e:	f001 faeb 	bl	8001e28 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000858:	f7ff ffb0 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085c:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <HAL_UART_MspInit+0xc4>)
 800085e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000860:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <HAL_UART_MspInit+0xc4>)
 8000862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000866:	6593      	str	r3, [r2, #88]	@ 0x58
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <HAL_UART_MspInit+0xc4>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <HAL_UART_MspInit+0xc4>)
 8000876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000878:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <HAL_UART_MspInit+0xc4>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_UART_MspInit+0xc4>)
 8000882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088c:	230c      	movs	r3, #12
 800088e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a4:	2307      	movs	r3, #7
 80008a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f000 fa92 	bl	8000ddc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2026      	movs	r0, #38	@ 0x26
 80008be:	f000 f9d8 	bl	8000c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c2:	2026      	movs	r0, #38	@ 0x26
 80008c4:	f000 f9f1 	bl	8000caa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008c8:	bf00      	nop
 80008ca:	37b0      	adds	r7, #176	@ 0xb0
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40004400 	.word	0x40004400
 80008d4:	40021000 	.word	0x40021000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092e:	f000 f8a5 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <USART2_IRQHandler+0x10>)
 800093e:	f002 f827 	bl	8002990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000040 	.word	0x20000040

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff ffea 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	@ (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f003 fb8b 	bl	80040b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fdef 	bl	8000584 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80009b4:	08004170 	.word	0x08004170
  ldr r2, =_sbss
 80009b8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80009bc:	200000d0 	.word	0x200000d0

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>
	...

080009c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <HAL_Init+0x3c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <HAL_Init+0x3c>)
 80009d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009da:	2003      	movs	r0, #3
 80009dc:	f000 f93e 	bl	8000c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f80f 	bl	8000a04 <HAL_InitTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009ec:	2301      	movs	r3, #1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	e001      	b.n	80009f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f2:	f7ff fee9 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f6:	79fb      	ldrb	r3, [r7, #7]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <HAL_InitTick+0x6c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d023      	beq.n	8000a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_InitTick+0x70>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <HAL_InitTick+0x6c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f949 	bl	8000cc6 <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10f      	bne.n	8000a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d809      	bhi.n	8000a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f913 	bl	8000c72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <HAL_InitTick+0x74>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	e007      	b.n	8000a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e004      	b.n	8000a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	e001      	b.n	8000a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000020 	.word	0x20000020
 8000a74:	20000018 	.word	0x20000018
 8000a78:	2000001c 	.word	0x2000001c

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000020 	.word	0x20000020
 8000aa0:	200000cc 	.word	0x200000cc

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	@ (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000cc 	.word	0x200000cc

08000abc <__NVIC_SetPriorityGrouping>:
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_EnableIRQ>:
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db0b      	blt.n	8000b4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <__NVIC_EnableIRQ+0x38>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	@ (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	@ (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	@ 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	@ 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c28:	d301      	bcc.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00f      	b.n	8000c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <SysTick_Config+0x40>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	210f      	movs	r1, #15
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f7ff ff8e 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <SysTick_Config+0x40>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <SysTick_Config+0x40>)
 8000c48:	2207      	movs	r2, #7
 8000c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	e000e010 	.word	0xe000e010

08000c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ff29 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff3e 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ff8e 	bl	8000bb0 <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff31 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffa2 	bl	8000c18 <SysTick_Config>
 8000cd4:	4603      	mov	r3, r0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d008      	beq.n	8000d08 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e022      	b.n	8000d4e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 020e 	bic.w	r2, r2, #14
 8000d16:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2c:	f003 021c 	and.w	r2, r3, #28
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d005      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2204      	movs	r2, #4
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
 8000d7c:	e029      	b.n	8000dd2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 020e 	bic.w	r2, r2, #14
 8000d8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0201 	bic.w	r2, r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	f003 021c 	and.w	r2, r3, #28
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	4798      	blx	r3
    }
  }
  return status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b087      	sub	sp, #28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e17f      	b.n	80010ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2101      	movs	r1, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8171 	beq.w	80010e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d005      	beq.n	8000e1c <HAL_GPIO_Init+0x40>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d130      	bne.n	8000e7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e52:	2201      	movs	r2, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	091b      	lsrs	r3, r3, #4
 8000e68:	f003 0201 	and.w	r2, r3, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d118      	bne.n	8000ebc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e90:	2201      	movs	r2, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	08db      	lsrs	r3, r3, #3
 8000ea6:	f003 0201 	and.w	r2, r3, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d017      	beq.n	8000ef8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d123      	bne.n	8000f4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f003 0307 	and.w	r3, r3, #7
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	08da      	lsrs	r2, r3, #3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3208      	adds	r2, #8
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f003 0203 	and.w	r2, r3, #3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 80ac 	beq.w	80010e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	4a5e      	ldr	r2, [pc, #376]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f9a:	4b5c      	ldr	r3, [pc, #368]	@ (800110c <HAL_GPIO_Init+0x330>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa6:	4a5a      	ldr	r2, [pc, #360]	@ (8001110 <HAL_GPIO_Init+0x334>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x242>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8001114 <HAL_GPIO_Init+0x338>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x23e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8001118 <HAL_GPIO_Init+0x33c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800111c <HAL_GPIO_Init+0x340>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x236>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4c      	ldr	r2, [pc, #304]	@ (8001120 <HAL_GPIO_Init+0x344>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x232>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8001124 <HAL_GPIO_Init+0x348>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x22e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8001128 <HAL_GPIO_Init+0x34c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x22a>
 8001002:	2306      	movs	r3, #6
 8001004:	e00c      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001006:	2307      	movs	r3, #7
 8001008:	e00a      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800100a:	2305      	movs	r3, #5
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800100e:	2304      	movs	r3, #4
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x244>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x244>
 800101e:	2300      	movs	r3, #0
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001030:	4937      	ldr	r1, [pc, #220]	@ (8001110 <HAL_GPIO_Init+0x334>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103e:	4b3b      	ldr	r3, [pc, #236]	@ (800112c <HAL_GPIO_Init+0x350>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001062:	4a32      	ldr	r2, [pc, #200]	@ (800112c <HAL_GPIO_Init+0x350>)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001068:	4b30      	ldr	r3, [pc, #192]	@ (800112c <HAL_GPIO_Init+0x350>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800108c:	4a27      	ldr	r2, [pc, #156]	@ (800112c <HAL_GPIO_Init+0x350>)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <HAL_GPIO_Init+0x350>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b6:	4a1d      	ldr	r2, [pc, #116]	@ (800112c <HAL_GPIO_Init+0x350>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <HAL_GPIO_Init+0x350>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e0:	4a12      	ldr	r2, [pc, #72]	@ (800112c <HAL_GPIO_Init+0x350>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa22 f303 	lsr.w	r3, r2, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f47f ae78 	bne.w	8000dec <HAL_GPIO_Init+0x10>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	371c      	adds	r7, #28
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000
 8001114:	48000400 	.word	0x48000400
 8001118:	48000800 	.word	0x48000800
 800111c:	48000c00 	.word	0x48000c00
 8001120:	48001000 	.word	0x48001000
 8001124:	48001400 	.word	0x48001400
 8001128:	48001800 	.word	0x48001800
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <HAL_PWREx_GetVoltageRange+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40007000 	.word	0x40007000

0800117c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800118a:	d130      	bne.n	80011ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001198:	d038      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011a2:	4a1e      	ldr	r2, [pc, #120]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2232      	movs	r2, #50	@ 0x32
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9b      	lsrs	r3, r3, #18
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c0:	e002      	b.n	80011c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011d4:	d102      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f2      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e8:	d110      	bne.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e00f      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fa:	d007      	beq.n	800120c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001204:	4a05      	ldr	r2, [pc, #20]	@ (800121c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800120a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000
 8001220:	20000018 	.word	0x20000018
 8001224:	431bde83 	.word	0x431bde83

08001228 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e3ca      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123a:	4b97      	ldr	r3, [pc, #604]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001244:	4b94      	ldr	r3, [pc, #592]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 80e4 	beq.w	8001424 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_RCC_OscConfig+0x4a>
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	f040 808b 	bne.w	8001380 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 8087 	bne.w	8001380 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001272:	4b89      	ldr	r3, [pc, #548]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x62>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e3a2      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	4b82      	ldr	r3, [pc, #520]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <HAL_RCC_OscConfig+0x7c>
 800129a:	4b7f      	ldr	r3, [pc, #508]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012a2:	e005      	b.n	80012b0 <HAL_RCC_OscConfig+0x88>
 80012a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012aa:	091b      	lsrs	r3, r3, #4
 80012ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d223      	bcs.n	80012fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fd55 	bl	8001d68 <RCC_SetFlashLatencyFromMSIRange>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e383      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c8:	4b73      	ldr	r3, [pc, #460]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a72      	ldr	r2, [pc, #456]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b70      	ldr	r3, [pc, #448]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	496d      	ldr	r1, [pc, #436]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	4968      	ldr	r1, [pc, #416]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
 80012fa:	e025      	b.n	8001348 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fc:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a65      	ldr	r2, [pc, #404]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b63      	ldr	r3, [pc, #396]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	4960      	ldr	r1, [pc, #384]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131a:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	495b      	ldr	r1, [pc, #364]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800132a:	4313      	orrs	r3, r2
 800132c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fd15 	bl	8001d68 <RCC_SetFlashLatencyFromMSIRange>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e343      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001348:	f000 fc4a 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b52      	ldr	r3, [pc, #328]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	4950      	ldr	r1, [pc, #320]	@ (800149c <HAL_RCC_OscConfig+0x274>)
 800135a:	5ccb      	ldrb	r3, [r1, r3]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	4a4e      	ldr	r2, [pc, #312]	@ (80014a0 <HAL_RCC_OscConfig+0x278>)
 8001366:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001368:	4b4e      	ldr	r3, [pc, #312]	@ (80014a4 <HAL_RCC_OscConfig+0x27c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fb49 	bl	8000a04 <HAL_InitTick>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d052      	beq.n	8001422 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	e327      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d032      	beq.n	80013ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001388:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a42      	ldr	r2, [pc, #264]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001394:	f7ff fb86 	bl	8000aa4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139c:	f7ff fb82 	bl	8000aa4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e310      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f0      	beq.n	800139c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ba:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a36      	ldr	r2, [pc, #216]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b34      	ldr	r3, [pc, #208]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4931      	ldr	r1, [pc, #196]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	492c      	ldr	r1, [pc, #176]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
 80013ec:	e01a      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a29      	ldr	r2, [pc, #164]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fb53 	bl	8000aa4 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001402:	f7ff fb4f 	bl	8000aa4 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e2dd      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001414:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x1da>
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001422:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d074      	beq.n	800151a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x21a>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b0c      	cmp	r3, #12
 800143a:	d10e      	bne.n	800145a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d064      	beq.n	8001518 <HAL_RCC_OscConfig+0x2f0>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d160      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e2ba      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x24a>
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e026      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800147a:	d115      	bne.n	80014a8 <HAL_RCC_OscConfig+0x280>
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a05      	ldr	r2, [pc, #20]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 8001482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a02      	ldr	r2, [pc, #8]	@ (8001498 <HAL_RCC_OscConfig+0x270>)
 800148e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	e014      	b.n	80014c0 <HAL_RCC_OscConfig+0x298>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	08004118 	.word	0x08004118
 80014a0:	20000018 	.word	0x20000018
 80014a4:	2000001c 	.word	0x2000001c
 80014a8:	4ba0      	ldr	r3, [pc, #640]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a9f      	ldr	r2, [pc, #636]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b9d      	ldr	r3, [pc, #628]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a9c      	ldr	r2, [pc, #624]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff faec 	bl	8000aa4 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d0:	f7ff fae8 	bl	8000aa4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e276      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e2:	4b92      	ldr	r3, [pc, #584]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2a8>
 80014ee:	e014      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fad8 	bl	8000aa4 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f8:	f7ff fad4 	bl	8000aa4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e262      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150a:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x2d0>
 8001516:	e000      	b.n	800151a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d060      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x310>
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d119      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d116      	bne.n	8001566 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	4b7c      	ldr	r3, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_OscConfig+0x328>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e23f      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b76      	ldr	r3, [pc, #472]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	061b      	lsls	r3, r3, #24
 800155e:	4973      	ldr	r1, [pc, #460]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001564:	e040      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	4b6f      	ldr	r3, [pc, #444]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a6e      	ldr	r2, [pc, #440]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fa93 	bl	8000aa4 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fa8f 	bl	8000aa4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e21d      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001594:	4b65      	ldr	r3, [pc, #404]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b62      	ldr	r3, [pc, #392]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	495f      	ldr	r1, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5c      	ldr	r2, [pc, #368]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa6f 	bl	8000aa4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fa6b 	bl	8000aa4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1f9      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015dc:	4b53      	ldr	r3, [pc, #332]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03c      	beq.n	800166e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d01c      	beq.n	8001636 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fc:	4b4b      	ldr	r3, [pc, #300]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80015fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001602:	4a4a      	ldr	r2, [pc, #296]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fa4a 	bl	8000aa4 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fa46 	bl	8000aa4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1d4      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x3ec>
 8001634:	e01b      	b.n	800166e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b3d      	ldr	r3, [pc, #244]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163c:	4a3b      	ldr	r2, [pc, #236]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7ff fa2d 	bl	8000aa4 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fa29 	bl	8000aa4 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1b7      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001660:	4b32      	ldr	r3, [pc, #200]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ef      	bne.n	800164e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80a6 	beq.w	80017c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001690:	4a26      	ldr	r2, [pc, #152]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	@ 0x58
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a4:	2301      	movs	r3, #1
 80016a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d118      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c0:	f7ff f9f0 	bl	8000aa4 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c8:	f7ff f9ec 	bl	8000aa4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e17a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016da:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <HAL_RCC_OscConfig+0x508>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x4d8>
 80016ee:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016fe:	e029      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d115      	bne.n	8001734 <HAL_RCC_OscConfig+0x50c>
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	4a07      	ldr	r2, [pc, #28]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171e:	4a03      	ldr	r2, [pc, #12]	@ (800172c <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x52c>
 800172a:	bf00      	nop
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
 8001734:	4b9c      	ldr	r3, [pc, #624]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173a:	4a9b      	ldr	r2, [pc, #620]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001744:	4b98      	ldr	r3, [pc, #608]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a97      	ldr	r2, [pc, #604]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175c:	f7ff f9a2 	bl	8000aa4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff f99e 	bl	8000aa4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e12a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b8b      	ldr	r3, [pc, #556]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800177c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0ed      	beq.n	8001764 <HAL_RCC_OscConfig+0x53c>
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff f98b 	bl	8000aa4 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f987 	bl	8000aa4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e113      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a8:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ed      	bne.n	8001792 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b7a      	ldr	r3, [pc, #488]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	4a79      	ldr	r2, [pc, #484]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80fe 	beq.w	80019ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	f040 80d0 	bne.w	800197c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017dc:	4b72      	ldr	r3, [pc, #456]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0203 	and.w	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d130      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	3b01      	subs	r3, #1
 80017fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d127      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800180c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d11f      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800181c:	2a07      	cmp	r2, #7
 800181e:	bf14      	ite	ne
 8001820:	2201      	movne	r2, #1
 8001822:	2200      	moveq	r2, #0
 8001824:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001826:	4293      	cmp	r3, r2
 8001828:	d113      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d109      	bne.n	8001852 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d06e      	beq.n	8001930 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	2b0c      	cmp	r3, #12
 8001856:	d069      	beq.n	800192c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001858:	4b53      	ldr	r3, [pc, #332]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001864:	4b50      	ldr	r3, [pc, #320]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0ad      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001874:	4b4c      	ldr	r3, [pc, #304]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a4b      	ldr	r2, [pc, #300]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800187a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800187e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001880:	f7ff f910 	bl	8000aa4 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f90c 	bl	8000aa4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e09a      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b43      	ldr	r3, [pc, #268]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a6:	4b40      	ldr	r3, [pc, #256]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	4b40      	ldr	r3, [pc, #256]	@ (80019ac <HAL_RCC_OscConfig+0x784>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018b6:	3a01      	subs	r2, #1
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018c0:	0212      	lsls	r2, r2, #8
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018c8:	0852      	lsrs	r2, r2, #1
 80018ca:	3a01      	subs	r2, #1
 80018cc:	0552      	lsls	r2, r2, #21
 80018ce:	4311      	orrs	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018d4:	0852      	lsrs	r2, r2, #1
 80018d6:	3a01      	subs	r2, #1
 80018d8:	0652      	lsls	r2, r2, #25
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018e0:	0912      	lsrs	r2, r2, #4
 80018e2:	0452      	lsls	r2, r2, #17
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4930      	ldr	r1, [pc, #192]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018ec:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2d      	ldr	r2, [pc, #180]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001902:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001904:	f7ff f8ce 	bl	8000aa4 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f8ca 	bl	8000aa4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e058      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192a:	e050      	b.n	80019ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e04f      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d148      	bne.n	80019ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001948:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001952:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001954:	f7ff f8a6 	bl	8000aa4 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f8a2 	bl	8000aa4 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e030      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x734>
 800197a:	e028      	b.n	80019ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b0c      	cmp	r3, #12
 8001980:	d023      	beq.n	80019ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_RCC_OscConfig+0x780>)
 8001988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff f889 	bl	8000aa4 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	e00c      	b.n	80019b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff f885 	bl	8000aa4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d905      	bls.n	80019b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e013      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_RCC_OscConfig+0x7b0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ec      	bne.n	8001996 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_RCC_OscConfig+0x7b0>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4905      	ldr	r1, [pc, #20]	@ (80019d8 <HAL_RCC_OscConfig+0x7b0>)
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_RCC_OscConfig+0x7b4>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
 80019c8:	e001      	b.n	80019ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	feeefffc 	.word	0xfeeefffc

080019e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0e7      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b75      	ldr	r3, [pc, #468]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d910      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b72      	ldr	r3, [pc, #456]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 0207 	bic.w	r2, r3, #7
 8001a0a:	4970      	ldr	r1, [pc, #448]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0cf      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b66      	ldr	r3, [pc, #408]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d908      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a40:	4b63      	ldr	r3, [pc, #396]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4960      	ldr	r1, [pc, #384]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d04c      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d121      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0a6      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	4b54      	ldr	r3, [pc, #336]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e09a      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a96:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e08e      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e086      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b46      	ldr	r3, [pc, #280]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4943      	ldr	r1, [pc, #268]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac8:	f7fe ffec 	bl	8000aa4 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7fe ffe8 	bl	8000aa4 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e06e      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d208      	bcs.n	8001b26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	492b      	ldr	r1, [pc, #172]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b26:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d210      	bcs.n	8001b56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b34:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 0207 	bic.w	r2, r3, #7
 8001b3c:	4923      	ldr	r1, [pc, #140]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <HAL_RCC_ClockConfig+0x1ec>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e036      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b62:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4918      	ldr	r1, [pc, #96]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d009      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4910      	ldr	r1, [pc, #64]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b94:	f000 f824 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	490b      	ldr	r1, [pc, #44]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_ClockConfig+0x1fc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe ff23 	bl	8000a04 <HAL_InitTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	08004118 	.word	0x08004118
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	2000001c 	.word	0x2000001c

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d121      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d11e      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c14:	4b34      	ldr	r3, [pc, #208]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c20:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e005      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e004      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d134      	bne.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0xac>
 8001c84:	e005      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c88:	617b      	str	r3, [r7, #20]
      break;
 8001c8a:	e005      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c8e:	617b      	str	r3, [r7, #20]
      break;
 8001c90:	e002      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	091b      	lsrs	r3, r3, #4
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	fb03 f202 	mul.w	r2, r3, r2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	0e5b      	lsrs	r3, r3, #25
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3724      	adds	r7, #36	@ 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08004130 	.word	0x08004130
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000018 	.word	0x20000018

08001d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d14:	f7ff fff0 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4904      	ldr	r1, [pc, #16]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08004128 	.word	0x08004128

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d40:	f7ff ffda 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0adb      	lsrs	r3, r3, #11
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	@ (8001d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08004128 	.word	0x08004128

08001d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d80:	f7ff f9ee 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001d84:	6178      	str	r0, [r7, #20]
 8001d86:	e014      	b.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8c:	4a24      	ldr	r2, [pc, #144]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d94:	4b22      	ldr	r3, [pc, #136]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da0:	f7ff f9de 	bl	8001160 <HAL_PWREx_GetVoltageRange>
 8001da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001db8:	d10b      	bne.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b80      	cmp	r3, #128	@ 0x80
 8001dbe:	d919      	bls.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dc4:	d902      	bls.n	8001dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e013      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dcc:	2301      	movs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e010      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	@ 0x80
 8001dd6:	d902      	bls.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dd8:	2303      	movs	r3, #3
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e00a      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b80      	cmp	r3, #128	@ 0x80
 8001de2:	d102      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e004      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b70      	cmp	r3, #112	@ 0x70
 8001dee:	d101      	bne.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df0:	2301      	movs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 0207 	bic.w	r2, r3, #7
 8001dfc:	4909      	ldr	r1, [pc, #36]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e04:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40022000 	.word	0x40022000

08001e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e30:	2300      	movs	r3, #0
 8001e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e34:	2300      	movs	r3, #0
 8001e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d041      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e48:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e4e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e52:	d824      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e5e:	d81e      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e6c:	4b86      	ldr	r3, [pc, #536]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a85      	ldr	r2, [pc, #532]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e76:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e78:	e015      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fabb 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fba6 	bl	80025e4 <RCCEx_PLLSAI2_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eac:	4b76      	ldr	r3, [pc, #472]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eba:	4973      	ldr	r1, [pc, #460]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d041      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001edc:	d02a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ede:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ee2:	d824      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ee4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ee8:	d008      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eee:	d81e      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001efa:	e018      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001efc:	4b62      	ldr	r3, [pc, #392]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a61      	ldr	r2, [pc, #388]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f08:	e015      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fa73 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fb5e 	bl	80025e4 <RCCEx_PLLSAI2_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f2c:	e003      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	74fb      	strb	r3, [r7, #19]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f3c:	4b52      	ldr	r3, [pc, #328]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f4a:	494f      	ldr	r1, [pc, #316]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f52:	e001      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a0 	beq.w	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f80:	4b41      	ldr	r3, [pc, #260]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	4a40      	ldr	r2, [pc, #256]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800208c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fd7c 	bl	8000aa4 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fae:	e009      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fd78 	bl	8000aa4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d902      	bls.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc4:	4b31      	ldr	r3, [pc, #196]	@ (800208c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d15c      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fe0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01f      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d019      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ffe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a20      	ldr	r2, [pc, #128]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a1c      	ldr	r2, [pc, #112]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002020:	4a19      	ldr	r2, [pc, #100]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7fe fd37 	bl	8000aa4 <HAL_GetTick>
 8002036:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002038:	e00b      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fd33 	bl	8000aa4 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d902      	bls.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	74fb      	strb	r3, [r7, #19]
            break;
 8002050:	e006      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	4b0d      	ldr	r3, [pc, #52]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ec      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002066:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002076:	4904      	ldr	r1, [pc, #16]	@ (8002088 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800207e:	e009      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
 8002084:	e006      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002094:	7c7b      	ldrb	r3, [r7, #17]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b9e      	ldr	r3, [pc, #632]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	4a9d      	ldr	r2, [pc, #628]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b2:	4b98      	ldr	r3, [pc, #608]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b8:	f023 0203 	bic.w	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	4994      	ldr	r1, [pc, #592]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020da:	f023 020c 	bic.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e2:	498c      	ldr	r1, [pc, #560]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020f6:	4b87      	ldr	r3, [pc, #540]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	4983      	ldr	r1, [pc, #524]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002118:	4b7e      	ldr	r3, [pc, #504]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	497b      	ldr	r1, [pc, #492]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800213a:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002140:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002148:	4972      	ldr	r1, [pc, #456]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800215c:	4b6d      	ldr	r3, [pc, #436]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	496a      	ldr	r1, [pc, #424]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800217e:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218c:	4961      	ldr	r1, [pc, #388]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	4959      	ldr	r1, [pc, #356]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c2:	4b54      	ldr	r3, [pc, #336]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021d0:	4950      	ldr	r1, [pc, #320]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	4948      	ldr	r1, [pc, #288]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002206:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002214:	493f      	ldr	r1, [pc, #252]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d028      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002228:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002236:	4937      	ldr	r1, [pc, #220]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002246:	d106      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002248:	4b32      	ldr	r3, [pc, #200]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a31      	ldr	r2, [pc, #196]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002252:	60d3      	str	r3, [r2, #12]
 8002254:	e011      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800225a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800225e:	d10c      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3304      	adds	r3, #4
 8002264:	2101      	movs	r1, #1
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f8c8 	bl	80023fc <RCCEx_PLLSAI1_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d028      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002286:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	491f      	ldr	r1, [pc, #124]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022a4:	d106      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022b0:	60d3      	str	r3, [r2, #12]
 80022b2:	e011      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2101      	movs	r1, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f899 	bl	80023fc <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02b      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f2:	4908      	ldr	r1, [pc, #32]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002302:	d109      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a02      	ldr	r2, [pc, #8]	@ (8002314 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800230e:	60d3      	str	r3, [r2, #12]
 8002310:	e014      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002320:	d10c      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f867 	bl	80023fc <RCCEx_PLLSAI1_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d02f      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002348:	4b2b      	ldr	r3, [pc, #172]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002356:	4928      	ldr	r1, [pc, #160]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002362:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002366:	d10d      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f844 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d014      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	74bb      	strb	r3, [r7, #18]
 8002382:	e011      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3320      	adds	r3, #32
 8002392:	2102      	movs	r1, #2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f925 	bl	80025e4 <RCCEx_PLLSAI2_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023c2:	490d      	ldr	r1, [pc, #52]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023e6:	4904      	ldr	r1, [pc, #16]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800240a:	4b75      	ldr	r3, [pc, #468]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d018      	beq.n	8002448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002416:	4b72      	ldr	r3, [pc, #456]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0203 	and.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
       ||
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800242e:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
       ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d047      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e044      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d018      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x86>
 8002450:	2b03      	cmp	r3, #3
 8002452:	d825      	bhi.n	80024a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002454:	2b01      	cmp	r3, #1
 8002456:	d002      	beq.n	800245e <RCCEx_PLLSAI1_Config+0x62>
 8002458:	2b02      	cmp	r3, #2
 800245a:	d009      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x74>
 800245c:	e020      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800245e:	4b60      	ldr	r3, [pc, #384]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11d      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246e:	e01a      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002470:	4b5b      	ldr	r3, [pc, #364]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d116      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002480:	e013      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002482:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800248e:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800249e:	e006      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e004      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024b6:	4b4a      	ldr	r3, [pc, #296]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	430b      	orrs	r3, r1
 80024cc:	4944      	ldr	r1, [pc, #272]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d17d      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d8:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a40      	ldr	r2, [pc, #256]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe fade 	bl	8000aa4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ea:	e009      	b.n	8002500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ec:	f7fe fada 	bl	8000aa4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	73fb      	strb	r3, [r7, #15]
        break;
 80024fe:	e005      	b.n	800250c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002500:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ef      	bne.n	80024ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d160      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d111      	bne.n	800253c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002518:	4b31      	ldr	r3, [pc, #196]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	0211      	lsls	r1, r2, #8
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68d2      	ldr	r2, [r2, #12]
 800252e:	0912      	lsrs	r2, r2, #4
 8002530:	0452      	lsls	r2, r2, #17
 8002532:	430a      	orrs	r2, r1
 8002534:	492a      	ldr	r1, [pc, #168]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	610b      	str	r3, [r1, #16]
 800253a:	e027      	b.n	800258c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d112      	bne.n	8002568 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002542:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800254a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	0211      	lsls	r1, r2, #8
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6912      	ldr	r2, [r2, #16]
 8002558:	0852      	lsrs	r2, r2, #1
 800255a:	3a01      	subs	r2, #1
 800255c:	0552      	lsls	r2, r2, #21
 800255e:	430a      	orrs	r2, r1
 8002560:	491f      	ldr	r1, [pc, #124]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
 8002566:	e011      	b.n	800258c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002568:	4b1d      	ldr	r3, [pc, #116]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002570:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6892      	ldr	r2, [r2, #8]
 8002578:	0211      	lsls	r1, r2, #8
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6952      	ldr	r2, [r2, #20]
 800257e:	0852      	lsrs	r2, r2, #1
 8002580:	3a01      	subs	r2, #1
 8002582:	0652      	lsls	r2, r2, #25
 8002584:	430a      	orrs	r2, r1
 8002586:	4916      	ldr	r1, [pc, #88]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800258c:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002596:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe fa84 	bl	8000aa4 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259e:	e009      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a0:	f7fe fa80 	bl	8000aa4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d902      	bls.n	80025b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	73fb      	strb	r3, [r7, #15]
          break;
 80025b2:	e005      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b4:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0ef      	beq.n	80025a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c6:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	4904      	ldr	r1, [pc, #16]	@ (80025e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f2:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025fe:	4b67      	ldr	r3, [pc, #412]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
       ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002616:	4b61      	ldr	r3, [pc, #388]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
       ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d047      	beq.n	80026ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e044      	b.n	80026ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d018      	beq.n	800266a <RCCEx_PLLSAI2_Config+0x86>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d825      	bhi.n	8002688 <RCCEx_PLLSAI2_Config+0xa4>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d002      	beq.n	8002646 <RCCEx_PLLSAI2_Config+0x62>
 8002640:	2b02      	cmp	r3, #2
 8002642:	d009      	beq.n	8002658 <RCCEx_PLLSAI2_Config+0x74>
 8002644:	e020      	b.n	8002688 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002646:	4b55      	ldr	r3, [pc, #340]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d11d      	bne.n	800268e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002656:	e01a      	b.n	800268e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002658:	4b50      	ldr	r3, [pc, #320]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002668:	e013      	b.n	8002692 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800266a:	4b4c      	ldr	r3, [pc, #304]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10f      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002676:	4b49      	ldr	r3, [pc, #292]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002686:	e006      	b.n	8002696 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	73fb      	strb	r3, [r7, #15]
      break;
 800268c:	e004      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800268e:	bf00      	nop
 8002690:	e002      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002696:	bf00      	nop
    }

    if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800269e:	4b3f      	ldr	r3, [pc, #252]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	430b      	orrs	r3, r1
 80026b4:	4939      	ldr	r1, [pc, #228]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d167      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026c0:	4b36      	ldr	r3, [pc, #216]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a35      	ldr	r2, [pc, #212]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026cc:	f7fe f9ea 	bl	8000aa4 <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026d2:	e009      	b.n	80026e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d4:	f7fe f9e6 	bl	8000aa4 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	73fb      	strb	r3, [r7, #15]
        break;
 80026e6:	e005      	b.n	80026f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026e8:	4b2c      	ldr	r3, [pc, #176]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ef      	bne.n	80026d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d14a      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d111      	bne.n	8002724 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002700:	4b26      	ldr	r3, [pc, #152]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6892      	ldr	r2, [r2, #8]
 8002710:	0211      	lsls	r1, r2, #8
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68d2      	ldr	r2, [r2, #12]
 8002716:	0912      	lsrs	r2, r2, #4
 8002718:	0452      	lsls	r2, r2, #17
 800271a:	430a      	orrs	r2, r1
 800271c:	491f      	ldr	r1, [pc, #124]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	614b      	str	r3, [r1, #20]
 8002722:	e011      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002724:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800272c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	0211      	lsls	r1, r2, #8
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6912      	ldr	r2, [r2, #16]
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0652      	lsls	r2, r2, #25
 8002740:	430a      	orrs	r2, r1
 8002742:	4916      	ldr	r1, [pc, #88]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a13      	ldr	r2, [pc, #76]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002752:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe f9a6 	bl	8000aa4 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800275a:	e009      	b.n	8002770 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800275c:	f7fe f9a2 	bl	8000aa4 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	73fb      	strb	r3, [r7, #15]
          break;
 800276e:	e005      	b.n	800277c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4904      	ldr	r1, [pc, #16]	@ (800279c <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e040      	b.n	8002834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fe f824 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 feba 	bl	8003560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fbff 	bl	8002ff0 <UART_SetConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e01b      	b.n	8002834 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800280a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800281a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 ff39 	bl	80036a4 <UART_CheckIdleState>
 8002832:	4603      	mov	r3, r0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800283c:	b480      	push	{r7}
 800283e:	b08b      	sub	sp, #44	@ 0x2c
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800284e:	2b20      	cmp	r3, #32
 8002850:	d147      	bne.n	80028e2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Transmit_IT+0x22>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e040      	b.n	80028e4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	@ 0x21
 800288a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002894:	d107      	bne.n	80028a6 <HAL_UART_Transmit_IT+0x6a>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <HAL_UART_Transmit_IT+0xb4>)
 80028a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80028a4:	e002      	b.n	80028ac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <HAL_UART_Transmit_IT+0xb8>)
 80028aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	69f9      	ldr	r1, [r7, #28]
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e6      	bne.n	80028ac <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
  }
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	372c      	adds	r7, #44	@ 0x2c
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	08003c07 	.word	0x08003c07
 80028f4:	08003b51 	.word	0x08003b51

080028f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	4613      	mov	r3, r2
 8002904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800290c:	2b20      	cmp	r3, #32
 800290e:	d137      	bne.n	8002980 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_UART_Receive_IT+0x24>
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e030      	b.n	8002982 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a18      	ldr	r2, [pc, #96]	@ (800298c <HAL_UART_Receive_IT+0x94>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d01f      	beq.n	8002970 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d018      	beq.n	8002970 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	613b      	str	r3, [r7, #16]
   return(result);
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	69f9      	ldr	r1, [r7, #28]
 8002962:	6a3a      	ldr	r2, [r7, #32]
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	61bb      	str	r3, [r7, #24]
   return(result);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e6      	bne.n	800293e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	461a      	mov	r2, r3
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 ffaa 	bl	80038d0 <UART_Start_Receive_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	e000      	b.n	8002982 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40008000 	.word	0x40008000

08002990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0ba      	sub	sp, #232	@ 0xe8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80029ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80029be:	4013      	ands	r3, r2
 80029c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80029c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d115      	bne.n	80029f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00f      	beq.n	80029f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 82ca 	beq.w	8002f82 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
      }
      return;
 80029f6:	e2c4      	b.n	8002f82 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8117 	beq.w	8002c30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a12:	4b85      	ldr	r3, [pc, #532]	@ (8002c28 <HAL_UART_IRQHandler+0x298>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 810a 	beq.w	8002c30 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d011      	beq.n	8002a4c <HAL_UART_IRQHandler+0xbc>
 8002a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00b      	beq.n	8002a4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d011      	beq.n	8002a7c <HAL_UART_IRQHandler+0xec>
 8002a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d011      	beq.n	8002aac <HAL_UART_IRQHandler+0x11c>
 8002a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2204      	movs	r2, #4
 8002a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa2:	f043 0202 	orr.w	r2, r3, #2
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d017      	beq.n	8002ae8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ade:	f043 0208 	orr.w	r2, r3, #8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_UART_IRQHandler+0x18a>
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8230 	beq.w	8002f86 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d04f      	beq.n	8002c12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 ff72 	bl	8003a5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b82:	2b40      	cmp	r3, #64	@ 0x40
 8002b84:	d141      	bne.n	8002c0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3308      	adds	r3, #8
 8002bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1d9      	bne.n	8002b86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d013      	beq.n	8002c02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bde:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <HAL_UART_IRQHandler+0x29c>)
 8002be0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f8b7 	bl	8000d5a <HAL_DMA_Abort_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d017      	beq.n	8002c22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	e00f      	b.n	8002c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9de 	bl	8002fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	e00b      	b.n	8002c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9da 	bl	8002fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	e007      	b.n	8002c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9d6 	bl	8002fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002c20:	e1b1      	b.n	8002f86 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c22:	bf00      	nop
    return;
 8002c24:	e1af      	b.n	8002f86 <HAL_UART_IRQHandler+0x5f6>
 8002c26:	bf00      	nop
 8002c28:	04000120 	.word	0x04000120
 8002c2c:	08003b25 	.word	0x08003b25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	f040 816a 	bne.w	8002f0e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8163 	beq.w	8002f0e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 815c 	beq.w	8002f0e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2210      	movs	r2, #16
 8002c5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c68:	2b40      	cmp	r3, #64	@ 0x40
 8002c6a:	f040 80d4 	bne.w	8002e16 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80ad 	beq.w	8002dde <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	f080 80a5 	bcs.w	8002dde <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 8086 	bne.w	8002dbc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cde:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cea:	e841 2300 	strex	r3, r2, [r1]
 8002cee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1da      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d04:	e853 3f00 	ldrex	r3, [r3]
 8002d08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3308      	adds	r3, #8
 8002d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e1      	bne.n	8002cfa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3308      	adds	r3, #8
 8002d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d62:	e841 2300 	strex	r3, r2, [r1]
 8002d66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1e3      	bne.n	8002d36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d8c:	f023 0310 	bic.w	r3, r3, #16
 8002d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002da0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e4      	bne.n	8002d7c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd ff91 	bl	8000cde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8fe 	bl	8002fd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ddc:	e0d5      	b.n	8002f8a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002de4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 80ce 	bne.w	8002f8a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	f040 80c5 	bne.w	8002f8a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8e2 	bl	8002fd8 <HAL_UARTEx_RxEventCallback>
      return;
 8002e14:	e0b9      	b.n	8002f8a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80ab 	beq.w	8002f8e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80a6 	beq.w	8002f8e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e6c:	e841 2300 	strex	r3, r2, [r1]
 8002e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e4      	bne.n	8002e42 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	623b      	str	r3, [r7, #32]
   return(result);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3308      	adds	r3, #8
 8002e98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ea4:	e841 2300 	strex	r3, r2, [r1]
 8002ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e3      	bne.n	8002e78 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f023 0310 	bic.w	r3, r3, #16
 8002ed8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	617b      	str	r3, [r7, #20]
   return(result);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e4      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f866 	bl	8002fd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f0c:	e03f      	b.n	8002f8e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00e      	beq.n	8002f38 <HAL_UART_IRQHandler+0x5a8>
 8002f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f001 f8af 	bl	8004094 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f36:	e02d      	b.n	8002f94 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01c      	beq.n	8002f92 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
    }
    return;
 8002f60:	e017      	b.n	8002f92 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d012      	beq.n	8002f94 <HAL_UART_IRQHandler+0x604>
 8002f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00c      	beq.n	8002f94 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fea3 	bl	8003cc6 <UART_EndTransmit_IT>
    return;
 8002f80:	e008      	b.n	8002f94 <HAL_UART_IRQHandler+0x604>
      return;
 8002f82:	bf00      	nop
 8002f84:	e006      	b.n	8002f94 <HAL_UART_IRQHandler+0x604>
    return;
 8002f86:	bf00      	nop
 8002f88:	e004      	b.n	8002f94 <HAL_UART_IRQHandler+0x604>
      return;
 8002f8a:	bf00      	nop
 8002f8c:	e002      	b.n	8002f94 <HAL_UART_IRQHandler+0x604>
      return;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_UART_IRQHandler+0x604>
    return;
 8002f92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f94:	37e8      	adds	r7, #232	@ 0xe8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b08a      	sub	sp, #40	@ 0x28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	431a      	orrs	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4313      	orrs	r3, r2
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	4ba4      	ldr	r3, [pc, #656]	@ (80032b0 <UART_SetConfig+0x2c0>)
 8003020:	4013      	ands	r3, r2
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003028:	430b      	orrs	r3, r1
 800302a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a99      	ldr	r2, [pc, #612]	@ (80032b4 <UART_SetConfig+0x2c4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003058:	4313      	orrs	r3, r2
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a90      	ldr	r2, [pc, #576]	@ (80032b8 <UART_SetConfig+0x2c8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d126      	bne.n	80030c8 <UART_SetConfig+0xd8>
 800307a:	4b90      	ldr	r3, [pc, #576]	@ (80032bc <UART_SetConfig+0x2cc>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b03      	cmp	r3, #3
 8003086:	d81b      	bhi.n	80030c0 <UART_SetConfig+0xd0>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0xa0>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030a1 	.word	0x080030a1
 8003094:	080030b1 	.word	0x080030b1
 8003098:	080030a9 	.word	0x080030a9
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a6:	e116      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ae:	e112      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b6:	e10e      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030be:	e10a      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c6:	e106      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a7c      	ldr	r2, [pc, #496]	@ (80032c0 <UART_SetConfig+0x2d0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d138      	bne.n	8003144 <UART_SetConfig+0x154>
 80030d2:	4b7a      	ldr	r3, [pc, #488]	@ (80032bc <UART_SetConfig+0x2cc>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b0c      	cmp	r3, #12
 80030de:	d82d      	bhi.n	800313c <UART_SetConfig+0x14c>
 80030e0:	a201      	add	r2, pc, #4	@ (adr r2, 80030e8 <UART_SetConfig+0xf8>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800311d 	.word	0x0800311d
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	0800313d 	.word	0x0800313d
 80030f4:	0800313d 	.word	0x0800313d
 80030f8:	0800312d 	.word	0x0800312d
 80030fc:	0800313d 	.word	0x0800313d
 8003100:	0800313d 	.word	0x0800313d
 8003104:	0800313d 	.word	0x0800313d
 8003108:	08003125 	.word	0x08003125
 800310c:	0800313d 	.word	0x0800313d
 8003110:	0800313d 	.word	0x0800313d
 8003114:	0800313d 	.word	0x0800313d
 8003118:	08003135 	.word	0x08003135
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003122:	e0d8      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003124:	2302      	movs	r3, #2
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312a:	e0d4      	b.n	80032d6 <UART_SetConfig+0x2e6>
 800312c:	2304      	movs	r3, #4
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003132:	e0d0      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003134:	2308      	movs	r3, #8
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e0cc      	b.n	80032d6 <UART_SetConfig+0x2e6>
 800313c:	2310      	movs	r3, #16
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e0c8      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5e      	ldr	r2, [pc, #376]	@ (80032c4 <UART_SetConfig+0x2d4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d125      	bne.n	800319a <UART_SetConfig+0x1aa>
 800314e:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <UART_SetConfig+0x2cc>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003154:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003158:	2b30      	cmp	r3, #48	@ 0x30
 800315a:	d016      	beq.n	800318a <UART_SetConfig+0x19a>
 800315c:	2b30      	cmp	r3, #48	@ 0x30
 800315e:	d818      	bhi.n	8003192 <UART_SetConfig+0x1a2>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d00a      	beq.n	800317a <UART_SetConfig+0x18a>
 8003164:	2b20      	cmp	r3, #32
 8003166:	d814      	bhi.n	8003192 <UART_SetConfig+0x1a2>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <UART_SetConfig+0x182>
 800316c:	2b10      	cmp	r3, #16
 800316e:	d008      	beq.n	8003182 <UART_SetConfig+0x192>
 8003170:	e00f      	b.n	8003192 <UART_SetConfig+0x1a2>
 8003172:	2300      	movs	r3, #0
 8003174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003178:	e0ad      	b.n	80032d6 <UART_SetConfig+0x2e6>
 800317a:	2302      	movs	r3, #2
 800317c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003180:	e0a9      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003182:	2304      	movs	r3, #4
 8003184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003188:	e0a5      	b.n	80032d6 <UART_SetConfig+0x2e6>
 800318a:	2308      	movs	r3, #8
 800318c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003190:	e0a1      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003192:	2310      	movs	r3, #16
 8003194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003198:	e09d      	b.n	80032d6 <UART_SetConfig+0x2e6>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a4a      	ldr	r2, [pc, #296]	@ (80032c8 <UART_SetConfig+0x2d8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d125      	bne.n	80031f0 <UART_SetConfig+0x200>
 80031a4:	4b45      	ldr	r3, [pc, #276]	@ (80032bc <UART_SetConfig+0x2cc>)
 80031a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b0:	d016      	beq.n	80031e0 <UART_SetConfig+0x1f0>
 80031b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b4:	d818      	bhi.n	80031e8 <UART_SetConfig+0x1f8>
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d00a      	beq.n	80031d0 <UART_SetConfig+0x1e0>
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d814      	bhi.n	80031e8 <UART_SetConfig+0x1f8>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <UART_SetConfig+0x1d8>
 80031c2:	2b40      	cmp	r3, #64	@ 0x40
 80031c4:	d008      	beq.n	80031d8 <UART_SetConfig+0x1e8>
 80031c6:	e00f      	b.n	80031e8 <UART_SetConfig+0x1f8>
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ce:	e082      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80031d0:	2302      	movs	r3, #2
 80031d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d6:	e07e      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80031d8:	2304      	movs	r3, #4
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031de:	e07a      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80031e0:	2308      	movs	r3, #8
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e6:	e076      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80031e8:	2310      	movs	r3, #16
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ee:	e072      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a35      	ldr	r2, [pc, #212]	@ (80032cc <UART_SetConfig+0x2dc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d12a      	bne.n	8003250 <UART_SetConfig+0x260>
 80031fa:	4b30      	ldr	r3, [pc, #192]	@ (80032bc <UART_SetConfig+0x2cc>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003208:	d01a      	beq.n	8003240 <UART_SetConfig+0x250>
 800320a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320e:	d81b      	bhi.n	8003248 <UART_SetConfig+0x258>
 8003210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003214:	d00c      	beq.n	8003230 <UART_SetConfig+0x240>
 8003216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321a:	d815      	bhi.n	8003248 <UART_SetConfig+0x258>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <UART_SetConfig+0x238>
 8003220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003224:	d008      	beq.n	8003238 <UART_SetConfig+0x248>
 8003226:	e00f      	b.n	8003248 <UART_SetConfig+0x258>
 8003228:	2300      	movs	r3, #0
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322e:	e052      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003230:	2302      	movs	r3, #2
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003236:	e04e      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003238:	2304      	movs	r3, #4
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323e:	e04a      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003240:	2308      	movs	r3, #8
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003246:	e046      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003248:	2310      	movs	r3, #16
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324e:	e042      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a17      	ldr	r2, [pc, #92]	@ (80032b4 <UART_SetConfig+0x2c4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d13a      	bne.n	80032d0 <UART_SetConfig+0x2e0>
 800325a:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <UART_SetConfig+0x2cc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003268:	d01a      	beq.n	80032a0 <UART_SetConfig+0x2b0>
 800326a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326e:	d81b      	bhi.n	80032a8 <UART_SetConfig+0x2b8>
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003274:	d00c      	beq.n	8003290 <UART_SetConfig+0x2a0>
 8003276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327a:	d815      	bhi.n	80032a8 <UART_SetConfig+0x2b8>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <UART_SetConfig+0x298>
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003284:	d008      	beq.n	8003298 <UART_SetConfig+0x2a8>
 8003286:	e00f      	b.n	80032a8 <UART_SetConfig+0x2b8>
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328e:	e022      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003290:	2302      	movs	r3, #2
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003296:	e01e      	b.n	80032d6 <UART_SetConfig+0x2e6>
 8003298:	2304      	movs	r3, #4
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800329e:	e01a      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80032a0:	2308      	movs	r3, #8
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032a6:	e016      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80032a8:	2310      	movs	r3, #16
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ae:	e012      	b.n	80032d6 <UART_SetConfig+0x2e6>
 80032b0:	efff69f3 	.word	0xefff69f3
 80032b4:	40008000 	.word	0x40008000
 80032b8:	40013800 	.word	0x40013800
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40004400 	.word	0x40004400
 80032c4:	40004800 	.word	0x40004800
 80032c8:	40004c00 	.word	0x40004c00
 80032cc:	40005000 	.word	0x40005000
 80032d0:	2310      	movs	r3, #16
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a9f      	ldr	r2, [pc, #636]	@ (8003558 <UART_SetConfig+0x568>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d17a      	bne.n	80033d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d824      	bhi.n	8003332 <UART_SetConfig+0x342>
 80032e8:	a201      	add	r2, pc, #4	@ (adr r2, 80032f0 <UART_SetConfig+0x300>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003315 	.word	0x08003315
 80032f4:	08003333 	.word	0x08003333
 80032f8:	0800331d 	.word	0x0800331d
 80032fc:	08003333 	.word	0x08003333
 8003300:	08003323 	.word	0x08003323
 8003304:	08003333 	.word	0x08003333
 8003308:	08003333 	.word	0x08003333
 800330c:	08003333 	.word	0x08003333
 8003310:	0800332b 	.word	0x0800332b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7fe fcfc 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8003318:	61f8      	str	r0, [r7, #28]
        break;
 800331a:	e010      	b.n	800333e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800331c:	4b8f      	ldr	r3, [pc, #572]	@ (800355c <UART_SetConfig+0x56c>)
 800331e:	61fb      	str	r3, [r7, #28]
        break;
 8003320:	e00d      	b.n	800333e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003322:	f7fe fc5d 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8003326:	61f8      	str	r0, [r7, #28]
        break;
 8003328:	e009      	b.n	800333e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800332a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800332e:	61fb      	str	r3, [r7, #28]
        break;
 8003330:	e005      	b.n	800333e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800333c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80fb 	beq.w	800353c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	429a      	cmp	r2, r3
 8003354:	d305      	bcc.n	8003362 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	429a      	cmp	r2, r3
 8003360:	d903      	bls.n	800336a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003368:	e0e8      	b.n	800353c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2200      	movs	r2, #0
 800336e:	461c      	mov	r4, r3
 8003370:	4615      	mov	r5, r2
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	022b      	lsls	r3, r5, #8
 800337c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003380:	0222      	lsls	r2, r4, #8
 8003382:	68f9      	ldr	r1, [r7, #12]
 8003384:	6849      	ldr	r1, [r1, #4]
 8003386:	0849      	lsrs	r1, r1, #1
 8003388:	2000      	movs	r0, #0
 800338a:	4688      	mov	r8, r1
 800338c:	4681      	mov	r9, r0
 800338e:	eb12 0a08 	adds.w	sl, r2, r8
 8003392:	eb43 0b09 	adc.w	fp, r3, r9
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a4:	4650      	mov	r0, sl
 80033a6:	4659      	mov	r1, fp
 80033a8:	f7fc ff0e 	bl	80001c8 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033ba:	d308      	bcc.n	80033ce <UART_SetConfig+0x3de>
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c2:	d204      	bcs.n	80033ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e0b6      	b.n	800353c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033d4:	e0b2      	b.n	800353c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033de:	d15e      	bne.n	800349e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80033e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d828      	bhi.n	800343a <UART_SetConfig+0x44a>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <UART_SetConfig+0x400>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	08003425 	.word	0x08003425
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	0800342b 	.word	0x0800342b
 8003404:	0800343b 	.word	0x0800343b
 8003408:	0800343b 	.word	0x0800343b
 800340c:	0800343b 	.word	0x0800343b
 8003410:	08003433 	.word	0x08003433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003414:	f7fe fc7c 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 8003418:	61f8      	str	r0, [r7, #28]
        break;
 800341a:	e014      	b.n	8003446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7fe fc8e 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 8003420:	61f8      	str	r0, [r7, #28]
        break;
 8003422:	e010      	b.n	8003446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <UART_SetConfig+0x56c>)
 8003426:	61fb      	str	r3, [r7, #28]
        break;
 8003428:	e00d      	b.n	8003446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342a:	f7fe fbd9 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 800342e:	61f8      	str	r0, [r7, #28]
        break;
 8003430:	e009      	b.n	8003446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003436:	61fb      	str	r3, [r7, #28]
        break;
 8003438:	e005      	b.n	8003446 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d077      	beq.n	800353c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	005a      	lsls	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b0f      	cmp	r3, #15
 8003466:	d916      	bls.n	8003496 <UART_SetConfig+0x4a6>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d212      	bcs.n	8003496 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f023 030f 	bic.w	r3, r3, #15
 8003478:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	b29b      	uxth	r3, r3
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	b29a      	uxth	r2, r3
 8003486:	8afb      	ldrh	r3, [r7, #22]
 8003488:	4313      	orrs	r3, r2
 800348a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	8afa      	ldrh	r2, [r7, #22]
 8003492:	60da      	str	r2, [r3, #12]
 8003494:	e052      	b.n	800353c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800349c:	e04e      	b.n	800353c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800349e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d827      	bhi.n	80034f6 <UART_SetConfig+0x506>
 80034a6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ac <UART_SetConfig+0x4bc>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034e1 	.word	0x080034e1
 80034b8:	080034f7 	.word	0x080034f7
 80034bc:	080034e7 	.word	0x080034e7
 80034c0:	080034f7 	.word	0x080034f7
 80034c4:	080034f7 	.word	0x080034f7
 80034c8:	080034f7 	.word	0x080034f7
 80034cc:	080034ef 	.word	0x080034ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7fe fc1e 	bl	8001d10 <HAL_RCC_GetPCLK1Freq>
 80034d4:	61f8      	str	r0, [r7, #28]
        break;
 80034d6:	e014      	b.n	8003502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7fe fc30 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80034dc:	61f8      	str	r0, [r7, #28]
        break;
 80034de:	e010      	b.n	8003502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e0:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <UART_SetConfig+0x56c>)
 80034e2:	61fb      	str	r3, [r7, #28]
        break;
 80034e4:	e00d      	b.n	8003502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e6:	f7fe fb7b 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 80034ea:	61f8      	str	r0, [r7, #28]
        break;
 80034ec:	e009      	b.n	8003502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f2:	61fb      	str	r3, [r7, #28]
        break;
 80034f4:	e005      	b.n	8003502 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003500:	bf00      	nop
    }

    if (pclk != 0U)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d019      	beq.n	800353c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	085a      	lsrs	r2, r3, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	441a      	add	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	2b0f      	cmp	r3, #15
 8003520:	d909      	bls.n	8003536 <UART_SetConfig+0x546>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003528:	d205      	bcs.n	8003536 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e002      	b.n	800353c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003548:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800354c:	4618      	mov	r0, r3
 800354e:	3728      	adds	r7, #40	@ 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40008000 	.word	0x40008000
 800355c:	00f42400 	.word	0x00f42400

08003560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800365e:	d10a      	bne.n	8003676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	605a      	str	r2, [r3, #4]
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b098      	sub	sp, #96	@ 0x60
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036b4:	f7fd f9f6 	bl	8000aa4 <HAL_GetTick>
 80036b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d12e      	bne.n	8003726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d0:	2200      	movs	r2, #0
 80036d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f88c 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d021      	beq.n	8003726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003700:	647b      	str	r3, [r7, #68]	@ 0x44
 8003702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800370e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e6      	bne.n	80036e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e062      	b.n	80037ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d149      	bne.n	80037c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373c:	2200      	movs	r2, #0
 800373e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f856 	bl	80037f4 <UART_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d03c      	beq.n	80037c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	e853 3f00 	ldrex	r3, [r3]
 800375a:	623b      	str	r3, [r7, #32]
   return(result);
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800376c:	633b      	str	r3, [r7, #48]	@ 0x30
 800376e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003774:	e841 2300 	strex	r3, r2, [r1]
 8003778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e6      	bne.n	800374e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3308      	adds	r3, #8
 8003786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037a0:	61fa      	str	r2, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	69b9      	ldr	r1, [r7, #24]
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	617b      	str	r3, [r7, #20]
   return(result);
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e5      	bne.n	8003780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e011      	b.n	80037ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3758      	adds	r7, #88	@ 0x58
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	e04f      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d04b      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fd f949 	bl	8000aa4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <UART_WaitOnFlagUntilTimeout+0x30>
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e04e      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d037      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b80      	cmp	r3, #128	@ 0x80
 800383a:	d034      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b40      	cmp	r3, #64	@ 0x40
 8003840:	d031      	beq.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d110      	bne.n	8003872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2208      	movs	r2, #8
 8003856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f8ff 	bl	8003a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2208      	movs	r2, #8
 8003862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e029      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800387c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003880:	d111      	bne.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800388a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f8e5 	bl	8003a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e00f      	b.n	80038c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d0a0      	beq.n	8003806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b097      	sub	sp, #92	@ 0x5c
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	88fa      	ldrh	r2, [r7, #6]
 80038e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003902:	d10e      	bne.n	8003922 <UART_Start_Receive_IT+0x52>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <UART_Start_Receive_IT+0x48>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003912:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003916:	e02d      	b.n	8003974 <UART_Start_Receive_IT+0xa4>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	22ff      	movs	r2, #255	@ 0xff
 800391c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003920:	e028      	b.n	8003974 <UART_Start_Receive_IT+0xa4>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <UART_Start_Receive_IT+0x76>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <UART_Start_Receive_IT+0x6c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	@ 0xff
 8003936:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800393a:	e01b      	b.n	8003974 <UART_Start_Receive_IT+0xa4>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	227f      	movs	r2, #127	@ 0x7f
 8003940:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003944:	e016      	b.n	8003974 <UART_Start_Receive_IT+0xa4>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800394e:	d10d      	bne.n	800396c <UART_Start_Receive_IT+0x9c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <UART_Start_Receive_IT+0x92>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	227f      	movs	r2, #127	@ 0x7f
 800395c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003960:	e008      	b.n	8003974 <UART_Start_Receive_IT+0xa4>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	223f      	movs	r2, #63	@ 0x3f
 8003966:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800396a:	e003      	b.n	8003974 <UART_Start_Receive_IT+0xa4>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2222      	movs	r2, #34	@ 0x22
 8003980:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3308      	adds	r3, #8
 800398a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	657b      	str	r3, [r7, #84]	@ 0x54
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80039a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ac:	e841 2300 	strex	r3, r2, [r1]
 80039b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80039b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d107      	bne.n	80039d2 <UART_Start_Receive_IT+0x102>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4a21      	ldr	r2, [pc, #132]	@ (8003a54 <UART_Start_Receive_IT+0x184>)
 80039ce:	669a      	str	r2, [r3, #104]	@ 0x68
 80039d0:	e002      	b.n	80039d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a20      	ldr	r2, [pc, #128]	@ (8003a58 <UART_Start_Receive_IT+0x188>)
 80039d6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d019      	beq.n	8003a14 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80039f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a00:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a06:	e841 2300 	strex	r3, r2, [r1]
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1e6      	bne.n	80039e0 <UART_Start_Receive_IT+0x110>
 8003a12:	e018      	b.n	8003a46 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	613b      	str	r3, [r7, #16]
   return(result);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f043 0320 	orr.w	r3, r3, #32
 8003a28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a32:	623b      	str	r3, [r7, #32]
 8003a34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	69f9      	ldr	r1, [r7, #28]
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e6      	bne.n	8003a14 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	375c      	adds	r7, #92	@ 0x5c
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	08003ed9 	.word	0x08003ed9
 8003a58:	08003d1d 	.word	0x08003d1d

08003a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b095      	sub	sp, #84	@ 0x54
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e6      	bne.n	8003a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d118      	bne.n	8003b04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6979      	ldr	r1, [r7, #20]
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	613b      	str	r3, [r7, #16]
   return(result);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e6      	bne.n	8003ad2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b18:	bf00      	nop
 8003b1a:	3754      	adds	r7, #84	@ 0x54
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff fa3e 	bl	8002fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b08f      	sub	sp, #60	@ 0x3c
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b5c:	2b21      	cmp	r3, #33	@ 0x21
 8003b5e:	d14c      	bne.n	8003bfa <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d132      	bne.n	8003bd2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e6      	bne.n	8003b6c <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6979      	ldr	r1, [r7, #20]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e6      	bne.n	8003b9e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003bd0:	e013      	b.n	8003bfa <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003bfa:	bf00      	nop
 8003bfc:	373c      	adds	r7, #60	@ 0x3c
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b091      	sub	sp, #68	@ 0x44
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c12:	2b21      	cmp	r3, #33	@ 0x21
 8003c14:	d151      	bne.n	8003cba <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d132      	bne.n	8003c88 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	69b9      	ldr	r1, [r7, #24]
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e6      	bne.n	8003c54 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003c86:	e018      	b.n	8003cba <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003cba:	bf00      	nop
 8003cbc:	3744      	adds	r7, #68	@ 0x44
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b088      	sub	sp, #32
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	e853 3f00 	ldrex	r3, [r3]
 8003cda:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	e841 2300 	strex	r3, r2, [r1]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1e6      	bne.n	8003cce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff f945 	bl	8002f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d12:	bf00      	nop
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b09c      	sub	sp, #112	@ 0x70
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d2a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d34:	2b22      	cmp	r3, #34	@ 0x22
 8003d36:	f040 80be 	bne.w	8003eb6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003d40:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003d48:	b2d9      	uxtb	r1, r3
 8003d4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d54:	400a      	ands	r2, r1
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 80a3 	bne.w	8003eca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003da2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003da4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003da8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e6      	bne.n	8003d84 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003dd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003dd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a34      	ldr	r2, [pc, #208]	@ (8003ed4 <UART_RxISR_8BIT+0x1b8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01f      	beq.n	8003e48 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	623b      	str	r3, [r7, #32]
   return(result);
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e6      	bne.n	8003e16 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d12e      	bne.n	8003eae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0310 	bic.w	r3, r3, #16
 8003e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69b9      	ldr	r1, [r7, #24]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	617b      	str	r3, [r7, #20]
   return(result);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d103      	bne.n	8003e9e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff f896 	bl	8002fd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eac:	e00d      	b.n	8003eca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff f87e 	bl	8002fb0 <HAL_UART_RxCpltCallback>
}
 8003eb4:	e009      	b.n	8003eca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	8b1b      	ldrh	r3, [r3, #24]
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0208 	orr.w	r2, r2, #8
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	831a      	strh	r2, [r3, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	3770      	adds	r7, #112	@ 0x70
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40008000 	.word	0x40008000

08003ed8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b09c      	sub	sp, #112	@ 0x70
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ee6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ef0:	2b22      	cmp	r3, #34	@ 0x22
 8003ef2:	f040 80be 	bne.w	8004072 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003efc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f06:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003f0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1a:	1c9a      	adds	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f040 80a3 	bne.w	8004086 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f54:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f60:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003f64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f92:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a34      	ldr	r2, [pc, #208]	@ (8004090 <UART_RxISR_16BIT+0x1b8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d01f      	beq.n	8004004 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d018      	beq.n	8004004 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e6      	bne.n	8003fd2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004008:	2b01      	cmp	r3, #1
 800400a:	d12e      	bne.n	800406a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e6      	bne.n	8004012 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d103      	bne.n	800405a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2210      	movs	r2, #16
 8004058:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe ffb8 	bl	8002fd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004068:	e00d      	b.n	8004086 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe ffa0 	bl	8002fb0 <HAL_UART_RxCpltCallback>
}
 8004070:	e009      	b.n	8004086 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	8b1b      	ldrh	r3, [r3, #24]
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0208 	orr.w	r2, r2, #8
 8004082:	b292      	uxth	r2, r2
 8004084:	831a      	strh	r2, [r3, #24]
}
 8004086:	bf00      	nop
 8004088:	3770      	adds	r7, #112	@ 0x70
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40008000 	.word	0x40008000

08004094 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <memset>:
 80040a8:	4402      	add	r2, r0
 80040aa:	4603      	mov	r3, r0
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	f803 1b01 	strb.w	r1, [r3], #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <__libc_init_array>:
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4d0d      	ldr	r5, [pc, #52]	@ (80040f0 <__libc_init_array+0x38>)
 80040bc:	4c0d      	ldr	r4, [pc, #52]	@ (80040f4 <__libc_init_array+0x3c>)
 80040be:	1b64      	subs	r4, r4, r5
 80040c0:	10a4      	asrs	r4, r4, #2
 80040c2:	2600      	movs	r6, #0
 80040c4:	42a6      	cmp	r6, r4
 80040c6:	d109      	bne.n	80040dc <__libc_init_array+0x24>
 80040c8:	4d0b      	ldr	r5, [pc, #44]	@ (80040f8 <__libc_init_array+0x40>)
 80040ca:	4c0c      	ldr	r4, [pc, #48]	@ (80040fc <__libc_init_array+0x44>)
 80040cc:	f000 f818 	bl	8004100 <_init>
 80040d0:	1b64      	subs	r4, r4, r5
 80040d2:	10a4      	asrs	r4, r4, #2
 80040d4:	2600      	movs	r6, #0
 80040d6:	42a6      	cmp	r6, r4
 80040d8:	d105      	bne.n	80040e6 <__libc_init_array+0x2e>
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e0:	4798      	blx	r3
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7ee      	b.n	80040c4 <__libc_init_array+0xc>
 80040e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ea:	4798      	blx	r3
 80040ec:	3601      	adds	r6, #1
 80040ee:	e7f2      	b.n	80040d6 <__libc_init_array+0x1e>
 80040f0:	08004168 	.word	0x08004168
 80040f4:	08004168 	.word	0x08004168
 80040f8:	08004168 	.word	0x08004168
 80040fc:	0800416c 	.word	0x0800416c

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	bf00      	nop
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
